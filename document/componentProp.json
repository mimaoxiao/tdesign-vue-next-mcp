[
  {
    "name": "affix",
    "propsData": ":: BASE_DOC ::\n\n## API\n### Affix Props\n\n名称 | 类型 | 默认值 | 说明 | 必传\n-- | -- | -- | -- | --\ncontainer | String / Function | () => (() => window) | 指定滚动的容器。数据类型为 String 时，会被当作选择器处理，进行节点查询。示例：'body' 或 () => document.body。TS 类型：`ScrollContainer`。[通用类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/common.ts) | N\ncontent（暂未实现） | String / Slot / Function | - | 内容。TS 类型：`string \\| TNode`。[通用类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/common.ts) | N\ndefault | String / Slot / Function | - | 内容，同 content。TS 类型：`string \\| TNode`。[通用类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/common.ts) | N\noffsetBottom | Number | 0 |  距离容器底部达到指定距离后触发固定 | N\noffsetTop | Number | 0 |  距离容器顶部达到指定距离后触发固定 | N\nzIndex | Number | - | 固钉定位层级，样式默认为 500 | N\nonFixedChange | Function |  | TS 类型：`(affixed: boolean, context: { top: number }) => void`<br/>固定状态发生变化时触发 | N\n\n### Affix Events\n\n名称 | 参数 | 描述\n-- | -- | --\nfixed-change | `(affixed: boolean, context: { top: number })` | 固定状态发生变化时触发\n"
  },
  {
    "name": "alert",
    "propsData": ":: BASE_DOC ::\n\n## API\n\n### Alert Props\n\n名称 | 类型 | 默认值 | 描述 | 必传\n-- | -- | -- | -- | --\nclose | String / Boolean / Slot / Function | false | 即将废弃，请使用 closeBtn 属性。关闭按钮。值为 true 则显示默认关闭按钮；值为 false 则不显示按钮；值类型为 string 则直接显示；值类型为 Function 则可以自定关闭按钮。TS 类型：`string \\| boolean \\| TNode`。[通用类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/common.ts) | N\ncloseBtn | String / Boolean / Slot / Function | false | 关闭按钮。值为 true 则显示默认关闭按钮；值为 false 则不显示按钮；值类型为 string 则直接显示；值类型为 Function 则可以自定关闭按钮。TS 类型：`string \\| boolean \\| TNode`。[通用类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/common.ts) | N\ndefault | String / Slot / Function | - | 内容，同 message。TS 类型：`string \\| TNode`。[通用类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/common.ts) | N\nicon | Slot / Function | - | 图标。TS 类型：`TNode`。[通用类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/common.ts) | N\nmaxLine | Number | 0 | 内容显示最大行数，超出的内容会折叠收起，用户点击后再展开。值为 0 表示不折叠 | N\nmessage | String / Slot / Function | - | 内容（子元素）。TS 类型：`string \\| TNode`。[通用类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/common.ts) | N\noperation | Slot / Function | - | 跟在告警内容后面的操作区。TS 类型：`TNode`。[通用类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/common.ts) | N\ntheme | String | info | 组件风格。可选项：success/info/warning/error | N\ntitle | String / Slot / Function | - | 标题。TS 类型：`string \\| TNode`。[通用类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/common.ts) | N\nonClose | Function |  | TS 类型：`(context: { e: MouseEvent }) => void`<br/>关闭按钮点击时触发 | N\nonClosed | Function |  | TS 类型：`(context: { e: TransitionEvent }) => void`<br/>告警提示框关闭动画结束后触发 | N\n\n### Alert Events\n\n名称 | 参数 | 描述\n-- | -- | --\nclose | `(context: { e: MouseEvent })` | 关闭按钮点击时触发\nclosed | `(context: { e: TransitionEvent })` | 告警提示框关闭动画结束后触发\n"
  },
  {
    "name": "anchor",
    "propsData": ":: BASE_DOC ::\n\n## API\n### Anchor Props\n\n名称 | 类型 | 默认值 | 说明 | 必传\n-- | -- | -- | -- | --\naffixProps | Object | - | 透传 Affix 组件属性，即让 Anchor 组件支持所有 Affix 组件特性。TS 类型：`AffixProps`，[Affix API Documents](./affix?tab=api)。[详细类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/anchor/type.ts) | N\nbounds | Number | 5 | 锚点区域边界 | N\ncontainer | String / Function | () => (() => window) | 指定滚动的容器。数据类型为 String 时，会被当作选择器处理，进行节点查询。示例：'body' 或 () => document.body。TS 类型：`ScrollContainer` | N\ncursor | Slot / Function | - | 用于自定义选中项左侧游标。TS 类型：`TNode`。[通用类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/common.ts) | N\nsize | String | medium | 组件尺寸，small(120px)，medium(200px)，large(320px)。可选项：small/medium/large。TS 类型：`SizeEnum`。[通用类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/common.ts) | N\ntargetOffset | Number | 0 | 锚点滚动偏移量 | N\nonChange | Function |  | TS 类型：`(currentLink: string, prevLink: string) => void`<br/>锚点改变时触发 | N\nonClick | Function |  | TS 类型：`(link: { href: string; title: string; e: MouseEvent }) => void`<br/>锚点被点击时触发 | N\n\n### Anchor Events\n\n名称 | 参数 | 描述\n-- | -- | --\nchange | `(currentLink: string, prevLink: string)` | 锚点改变时触发\nclick | `(link: { href: string; title: string; e: MouseEvent })` | 锚点被点击时触发\n\n### AnchorItem Props\n\n名称 | 类型 | 默认值 | 说明 | 必传\n-- | -- | -- | -- | --\nhref | String | - | 必需。锚点链接, 如果是 hash 模式需要加上当前 path | Y\ntarget | String | _self | 锚点文本。可选项：_self/_blank/_parent/_top | N\ntitle | String / Slot / Function | '' | 锚点文本。TS 类型：`string \\| TNode`。[通用类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/common.ts) | N\ncustomScroll | Boolean | false | 自定义滚动效果，为true时点击锚点链接后不会使用js动画平滑滚动到锚点目标元素\n\n### AnchorTarget Props\n\n名称 | 类型 | 默认值 | 说明 | 必传\n-- | -- | -- | -- | --\nid | String | - | 必需。目标内容 id | Y\ntag | String | div | 渲染的标签 | N\n"
  },
  {
    "name": "auto-complete",
    "propsData": ":: BASE_DOC ::\n\n## API\n\n### AutoComplete Props\n\n名称 | 类型 | 默认值 | 描述 | 必传\n-- | -- | -- | -- | --\nautofocus | Boolean | - | 自动获取焦点 | N\nborderless | Boolean | false | 无边框模式 | N\nclearable | Boolean | - | 是否允许清空 | N\ndefault | String / Slot / Function | - | 触发显示联想词下拉框的元素，同 `triggerElement`。TS 类型：`string \\| TNode`。[通用类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/common.ts) | N\ndisabled | Boolean | undefined | 是否禁用 | N\nempty | String / Slot / Function | - | 当下拉联想词列表为空时显示的内容。TS 类型：`string \\| TNode`。[通用类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/common.ts) | N\nfilter | Function | - | 自定义过滤规则，用于对现有数据进行搜索过滤，判断是否过滤某一项数据。参数 `filterWords` 表示搜索词，`option`表示单个选项内容，返回值为 `true` 保留该选项，返回值为 `false` 则隐藏该选项。使用该方法时无需设置 `filterable`。TS 类型：`(filterWords: string, option: T) => boolean \\| Promise<boolean>` | N\nfilterable | Boolean | true | 是否根据输入内容过滤联想词。默认过滤规则不区分大小写，全文本任意位置匹配。如果默认搜索规则不符合业务需求，可以更为使用 `filter` 自定义过滤规则。部分场景下输入关键词和下拉联想词完全不同，此时可以设置为 `false` | N\nhighlightKeyword | Boolean | true | 是否高亮联想词中和输入值的相同部分 | N\ninputProps | Object | - | 透传 Input 组件全部特性。TS 类型：`InputProps`，[Input API Documents](./input?tab=api)。[详细类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/auto-complete/type.ts) | N\noptions | Array | - | 下拉联想词列表。示例一：`['联想词一', '联想词二']`。示例二：`{ label: () => <div>联想词元素</div>, text: '用于搜索的纯联想词' }`。TS 类型：`Array<T>` | N\npanelBottomContent | String / Slot / Function | - | 面板内的底部内容。TS 类型：`string \\| TNode`。[通用类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/common.ts) | N\npanelTopContent | String / Slot / Function | - | 面板内的顶部内容。TS 类型：`string \\| TNode`。[通用类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/common.ts) | N\nplaceholder | String | undefined | 输入框为空时的占位提示。组件本身默认值为 `undefined`，但全局配置存在默认值，不同语言全局默认值不同 | N\npopupProps | Object | - | 透传 Popup 组件全部属性。TS 类型：`PopupProps`，[Popup API Documents](./popup?tab=api)。[详细类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/auto-complete/type.ts) | N\nreadonly | Boolean | undefined | 是否只读 | N\nsize | String | medium | 组件尺寸。可选项：small/medium/large。TS 类型：`SizeEnum`。[通用类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/common.ts) | N\nstatus | String | default | 输入框状态。可选项：default/success/warning/error | N\ntextareaProps | Object | - | 透传 Textarea 组件全部特性。TS 类型：`TextareaProps`，[Textarea API Documents](./textarea?tab=api)。[详细类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/auto-complete/type.ts) | N\ntips | String / Slot / Function | - | 输入框下方提示文本，会根据不同的 `status` 呈现不同的样式。TS 类型：`string \\| TNode`。[通用类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/common.ts) | N\ntriggerElement | String / Slot / Function | - | 触发显示联想词下拉框的元素，默认为 Input 组件，可以使用 `trigger` 自定义为 Textarea 组件或其他组件。TS 类型：`string \\| TNode`。[通用类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/common.ts) | N\nvalue | String | - | 输入框的值，即当前指定的联想词。支持语法糖 `v-model` 或 `v-model:value` | N\ndefaultValue | String | - | 输入框的值，即当前指定的联想词。非受控属性 | N\nonBlur | Function |  | TS 类型：`(context: { e: FocusEvent; value: string }) => void`<br/>失去焦点时触发 | N\nonChange | Function |  | TS 类型：`(value: string, context?: { e?: InputEvent \\| MouseEvent \\| CompositionEvent \\| KeyboardEvent }) => void`<br/>输入框值发生变化时触发 | N\nonClear | Function |  | TS 类型：`(context: { e: MouseEvent }) => void`<br/>清空按钮点击时触发 | N\nonCompositionend | Function |  | TS 类型：`(context: { e: CompositionEvent; value: string }) => void`<br/>中文输入结束时触发 | N\nonCompositionstart | Function |  | TS 类型：`(context: { e: CompositionEvent; value: string }) => void`<br/>中文输入开始时触发 | N\nonEnter | Function |  | TS 类型：`(context: { e: KeyboardEvent; value: string }) => void`<br/>回车键按下时触发 | N\nonFocus | Function |  | TS 类型：`(context: { e: FocusEvent; value: string }) => void`<br/>获得焦点时触发 | N\nonSelect | Function |  | TS 类型：`(value: string, context: { e: MouseEvent \\| KeyboardEvent }) => void`<br/>选中联想词时触发 | N\n\n### AutoComplete Events\n\n名称 | 参数 | 描述\n-- | -- | --\nblur | `(context: { e: FocusEvent; value: string })` | 失去焦点时触发\nchange | `(value: string, context?: { e?: InputEvent \\| MouseEvent \\| CompositionEvent \\| KeyboardEvent })` | 输入框值发生变化时触发\nclear | `(context: { e: MouseEvent })` | 清空按钮点击时触发\ncompositionend | `(context: { e: CompositionEvent; value: string })` | 中文输入结束时触发\ncompositionstart | `(context: { e: CompositionEvent; value: string })` | 中文输入开始时触发\nenter | `(context: { e: KeyboardEvent; value: string })` | 回车键按下时触发\nfocus | `(context: { e: FocusEvent; value: string })` | 获得焦点时触发\nselect | `(value: string, context: { e: MouseEvent \\| KeyboardEvent })` | 选中联想词时触发\n"
  },
  {
    "name": "avatar",
    "propsData": ":: BASE_DOC ::\n\n## API\n### Avatar Props\n\n名称 | 类型 | 默认值 | 说明 | 必传\n-- | -- | -- | -- | --\nalt | String | - | 头像替换文本，仅当图片加载失败时有效 | N\ncontent | String / Slot / Function | - | 子元素内容。TS 类型：`string \\| TNode`。[通用类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/common.ts) | N\ndefault | String / Slot / Function | - | 子元素内容，同 content。TS 类型：`string \\| TNode`。[通用类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/common.ts) | N\nhideOnLoadFailed | Boolean | false | 加载失败时隐藏图片 | N\nicon | Slot / Function | - | 图标。TS 类型：`TNode`。[通用类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/common.ts) | N\nimage | String | - | 图片地址 | N\nimageProps | Object | - | 透传至 Image 组件。TS 类型：`ImageProps`，[Image API Documents](./image?tab=api)。[详细类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/avatar/type.ts) | N\nshape | String | circle | 形状。可选项：circle/round。TS 类型：`ShapeEnum ` `type ShapeEnum = 'circle' \\| 'round'`。[详细类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/avatar/type.ts) | N\nsize | String | - | 尺寸，示例值：small/medium/large/24px/38px 等。优先级高于 AvatarGroup.size 。Avatar 单独存在时，默认值为 medium。如果父组件存在 AvatarGroup，默认值便由 AvatarGroup.size 决定 | N\nonError | Function |  | TS 类型：`(context: { e: Event }) => void`<br/>图片加载失败时触发 | N\n\n### Avatar Events\n\n名称 | 参数 | 描述\n-- | -- | --\nerror | `(context: { e: Event })` | 图片加载失败时触发\n\n### AvatarGroup Props\n\n名称 | 类型 | 默认值 | 说明 | 必传\n-- | -- | -- | -- | --\ncascading | String | 'right-up' | 图片之间的层叠关系，可选值：左侧图片在上和右侧图片在上。可选项：left-up/right-up。TS 类型：`CascadingValue` `type CascadingValue = 'left-up' \\| 'right-up'`。[详细类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/avatar/type.ts) | N\ncollapseAvatar | String / Slot / Function | - | 头像数量超出时，会出现一个头像折叠元素。该元素内容可自定义。默认为 `+N`。示例：`+5`，`...`, `更多`。TS 类型：`string \\| TNode`。[通用类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/common.ts) | N\nmax | Number | - | 能够同时显示的最多头像数量 | N\npopupProps | Object | - | 【开发中】头像右上角提示信息。TS 类型：`PopupProps`，[Popup API Documents](./popup?tab=api)。[详细类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/avatar/type.ts) | N\nsize | String | - | 尺寸，示例值：small/medium/large/24px/38px 等。优先级低于 Avatar.size | N\n"
  },
  {
    "name": "back-top",
    "propsData": ":: BASE_DOC ::\n\n## API\n### BackTop Props\n\n名称 | 类型 | 默认值 | 说明 | 必传\n-- | -- | -- | -- | --\ncontainer | String / Function | 'body' | 监听滚动的容器。数据类型为 String 时，会被当作选择器处理，进行节点查询。示例：'body' 或 () => document.body。TS 类型：`AttachNode`。[通用类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/common.ts) | N\ncontent | String / Slot / Function | - | 回到顶部内容。TS 类型：`string \\| TNode`。[通用类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/common.ts) | N\ndefault | String / Slot / Function | - | 回到顶部内容，同 `content`。TS 类型：`string \\| TNode`。[通用类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/common.ts) | N\nduration | Number | 200 | 回到顶部的耗时单位：毫秒 | N\noffset | Array | [\"24px\", \"80px\"] | 回到顶部相对右下角的位置偏移，示例：[10, 20] 或 ['10em', '8rem']。TS 类型：`Array<string \\| number>` | N\nshape | String | square | 回到顶部的形状。可选项：circle/square。TS 类型：`BackTopShapeEnum ` `type BackTopShapeEnum = 'circle' \\| 'square'`。[详细类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/back-top/type.ts) | N\nsize | String | medium | 组件尺寸。可选项：medium/small | N\ntarget | String / Function | 'body' | 指定回到该对象。数据类型为 String 时，会被当作选择器处理，进行节点查询。示例：'body' 或 () => document.body。TS 类型：`AttachNode`。[通用类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/common.ts) | N\ntheme | String | light | 组件主题风格，浅色、主色、深色。可选项：light/primary/dark | N\nvisibleHeight | String / Number | '200px' | 滚动高度达到此参数值才出现 | N\nonClick | Function |  | TS 类型：`(context: { e: MouseEvent }) => void`<br/>点击回到顶部时触发 | N\n\n### BackTop Events\n\n名称 | 参数 | 描述\n-- | -- | --\nclick | `(context: { e: MouseEvent })` | 点击回到顶部时触发\n"
  },
  {
    "name": "badge",
    "propsData": ":: BASE_DOC ::\n\n## API\n### Badge Props\n\n名称 | 类型 | 默认值 | 说明 | 必传\n-- | -- | -- | -- | --\ncolor | String | - | 颜色 | N\ncontent | String / Slot / Function | - | 徽标内容。TS 类型：`string \\| TNode`。[通用类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/common.ts) | N\ncount | String / Number / Slot / Function | 0 | 徽标右上角内容。可以是数字，也可以是文字。如：'new'/3/99+。TS 类型：`string \\| number \\| TNode`。[通用类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/common.ts) | N\ndefault | String / Slot / Function | - | 徽标内容，默认插槽，同 content。TS 类型：`string \\| TNode`。[通用类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/common.ts) | N\ndot | Boolean | false | 是否为红点 | N\nmaxCount | Number | 99 | 封顶的数字值 | N\noffset | Array | - | 设置状态点的位置偏移，示例：[-10, 20] 或 ['10em', '8rem']。TS 类型：`Array<string \\| number>` | N\nshape | String | circle | 形状。可选项：circle/round | N\nshowZero | Boolean | false | 当数值为 0 时，是否展示徽标 | N\nsize | String | medium | 尺寸。可选项：small/medium | N\n"
  },
  {
    "name": "breadcrumb",
    "propsData": ":: BASE_DOC ::\n\n### 带跳转/点击的面包屑\n\n自定义响应点击事件。\n\n{{ href }}\n\n## API\n### Breadcrumb Props\n\n名称 | 类型 | 默认值 | 描述 | 必传\n-- | -- | -- | -- | --\nellipsis | String / Slot / Function | - | 自定义折叠时省略号的内容。其中，`items`为被省略的内容合集，`separator`为分隔符。TS 类型：`string \\| TNode<{ items: Array<TdBreadcrumbItemProps>, separator: TdBreadcrumbProps['separator'] }>`。[通用类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/common.ts) | N\nitemsAfterCollapse | Number | undefined | 超过面包屑最大显示数量时，省略号后显示几项。`maxItems > 0`时有效 | N\nitemsBeforeCollapse | Number | undefined | 超过面包屑最大显示数量时，省略号前显示几项。`maxItems > 0`时有效 | N\nmaxItemWidth | String | undefined | 单项最大宽度，超出后会以省略号形式呈现 | N\nmaxItems | Number | undefined | 显示的面包屑的最大数量，超出该值后中间的面包屑内容将会显示为省略号。值`<= 0`代表不限制。需要同时配置`itemsBeforeCollapse`和`itemsAfterCollapse` | N\noptions | Array | - | 面包屑项，功能同 BreadcrumbItem。TS 类型：`Array<TdBreadcrumbItemProps>` | N\nseparator | String / Slot / Function | - | 自定义分隔符。TS 类型：`string \\| TNode`。[通用类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/common.ts) | N\ntheme | String | light | 组件风格。可选项：light | N\n\n### BreadcrumbItem Props\n\n名称 | 类型 | 默认值 | 描述 | 必传\n-- | -- | -- | -- | --\ncontent | String / Slot / Function | - | 子元素。TS 类型：`string \\| TNode`。[通用类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/common.ts) | N\ndefault | String / Slot / Function | - | 子元素，同 content。TS 类型：`string \\| TNode`。[通用类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/common.ts) | N\ndisabled | Boolean | - | 是否禁用当前项点击 | N\nhref | String | - | 跳转链接，不能与 to 共用 | N\nicon | Slot / Function | - | 面板屑项内的前置图标。TS 类型：`TNode`。[通用类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/common.ts) | N\nmaxWidth | String | undefined | 最大宽度，超出后会以省略号形式呈现。优先级高于 Breadcrumb 中的 maxItemWidth | N\nreplace | Boolean | false | 路由跳转是否采用覆盖的方式（覆盖后将没有浏览器历史记录） | N\nrouter | Object | - | 路由对象。如果项目存在 Router，则默认使用 Router。TS 类型：`any` | N\ntarget | String | _self | 链接或路由跳转方式。可选项：_blank/_self/_parent/_top | N\nto | String / Object | - | 路由跳转目标，当且仅当 Router 存在时，该 API 有效。不能与 href 共用。TS 类型：`string \\| Route` `interface Route { path?: string; name?: string; hash?: string; query?: RouteData; params?: RouteData }` `type RouteData = { [key: string]: string \\| string[] }`。[详细类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/breadcrumb/type.ts) | N\nonClick | Function |  | TS 类型：`(e: MouseEvent) => void`<br/>点击时触发 | N\n\n### BreadcrumbItem Events\n\n名称 | 参数 | 描述\n-- | -- | --\nclick | `(e: MouseEvent)` | 点击时触发\n"
  },
  {
    "name": "button",
    "propsData": ":: BASE_DOC ::\n\n## API\n\n### Button Props\n\n名称 | 类型 | 默认值 | 说明 | 必传\n-- | -- | -- | -- | --\nblock | Boolean | false | 是否为块级元素 | N\ncontent | String / Slot / Function | - | 按钮内容。TS 类型：`string \\| TNode`。[通用类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/common.ts) | N\ndefault | String / Slot / Function | - | 按钮内容。TS 类型：`string \\| TNode`。[通用类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/common.ts) | N\ndisabled | Boolean | undefined | 禁用状态。优先级：Button.disabled > Form.disabled | N\nform | String | undefined | 原生的form属性，支持用于通过form属性对于id的form的表单事件 | N\nghost | Boolean | false | 是否为幽灵按钮（镂空按钮） | N\nhref | String | - | 跳转地址。href 存在时，按钮标签默认使用 `<a>` 渲染；如果指定了 `tag` 则使用指定的标签渲染 | N\nicon | Slot / Function | - | 按钮内部图标，可完全自定义。TS 类型：`TNode`。[通用类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/common.ts) | N\nloading | Boolean | false | 是否显示为加载状态 | N\nshape | String | rectangle | 按钮形状，有 4 种：长方形、正方形、圆角长方形、圆形。可选项：rectangle/square/round/circle | N\nloadingProps | Object | - | 透传加载组件全部属性。TS 类型：`Partial<LoadingProps>`，[Loading API Documents](./loading?tab=api)。[详细类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/button/type.ts) | N\nsize | String | medium | 组件尺寸。可选项：small/medium/large。TS 类型：`SizeEnum`。[通用类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/common.ts) | N\nsuffix | Slot / Function | - | 右侧内容，可用于定义右侧图标。TS 类型：`TNode`。[通用类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/common.ts) | N\ntag | String | - | 渲染按钮的 HTML 标签，默认使用标签 `<button>` 渲染，可以自定义为 `<a>` `<div>` 等。透传全部 HTML 属性，如：`href/target/data-*` 等。⚠️ 禁用按钮 `<button disabled>`无法显示 Popup 浮层信息，可通过修改 `tag=div` 解决这个问题。可选项：button/a/div | N\ntheme | String | - | 组件风格，依次为默认色、品牌色、危险色、警告色、成功色。可选项：default/primary/danger/warning/success | N\ntype | String | button | 按钮类型。可选项：submit/reset/button | N\nvariant | String | base | 按钮形式，基础、线框、虚线、文字。可选项：base/outline/dashed/text | N\nonClick | Function |  | TS 类型：`(e: MouseEvent) => void`<br/>点击时触发 | N\n\n### Button Events\n\n名称 | 参数 | 描述\n-- | -- | --\nclick | `(e: MouseEvent)` | 点击时触发\n"
  },
  {
    "name": "calendar",
    "propsData": ":: BASE_DOC ::\n\n## API\n### Calendar Props\n\n名称 | 类型 | 默认值 | 说明 | 必传\n-- | -- | -- | -- | --\ncell | String / Slot / Function | - | 单元格插槽。TS 类型：`string \\| TNode<CalendarCell>`。[通用类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/common.ts) | N\ncellAppend | String / Slot / Function | - | 单元格插槽，在原来的内容之后追加。TS 类型：`string \\| TNode<CalendarCell>`。[通用类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/common.ts) | N\ncontrollerConfig | Boolean / Object | undefined | 右上角控制器配置。支持全局配置。值为 false 则表示不显示控制器，值为 true 则显示控制器默认配置，值类型为 CalendarController 则显示为自定义控制器配置。TS 类型：`boolean \\| CalendarController` | N\nfillWithZero | Boolean | true | 小于 10 的日期，是否使用 '0' 填充。支持全局配置。默认表现为 `01` `02`，值为 false 表现为 `1` `2` `9` | N\nfirstDayOfWeek | Number | 1 | 第一天从星期几开始，仅在日历展示维度为月份时（mode = month）有效。默认为 1。可选项：1/2/3/4/5/6/7 | N\nformat | String | 'YYYY-MM-DD' | 用于格式化日期，决定事件参数 formattedFilterDate 的输出值。[详细文档](https://day.js.org/docs/en/display/format) | N\nhead | String / Slot / Function | - | 头部插槽（左上角处，默认不显示任何内容）。TS 类型：`string \\| TNode<ControllerOptions>`。[通用类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/common.ts) | N\nisShowWeekendDefault | Boolean | true | 默认是否显示周末 | N\nmode | String | month | 日历展示维度。可选项：month/year | N\nmonth | String / Number | - | 控制当前面板展示月份，优先级高于 `controllerConfig.month` | N\nmultiple | Boolean | - | 是否高亮多个日期单元格 | N\npreventCellContextmenu | Boolean | false | 是否禁用单元格右键默认系统菜单 | N\nrange | Array | - | 用于设置日历的年月份显示范围，[范围开始，范围结束]。TS 类型：`Array<CalendarValue>` | N\ntheme | String | full | 日历风格。可选项：full/card | N\nvalue | String / Array / Date | - | 当前高亮的日期。TS 类型：`CalendarValue \\| CalendarValue[]` `type CalendarValue = string \\| Date`。[详细类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/calendar/type.ts) | N\nweek | Array / Slot / Function | - | 用于自定义日历星期呈现方式。CalendarWeek.day 表示当前是星期几。示例一：['周一', '周二', '周三', '周四', '周五', '星期六', '星期天']。示例二：`({ day }) => '周' + day`。TS 类型：`Array<string> \\| TNode<CalendarWeek>` `interface CalendarWeek { day: WeekDay }` `type WeekDay = 1 \\| 2 \\| 3 \\| 4 \\| 5 \\| 6 \\| 7`。[通用类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/common.ts)。[详细类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/calendar/type.ts) | N\nyear | String / Number | - | 控制当前面板展示年份，优先级高于 `controllerConfig.year` | N\nonCellClick | Function |  | TS 类型：`(options: { cell: CalendarCell; e: MouseEvent }) => void`<br/>日历单元格点击时触发 | N\nonCellDoubleClick | Function |  | TS 类型：`(options: { cell: CalendarCell; e: MouseEvent }) => void`<br/>日历单元格双击时触发 | N\nonCellRightClick | Function |  | TS 类型：`(options: { cell: CalendarCell; e: MouseEvent }) => void`<br/>日历单元格右击时触发 | N\nonControllerChange | Function |  | TS 类型：`(options: ControllerOptions) => void`<br/>右上角控件组选中值有变化的时候触发。[详细类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/calendar/type.ts)。<br/>`interface ControllerOptions { filterDate: Date; formattedFilterDate: string; mode: string; isShowWeekend: boolean }`<br/> | N\nonMonthChange | Function |  | TS 类型：`(options: { month: string; year: string }) => void`<br/>月份切换时触发 | N\n\n### Calendar Events\n\n名称 | 参数 | 描述\n-- | -- | --\ncell-click | `(options: { cell: CalendarCell; e: MouseEvent })` | 日历单元格点击时触发\ncell-double-click | `(options: { cell: CalendarCell; e: MouseEvent })` | 日历单元格双击时触发\ncell-right-click | `(options: { cell: CalendarCell; e: MouseEvent })` | 日历单元格右击时触发\ncontroller-change | `(options: ControllerOptions)` | 右上角控件组选中值有变化的时候触发。[详细类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/calendar/type.ts)。<br/>`interface ControllerOptions { filterDate: Date; formattedFilterDate: string; mode: string; isShowWeekend: boolean }`<br/>\nmonth-change | `(options: { month: string; year: string })` | 月份切换时触发\n\n### CalendarController\n\n名称 | 类型 | 默认值 | 说明 | 必传\n-- | -- | -- | -- | --\ncurrent | Object | - | “今天(本月)”按钮控制器。TS 类型：`{ visible?: boolean; currentDayButtonProps?: ButtonProps; currentMonthButtonProps?: ButtonProps }`，[Button API Documents](./button?tab=api)。[详细类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/calendar/type.ts) | N\ndisabled | Boolean | false | 是否禁用右上角控制器 | N\nmode | Object | - | 日历展示维度控制器。TS 类型：`{ visible?: boolean; radioGroupProps?: RadioGroupProps }`，[Radio API Documents](./radio?tab=api)。[详细类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/calendar/type.ts) | N\nmonth | Object | - | 日历月份控制器。TS 类型：`{ visible?: boolean; selectProps?: SelectProps }` | N\nweekend | Object | - | 隐藏/显示周末控制器。TS 类型：`{ visible?: boolean; showWeekendButtonProps?: CheckTagProps; hideWeekendButtonProps?: CheckTagProps }`，[Tag API Documents](./tag?tab=api)。[详细类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/calendar/type.ts) | N\nyear | Object | - | 日历年份控制器。TS 类型：`{ visible?: boolean; selectProps?: SelectProps }`，[Select API Documents](./select?tab=api)。[详细类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/calendar/type.ts) | N\n\n### CalendarCell\n\n名称 | 类型 | 默认值 | 说明 | 必传\n-- | -- | -- | -- | --\nbelongTo | Number | - | 用于表示日期单元格属于哪一个月份。值为 0 表示是当前日历显示的月份中的日期，值为 -1 表示是上个月的，值为 1 表示是下个月的（日历展示维度是“月”时有值） | N\ndate | Object | - | 日历单元格日期。TS 类型：`Date` | N\nday | Number | - | 日期单元格对应的星期，值为 1~7，表示周一到周日。（日历展示维度是“月”时有值） | N\nformattedDate | String | - | 日历单元格日期字符串（输出日期的格式和 format 有关） | N\nisCurrent | Boolean | - | 日期单元格是否为当前高亮日期或高亮月份 | N\nweekOrder | Number | - | 日期在本月的第几周（日历展示维度是“月”时有值） | N\n`ControllerOptions` | \\- | - | 继承 `ControllerOptions` 中的全部 API | N"
  },
  {
    "name": "card",
    "propsData": ":: BASE_DOC ::\n\n## API\n\n### Card Props\n\n名称 | 类型 | 默认值 | 说明 | 必传\n-- | -- | -- | -- | --\nactions | String / Slot / Function | - | 卡片操作区。TS 类型：`string \\| TNode`。[通用类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/common.ts) | N\navatar | String / Slot / Function | - | 卡片中的用户头像，仅在海报风格的卡片中有效。TS 类型：`string \\| TNode`。[通用类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/common.ts) | N\nbordered | Boolean | true | 是否有边框 | N\ncontent | String / Slot / Function | - | 卡片内容。TS 类型：`string \\| TNode`。[通用类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/common.ts) | N\ncover | String / Slot / Function | - | 卡片封面图。值类型为字符串，会自动使用 `img` 标签输出封面图；也可以完全自定义封面图。TS 类型：`string \\| TNode`。[通用类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/common.ts) | N\ndefault | String / Slot / Function | - | 卡片内容，同 content。TS 类型：`string \\| TNode`。[通用类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/common.ts) | N\ndescription | String / Slot / Function | - | 卡片描述文案。TS 类型：`string \\| TNode`。[通用类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/common.ts) | N\nfooter | String / Slot / Function | - | 卡片底部内容，可完全自定义。TS 类型：`string \\| TNode`。[通用类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/common.ts) | N\nheader | String / Slot / Function | - | 卡片顶部内容，优先级高于其他所有元素。TS 类型：`string \\| TNode`。[通用类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/common.ts) | N\nheaderBordered | Boolean | false | 头部是否带分割线，仅在有header时有效 | N\nhoverShadow | Boolean | false | hover时是否有阴影 | N\nloading | Boolean / Slot / Function | false | 加载状态，值为 true 会根据不同的布局显示不同的加载状态，值为 false 则表示非加载状态。也可以使用 Skeleton 组件完全自定义加载态呈现内容。TS 类型：`boolean \\| TNode`。[通用类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/common.ts) | N\nloadingProps | Object | - | 透传加载组件(Loading)全部属性。TS 类型：`LoadingProps`，[Loading API Documents](./loading?tab=api)。[详细类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/card/type.ts) | N\nshadow | Boolean | false | 是否显示卡片阴影，默认不显示 | N\nsize | String | medium | 尺寸。可选项：medium/small | N\nstatus | String | - | 卡片状态内容，仅在操作区域不在顶部时有效（即 `theme=poster2` ） | N\nsubtitle | String / Slot / Function | - | 卡片副标题。TS 类型：`string \\| TNode`。[通用类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/common.ts) | N\ntheme | String | normal | 卡片风格：普通风格、海报风格1（操作区域在顶部）、海报风格2（操作区域在底部）。可选项：normal/poster1/poster2 | N\ntitle | String / Slot / Function | - | 卡片标题。TS 类型：`string \\| TNode`。[通用类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/common.ts) | N\n"
  },
  {
    "name": "cascader",
    "propsData": ":: BASE_DOC ::\n\n## API\n\n### Cascader Props\n\n名称 | 类型 | 默认值 | 描述 | 必传\n-- | -- | -- | -- | --\nautofocus | Boolean | - | 自动聚焦 | N\nborderless | Boolean | false | 无边框模式 | N\ncheckProps | Object | - | 参考 checkbox 组件 API。TS 类型：`CheckboxProps`，[Checkbox API Documents](./checkbox?tab=api)。[详细类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/cascader/type.ts) | N\ncheckStrictly | Boolean | false | 父子节点选中状态不再关联，可各自选中或取消 | N\nclearable | Boolean | false | 是否支持清空选项 | N\ncollapsedItems | Slot / Function | - | 多选情况下，用于设置折叠项内容，默认为 `+N`。如果需要悬浮就显示其他内容，可以使用 collapsedItems 自定义。`value` 表示当前存在的所有标签，`collapsedSelectedItems` 表示折叠的标签，`count` 表示折叠的数量，`onClose` 表示移除标签的事件回调。TS 类型：`TNode<{ value: CascaderOption[]; collapsedSelectedItems: CascaderOption[]; count: number; onClose: (context: { index: number, e?: MouseEvent }) => void }>`。[通用类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/common.ts) | N\ndisabled | Boolean | undefined | 是否禁用组件 | N\nempty | String / Slot / Function | - | 无匹配选项时的内容，默认全局配置为 '暂无数据'。TS 类型：`string \\| TNode`。[通用类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/common.ts) | N\nfilter | Function | - | 自定义过滤方法，用于对现有数据进行搜索过滤，判断是否过滤某一项数据。TS 类型：`(filterWords: string, node: TreeNodeModel) => boolean \\| Promise<boolean>` | N\nfilterable | Boolean | false | 是否可搜索 | N\ninputProps | Object | - | 透传 Input 输入框组件的全部属性。TS 类型：`InputProps`，[Input API Documents](./input?tab=api)。[详细类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/cascader/type.ts) | N\nkeys | Object | - | 用来定义 value / label / children / disabled 在 `options` 中对应的字段别名。TS 类型：`TreeKeysType`。[通用类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/common.ts) | N\nlabel | String / Slot / Function | - | 左侧文本。TS 类型：`string \\| TNode`。[通用类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/common.ts) | N\nlazy | Boolean | true | 延迟加载 children 为 true 的子节点，即使 expandAll 被设置为 true，也同样延迟加载 | N\nload | Function | - | 加载子树数据的方法（仅当节点 children 为 true 时生效）。TS 类型：`(node: TreeNodeModel<CascaderOption>) => Promise<Array<CascaderOption>>` | N\nloading | Boolean | false | 是否为加载状态 | N\nloadingText | String / Slot / Function | - | 远程加载时显示的文字，支持自定义。如加上超链接。TS 类型：`string \\| TNode`。[通用类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/common.ts) | N\nmax | Number | 0 | 用于控制多选数量，值为 0 则不限制 | N\nminCollapsedNum | Number | 0 | 最小折叠数量，用于多选情况下折叠选中项，超出该数值的选中项折叠。值为 0 则表示不折叠 | N\nmultiple | Boolean | false | 是否允许多选 | N\noption | Slot / Function | - | 自定义单个级联选项。TS 类型：`TNode<{ item: CascaderOption; index: number }>`。[通用类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/common.ts) | N\noptions | Array | [] | 可选项数据源。TS 类型：`Array<CascaderOption>` | N\npanelBottomContent | String / Slot / Function | - | 面板内的底部内容。TS 类型：`string \\| TNode`。[通用类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/common.ts) | N\npanelTopContent | String / Slot / Function | - | 面板内的顶部内容。TS 类型：`string \\| TNode`。[通用类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/common.ts) | N\nplaceholder | String | undefined | 占位符 | N\npopupProps | Object | - | 参考 popup 组件 API。TS 类型：`PopupProps`，[Popup API Documents](./popup?tab=api)。[详细类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/cascader/type.ts) | N\npopupVisible | Boolean | - | 是否显示下拉框 | N\ndefaultPopupVisible | Boolean | - | 是否显示下拉框。非受控属性 | N\nprefixIcon | Slot / Function | - | 组件前置图标。TS 类型：`TNode`。[通用类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/common.ts) | N\nreadonly | Boolean | undefined | 只读状态，值为真会隐藏输入框，且无法打开下拉框 | N\nreserveKeyword | Boolean | false | 多选且可搜索时，是否在选中一个选项后保留当前的搜索关键词 | N\nselectInputProps | Object | - | 透传 SelectInput 筛选器输入框组件的全部属性。TS 类型：`SelectInputProps`，[SelectInput API Documents](./select-input?tab=api)。[详细类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/cascader/type.ts) | N\nshowAllLevels | Boolean | true | 选中值使用完整路径，输入框在单选时也显示完整路径 | N\nsize | String | medium | 组件尺寸。可选项：large/medium/small。TS 类型：`SizeEnum`。[通用类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/common.ts) | N\nstatus | String | default | 输入框状态。可选项：default/success/warning/error | N\nsuffix | String / Slot / Function | - | 后置图标前的后置内容。TS 类型：`string \\| TNode`。[通用类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/common.ts) | N\nsuffixIcon | Slot / Function | - | 组件后置图标。TS 类型：`TNode`。[通用类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/common.ts) | N\ntagInputProps | Object | - | 透传 TagInput 标签输入框组件的全部属性。TS 类型：`TagInputProps`，[TagInput API Documents](./tag-input?tab=api)。[详细类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/cascader/type.ts) | N\ntagProps | Object | - | 透传 Tag 标签组件全部属性。TS 类型：`TagProps`，[Tag API Documents](./tag?tab=api)。[详细类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/cascader/type.ts) | N\ntips | String / Slot / Function | - | 输入框下方提示文本，会根据不同的 `status` 呈现不同的样式。TS 类型：`string \\| TNode`。[通用类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/common.ts) | N\ntrigger | String | click | 展开下一层级的方式。可选项：click/hover | N\nvalue | String / Number / Array | [] | 选中项的值。支持语法糖 `v-model` 或 `v-model:value`。TS 类型：`CascaderValue<CascaderOption>` `type CascaderValue<T extends TreeOptionData = TreeOptionData> = string \\| number \\| T \\| Array<CascaderValue<T>>`。[通用类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/common.ts)。[详细类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/cascader/type.ts) | N\ndefaultValue | String / Number / Array | [] | 选中项的值。非受控属性。TS 类型：`CascaderValue<CascaderOption>` `type CascaderValue<T extends TreeOptionData = TreeOptionData> = string \\| number \\| T \\| Array<CascaderValue<T>>`。[通用类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/common.ts)。[详细类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/cascader/type.ts) | N\nvalueDisplay | String / Slot / Function | - | 自定义选中项呈现的内容。TS 类型：`string \\| TNode<{ value: CascaderValue<CascaderOption>; onClose: (index: number) => void; displayValue?: CascaderValue<CascaderOption>; selectedOptions: CascaderOption[] }>`。[通用类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/common.ts) | N\nvalueMode | String | onlyLeaf | 选中值模式。all 表示父节点和子节点全部会出现在选中值里面；parentFirst 表示当子节点全部选中时，仅父节点在选中值里面；onlyLeaf 表示无论什么情况，选中值仅呈现叶子节点。可选项：onlyLeaf/parentFirst/all | N\nvalueType | String | single | 用于控制选中值的类型。single 表示输入输出值为 叶子结点值， full 表示输入输出值为全路径。可选项：single/full | N\nonBlur | Function |  | TS 类型：`(context: { value: CascaderValue<CascaderOption> } & SelectInputBlurContext ) => void`<br/>当输入框失去焦点时触发 | N\nonChange | Function |  | TS 类型：`(value: CascaderValue<CascaderOption>, context: CascaderChangeContext<CascaderOption>) => void`<br/>选中值发生变化时触发。TreeNodeModel 从树组件中导出。`context.node` 表示触发事件的节点，`context.source` 表示触发事件的来源。[详细类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/cascader/type.ts)。<br/>`interface CascaderChangeContext<CascaderOption> { node?: TreeNodeModel<CascaderOption>; source: CascaderChangeSource }`<br/><br/>`import { TreeNodeModel } from '@Tree'`<br/><br/>`type CascaderChangeSource = 'invalid-value' \\| 'check' \\| 'clear' \\| 'uncheck'`<br/> | N\nonFocus | Function |  | TS 类型：`(context: { value: CascaderValue<CascaderOption>; e: FocusEvent }) => void`<br/>获得焦点时触发 | N\nonPopupVisibleChange | Function |  | TS 类型：`(visible: boolean, context: PopupVisibleChangeContext) => void`<br/>下拉框显示或隐藏时触发。[详细类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/cascader/type.ts)。<br/>`import { PopupVisibleChangeContext } from '@Popup'`<br/> | N\nonRemove | Function |  | TS 类型：`(context: RemoveContext<CascaderOption>) => void`<br/>多选模式下，选中数据被移除时触发。[详细类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/cascader/type.ts)。<br/>`interface RemoveContext<T> { value: CascaderValue<T>; node: TreeNodeModel<T> }`<br/> | N\n\n### Cascader Events\n\n名称 | 参数 | 描述\n-- | -- | --\nblur | `(context: { value: CascaderValue<CascaderOption> } & SelectInputBlurContext )` | 当输入框失去焦点时触发\nchange | `(value: CascaderValue<CascaderOption>, context: CascaderChangeContext<CascaderOption>)` | 选中值发生变化时触发。TreeNodeModel 从树组件中导出。`context.node` 表示触发事件的节点，`context.source` 表示触发事件的来源。[详细类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/cascader/type.ts)。<br/>`interface CascaderChangeContext<CascaderOption> { node?: TreeNodeModel<CascaderOption>; source: CascaderChangeSource }`<br/><br/>`import { TreeNodeModel } from '@Tree'`<br/><br/>`type CascaderChangeSource = 'invalid-value' \\| 'check' \\| 'clear' \\| 'uncheck'`<br/>\nfocus | `(context: { value: CascaderValue<CascaderOption>; e: FocusEvent })` | 获得焦点时触发\npopup-visible-change | `(visible: boolean, context: PopupVisibleChangeContext)` | 下拉框显示或隐藏时触发。[详细类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/cascader/type.ts)。<br/>`import { PopupVisibleChangeContext } from '@Popup'`<br/>\nremove | `(context: RemoveContext<CascaderOption>)` | 多选模式下，选中数据被移除时触发。[详细类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/cascader/type.ts)。<br/>`interface RemoveContext<T> { value: CascaderValue<T>; node: TreeNodeModel<T> }`<br/>\n"
  },
  {
    "name": "checkbox",
    "propsData": ":: BASE_DOC ::\n\n## API\n\n### Checkbox Props\n\n名称 | 类型 | 默认值 | 描述 | 必传\n-- | -- | -- | -- | --\ncheckAll | Boolean | false | 用于标识是否为「全选选项」。单独使用无效，需在 CheckboxGroup 中使用 | N\nchecked | Boolean | false | 是否选中。支持语法糖 `v-model` 或 `v-model:checked` | N\ndefaultChecked | Boolean | false | 是否选中。非受控属性 | N\ndefault | String / Slot / Function | - | 多选框内容，同 label。TS 类型：`string \\| TNode`。[通用类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/common.ts) | N\ndisabled | Boolean | undefined | 是否禁用组件。如果父组件存在 CheckboxGroup，默认值由 CheckboxGroup.disabled 控制。优先级：Checkbox.disabled > CheckboxGroup.disabled > Form.disabled | N\nindeterminate | Boolean | false | 是否为半选 | N\nlabel | String / Slot / Function | - | 主文案。TS 类型：`string \\| TNode`。[通用类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/common.ts) | N\nlazyLoad | Boolean | false | 是否启用懒加载。数据量大时建议开启；加载复杂内容或大量图片时建议开启 | N\nname | String | - | HTML 元素原生属性 | N\nreadonly | Boolean | undefined | 只读状态 | N\ntitle | String | - | HTML 原生属性 | N\nvalue | String / Number / Boolean | - | 多选框的值。TS 类型：`string \\| number \\| boolean` | N\nonChange | Function |  | TS 类型：`(checked: boolean, context: { e: Event }) => void`<br/>值变化时触发 | N\n\n### Checkbox Events\n\n名称 | 参数 | 描述\n-- | -- | --\nchange | `(checked: boolean, context: { e: Event })` | 值变化时触发\n\n\n### CheckboxGroup Props\n\n名称 | 类型 | 默认值 | 描述 | 必传\n-- | -- | -- | -- | --\ndisabled | Boolean | undefined | 是否禁用组件。优先级：Form.disabled < CheckboxGroup.disabled < Checkbox.disabled | N\nlazyLoad | Boolean | false | 是否启用懒加载。子组件 Checkbox 数据量大时建议开启；加载复杂内容或大量图片时建议开启 | N\nmax | Number | undefined | 支持最多选中的数量 | N\nname | String | - | 统一设置内部复选框 HTML 属性 | N\noptions | Array | - | 以配置形式设置子元素。示例1：`['北京', '上海']` ，示例2: `[{ label: '全选', checkAll: true }, { label: '上海', value: 'shanghai' }]`。checkAll 值为 true 表示当前选项为「全选选项」。TS 类型：`Array<CheckboxOption>` `type CheckboxOption = string \\| number \\| CheckboxOptionObj` `interface CheckboxOptionObj extends TdCheckboxProps { text?: string; }`。[详细类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/checkbox/type.ts) | N\nreadonly | Boolean | undefined | 只读状态 | N\nvalue | Array | [] | 选中值。支持语法糖 `v-model` 或 `v-model:value`。TS 类型：`T` `type CheckboxGroupValue = Array<string \\| number \\| boolean>`。[详细类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/checkbox/type.ts) | N\ndefaultValue | Array | [] | 选中值。非受控属性。TS 类型：`T` `type CheckboxGroupValue = Array<string \\| number \\| boolean>`。[详细类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/checkbox/type.ts) | N\nonChange | Function |  | TS 类型：`(value: T, context: CheckboxGroupChangeContext) => void`<br/>值变化时触发。`context.current` 表示当前变化的数据项，如果是全选则为空；`context.type` 表示引起选中数据变化的是选中或是取消选中，`context.option` 表示当前变化的数据项。[详细类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/checkbox/type.ts)。<br/>`interface CheckboxGroupChangeContext { e: Event; current: string \\| number \\| boolean; option: CheckboxOption \\| TdCheckboxProps; type: 'check' \\| 'uncheck' }`<br/> | N\n\n### CheckboxGroup Events\n\n名称 | 参数 | 描述\n-- | -- | --\nchange | `(value: T, context: CheckboxGroupChangeContext)` | 值变化时触发。`context.current` 表示当前变化的数据项，如果是全选则为空；`context.type` 表示引起选中数据变化的是选中或是取消选中，`context.option` 表示当前变化的数据项。[详细类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/checkbox/type.ts)。<br/>`interface CheckboxGroupChangeContext { e: Event; current: string \\| number \\| boolean; option: CheckboxOption \\| TdCheckboxProps; type: 'check' \\| 'uncheck' }`<br/>\n"
  },
  {
    "name": "collapse",
    "propsData": ":: BASE_DOC ::\n\n## API\n### Collapse Props\n\n名称 | 类型 | 默认值 | 说明 | 必传\n-- | -- | -- | -- | --\nborderless | Boolean | false | 是否为无边框模式 | N\ndefaultExpandAll | Boolean | false | 默认是否展开全部 | N\ndisabled | Boolean | - | 是否禁用面板展开/收起操作 | N\nexpandIcon | Boolean / Slot / Function | true | 展开图标。值为 undefined 或 false 则不显示展开图标；值为 true 显示默认图标；值类型为函数，则表示完全自定义展开图标。TS 类型：`boolean \\| TNode`。[通用类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/common.ts) | N\nexpandIconPlacement | String | left | 展开图标的位置，左侧或右侧。可选项：left/right | N\nexpandMutex | Boolean | false | 每个面板互斥展开，每次只展开一个面板 | N\nexpandOnRowClick | Boolean | true | 是否允许点击整行标题展开面板 | N\nvalue | Array | [] | 展开的面板集合。支持语法糖 `v-model` 或 `v-model:value`。TS 类型：`CollapseValue` `type CollapseValue = Array<string \\| number>`。[详细类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/collapse/type.ts) | N\ndefaultValue | Array | [] | 展开的面板集合。非受控属性。TS 类型：`CollapseValue` `type CollapseValue = Array<string \\| number>`。[详细类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/collapse/type.ts) | N\nonChange | Function |  | TS 类型：`(value: CollapseValue) => void`<br/>切换面板时触发，返回变化的值 | N\n\n### Collapse Events\n\n名称 | 参数 | 描述\n-- | -- | --\nchange | `(value: CollapseValue)` | 切换面板时触发，返回变化的值\n\n### CollapsePanel Props\n\n名称 | 类型 | 默认值 | 说明 | 必传\n-- | -- | -- | -- | --\ncontent | String / Slot / Function | - | 折叠面板内容。TS 类型：`string \\| TNode`。[通用类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/common.ts) | N\ndefault | String / Slot / Function | - | 折叠面板内容，同 content。TS 类型：`string \\| TNode`。[通用类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/common.ts) | N\ndestroyOnCollapse | Boolean | false | 当前面板处理折叠状态时，是否销毁面板内容 | N\ndisabled | Boolean | undefined | 禁止当前面板展开，优先级大于 Collapse 的同名属性 | N\nexpandIcon | Boolean / Slot / Function | undefined | 当前折叠面板展开图标，优先级大于 Collapse 的同名属性。TS 类型：`boolean \\| TNode`。[通用类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/common.ts) | N\nheader | String / Slot / Function | - | 面板头内容。TS 类型：`string \\| TNode`。[通用类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/common.ts) | N\nheaderRightContent | String / Slot / Function | - | 面板头的右侧区域，一般用于呈现面板操作。TS 类型：`string \\| TNode`。[通用类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/common.ts) | N\nvalue | String / Number | - | 必需。当前面板唯一标识，如果值为空则取当前面下标兜底作为唯一标识 | Y\n"
  },
  {
    "name": "color-picker",
    "propsData": ":: BASE_DOC ::\n\n## API\n\n### ColorPicker Props\n\n名称 | 类型 | 默认值 | 描述 | 必传\n-- | -- | -- | -- | --\nborderless | Boolean | false | 无边框模式 | N\nclearable | Boolean | false | 是否可清空 | N\ncolorModes | Array | [\"monochrome\", \"linear-gradient\"] | 颜色模式选择。同时支持单色和渐变两种模式，可仅使用单色或者渐变其中一种模式，也可以同时使用。`monochrome` 表示单色，`linear-gradient` 表示渐变色。TS 类型：`Array<'monochrome' \\| 'linear-gradient'>` | N\ndisabled | Boolean | undefined | 是否禁用组件 | N\nenableAlpha | Boolean | false | 是否开启透明通道 | N\nenableMultipleGradient | Boolean | true | 是否允许开启通过点击渐变轴增加渐变梯度，默认开启，关闭时只会存在起始和结束两个颜色 | N\nformat | String | RGB | 格式化色值。`enableAlpha` 为真时，`HEX8/RGBA/HSLA/HSVA` 有效。可选项：HEX/HEX8/RGB/RGBA/HSL/HSLA/HSV/HSVA/CMYK/CSS | N\ninputProps | Object | - | 透传 Input 输入框组件全部属性。TS 类型：`InputProps`，[Input API Documents](./input?tab=api)。[详细类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/color-picker/type.ts) | N\npopupProps | Object | - | 透传 Popup 组件全部属性，如 `placement` `overlayStyle` `overlayClassName` `trigger`等。TS 类型：`PopupProps`，[Popup API Documents](./popup?tab=api)。[详细类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/color-picker/type.ts) | N\nrecentColors | Array | [] | 最近使用的颜色。值为 [] 表示以组件内部的“最近使用颜色”为准，值长度大于 0 则以该值为准显示“最近使用颜色”。值为 false 或 null 则完全不显示“最近使用颜色”。支持语法糖 `v-model:recentColors`。TS 类型：`Array<string> \\| boolean \\| null` | N\ndefaultRecentColors | Array | [] | 最近使用的颜色。值为 [] 表示以组件内部的“最近使用颜色”为准，值长度大于 0 则以该值为准显示“最近使用颜色”。值为 false 或 null 则完全不显示“最近使用颜色”。非受控属性。TS 类型：`Array<string> \\| boolean \\| null` | N\nselectInputProps | Object | - | 透传 SelectInputProps 筛选器输入框组件全部属性。TS 类型：`SelectInputProps`，[SelectInput API Documents](./select-input?tab=api)。[详细类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/color-picker/type.ts) | N\nshowPrimaryColorPreview | Boolean | true | 是否展示颜色选择条右侧的颜色预览区域 | N\nsize | String | medium | 组件尺寸。可选项：small/medium/large。TS 类型：`SizeEnum`。[通用类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/common.ts) | N\nswatchColors | Array | undefined | 系统预设的颜色样例，值为 `null` 或 `[]` 则不显示系统色，值为 `undefined` 会显示组件内置的系统默认色。TS 类型：`Array<string> \\| null \\| undefined` | N\nvalue | String | - | 色值。支持语法糖 `v-model` 或 `v-model:value` | N\ndefaultValue | String | - | 色值。非受控属性 | N\nonChange | Function |  | TS 类型：`(value: string, context: { color: ColorObject; trigger: ColorPickerChangeTrigger }) => void`<br/>选中的色值发生变化时触发，第一个参数 `value` 表示新色值，`context.color` 表示当前调色板控制器的色值，`context.trigger` 表示触发颜色变化的来源。[详细类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/color-picker/type.ts)。<br/>`type ColorPickerChangeTrigger = 'palette-saturation-brightness' \\| 'palette-saturation' \\| 'palette-brightness' \\| 'palette-hue-bar' \\| 'palette-alpha-bar' \\| 'input' \\| 'preset' \\| 'recent' `<br/> | N\nonClear | Function |  | TS 类型：`(context: { e: MouseEvent }) => void`<br/>清空按钮点击时触发 | N\nonPaletteBarChange | Function |  | TS 类型：`(context: { color: ColorObject }) => void`<br/>调色板控制器的值变化时触发，`context.color` 指调色板控制器的值。[详细类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/color-picker/type.ts)。<br/>`interface ColorObject { alpha: number; css: string; hex: string; hex8: string; hsl: string; hsla: string; hsv: string; hsva: string; rgb: string; rgba: string; saturation: number; value: number; isGradient: boolean; linearGradient?: string; }`<br/> | N\nonRecentColorsChange | Function |  | TS 类型：`(value: Array<string>) => void`<br/>最近使用颜色发生变化时触发 | N\n\n### ColorPicker Events\n\n名称 | 参数 | 描述\n-- | -- | --\nchange | `(value: string, context: { color: ColorObject; trigger: ColorPickerChangeTrigger })` | 选中的色值发生变化时触发，第一个参数 `value` 表示新色值，`context.color` 表示当前调色板控制器的色值，`context.trigger` 表示触发颜色变化的来源。[详细类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/color-picker/type.ts)。<br/>`type ColorPickerChangeTrigger = 'palette-saturation-brightness' \\| 'palette-saturation' \\| 'palette-brightness' \\| 'palette-hue-bar' \\| 'palette-alpha-bar' \\| 'input' \\| 'preset' \\| 'recent' `<br/>\nclear | `(context: { e: MouseEvent })` | 清空按钮点击时触发\npalette-bar-change | `(context: { color: ColorObject })` | 调色板控制器的值变化时触发，`context.color` 指调色板控制器的值。[详细类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/color-picker/type.ts)。<br/>`interface ColorObject { alpha: number; css: string; hex: string; hex8: string; hsl: string; hsla: string; hsv: string; hsva: string; rgb: string; rgba: string; saturation: number; value: number; isGradient: boolean; linearGradient?: string; }`<br/>\nrecent-colors-change | `(value: Array<string>)` | 最近使用颜色发生变化时触发\n\n\n### ColorPickerPanel Props\n\n名称 | 类型 | 默认值 | 描述 | 必传\n-- | -- | -- | -- | --\ncolorModes | Array | [\"monochrome\", \"linear-gradient\"] | 颜色模式选择。同时支持单色和渐变两种模式，可仅使用单色或者渐变其中一种模式，也可以同时使用。`monochrome` 表示单色，`linear-gradient` 表示渐变色。TS 类型：`Array<'monochrome' \\| 'linear-gradient'>` | N\ndisabled | Boolean | - | 是否禁用组件 | N\nenableAlpha | Boolean | false | 是否开启透明通道 | N\nenableMultipleGradient | Boolean | true | 是否允许开启通过点击渐变轴增加渐变梯度，默认开启，关闭时只会存在起始和结束两个颜色 | N\nformat | String | RGB | 格式化色值。`enableAlpha` 为真时，`HEX8/RGBA/HSLA/HSVA` 有效。可选项：HEX/HEX8/RGB/RGBA/HSL/HSLA/HSV/HSVA/CMYK/CSS | N\nrecentColors | Array | [] | 最近使用的颜色。值为 [] 表示以组件内部的“最近使用颜色”为准，值长度大于 0 则以该值为准显示“最近使用颜色”。值为 false 或 null 则完全不显示“最近使用颜色”。支持语法糖 `v-model:recentColors`。TS 类型：`Array<string> \\| boolean \\| null` | N\ndefaultRecentColors | Array | [] | 最近使用的颜色。值为 [] 表示以组件内部的“最近使用颜色”为准，值长度大于 0 则以该值为准显示“最近使用颜色”。值为 false 或 null 则完全不显示“最近使用颜色”。非受控属性。TS 类型：`Array<string> \\| boolean \\| null` | N\nshowPrimaryColorPreview | Boolean | true | 是否展示颜色选择条右侧的颜色预览区域 | N\nswatchColors | Array | - | 系统预设的颜色样例，值为 `null` 或 `[]` 则不显示系统色，值为 `undefined` 会显示组件内置的系统默认色。TS 类型：`Array<string> \\| null \\| undefined` | N\nvalue | String | - | 色值。支持语法糖 `v-model` 或 `v-model:value` | N\ndefaultValue | String | - | 色值。非受控属性 | N\nonChange | Function |  | TS 类型：`(value: string, context: { color: ColorObject; trigger: ColorPickerChangeTrigger }) => void`<br/>选中的色值发生变化时触发，第一个参数 `value` 表示新色值，`context.color` 表示当前调色板控制器的色值，`context.trigger` 表示触发颜色变化的来源。[详细类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/color-picker-panel/type.ts)。<br/>`type ColorPickerChangeTrigger = 'palette-saturation-brightness' \\| 'palette-saturation' \\| 'palette-brightness' \\| 'palette-hue-bar' \\| 'palette-alpha-bar' \\| 'input' \\| 'preset' \\| 'recent' `<br/> | N\nonPaletteBarChange | Function |  | TS 类型：`(context: { color: ColorObject }) => void`<br/>调色板控制器的值变化时触发，`context.color` 指调色板控制器的值。[详细类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/color-picker-panel/type.ts)。<br/>`interface ColorObject { alpha: number; css: string; hex: string; hex8: string; hsl: string; hsla: string; hsv: string; hsva: string; rgb: string; rgba: string; saturation: number; value: number; isGradient: boolean; linearGradient?: string; }`<br/> | N\nonRecentColorsChange | Function |  | TS 类型：`(value: Array<string>) => void`<br/>最近使用颜色发生变化时触发 | N\n\n### ColorPickerPanel Events\n\n名称 | 参数 | 描述\n-- | -- | --\nchange | `(value: string, context: { color: ColorObject; trigger: ColorPickerChangeTrigger })` | 选中的色值发生变化时触发，第一个参数 `value` 表示新色值，`context.color` 表示当前调色板控制器的色值，`context.trigger` 表示触发颜色变化的来源。[详细类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/color-picker-panel/type.ts)。<br/>`type ColorPickerChangeTrigger = 'palette-saturation-brightness' \\| 'palette-saturation' \\| 'palette-brightness' \\| 'palette-hue-bar' \\| 'palette-alpha-bar' \\| 'input' \\| 'preset' \\| 'recent' `<br/>\npalette-bar-change | `(context: { color: ColorObject })` | 调色板控制器的值变化时触发，`context.color` 指调色板控制器的值。[详细类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/color-picker-panel/type.ts)。<br/>`interface ColorObject { alpha: number; css: string; hex: string; hex8: string; hsl: string; hsla: string; hsv: string; hsva: string; rgb: string; rgba: string; saturation: number; value: number; isGradient: boolean; linearGradient?: string; }`<br/>\nrecent-colors-change | `(value: Array<string>)` | 最近使用颜色发生变化时触发\n"
  },
  {
    "name": "comment",
    "propsData": ":: BASE_DOC ::\n\n## API\n### Comment Props\n\n名称 | 类型 | 默认值 | 说明 | 必传\n-- | -- | -- | -- | --\nactions | Array | - | 操作。TS 类型：`Array<TNode>`。[通用类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/common.ts) | N\nauthor | String / Slot / Function | - | 作者。TS 类型：`string \\| TNode`。[通用类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/common.ts) | N\navatar | String / Object / Slot / Function | - | 头像。TS 类型：`string \\| AvatarProps \\| TNode`，[Avatar API Documents](./avatar?tab=api)。[通用类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/common.ts)。[详细类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/comment/type.ts) | N\ncontent | String / Slot / Function | - | 内容。TS 类型：`string \\| TNode`。[通用类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/common.ts) | N\ndatetime | String / Slot / Function | - | 时间。TS 类型：`string \\| TNode`。[通用类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/common.ts) | N\nquote | String / Slot / Function | - | 引用。TS 类型：`string \\| TNode`。[通用类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/common.ts) | N\nreply | String / Slot / Function | - | 回复。TS 类型：`string \\| TNode`。[通用类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/common.ts) | N\n"
  },
  {
    "name": "config-provider",
    "propsData": ":: BASE_DOC ::\n\n### 全局组件前缀\n\nTDesign 的组件前缀统一为`t`，在一些业务场景中，有需要改变组件前缀来满足业务的使用场景。\n可以使用`esm`版本（保证您可以修改less vars)，通过全局配置修改`classPrefix`，并配合 less-loader 修改`@prefix`这个 less vars 来保证组件样式的正常。\n\n```js\nimport Vue from 'vue'\nimport TDesign from 'tdesign-vue-next/esm'\n\nVue.createApp({}).use(TDesign)\n\n...\n\n<t-config-provider :globalConfig=\"{ classPrefix: 'any'}\">\n    <t-button>TDesign to any design</t-button>\n</t-config-provider>\n```\n\n#### vue-cli\n```js\n// vue.config.js\n{\n    css: {\n        loaderOptions: {\n            less: {\n                lessOptions: {\n                    modifyVars: {\n                     '@prefix': 'any',// 请注意需要与classPrefix保持一致\n                    },\n                    javascriptEnabled: true,\n                },\n            },\n        }\n    }\n}\n```\n\n#### vite\n```js\n// vite.config.js\n{\n    css: {\n        preprocessorOptions: {\n            less: {\n                modifyVars: {\n                    '@prefix': 'any',// 请注意需要与classPrefix保持一致\n                },\n                javascriptEnabled: true,\n            },\n        }\n    }\n}\n```\n\n\n## API\n\n### ConfigProvider Props\n\n名称 | 类型 | 默认值 | 描述 | 必传\n-- | -- | -- | -- | --\nglobalConfig | Object | - | 全局配置。TS 类型：`GlobalConfigProvider` | N\n\n### GlobalConfigProvider\n\n名称 | 类型 | 默认值 | 描述 | 必传\n-- | -- | -- | -- | --\nalert | Object | - | 警告全局配置。TS 类型：`AlertConfig` | N\nanchor | Object | - | 锚点全局配置。TS 类型：`AnchorConfig` | N\nanimation | Object | - | 动画效果控制，`ripple` 指波纹动画， `expand` 指展开动画，`fade` 指渐变动画。默认为 `{ include: ['ripple','expand','fade'], exclude: [] }`。TS 类型：`Partial<Record<'include'\\|'exclude', Array<AnimationType>>>` `type AnimationType = 'ripple' \\| 'expand' \\| 'fade'`。[详细类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/config-provider/type.ts) | N\nautoComplete | Object | - | 自动填充组件全局配置。TS 类型：`AutoCompleteConfig` | N\ncalendar | Object | - | 日历组件全局配置。TS 类型：`CalendarConfig` | N\ncascader | Object | - | 级联选择器全局配置。TS 类型：`CascaderConfig` | N\nclassPrefix | String | t | CSS 类名前缀 | N\ncolorPicker | Object | - | 颜色选择器全局配置。TS 类型：`ColorPickerConfig` | N\ndatePicker | Object | - | 日期选择器全局配置。TS 类型：`DatePickerConfig` | N\ndescriptions | Object | - | 描述全局配置。TS 类型：`DescriptionsConfig` | N\ndialog | Object | - | 对话框全局配置。TS 类型：`DialogConfig` | N\ndrawer | Object | - | 抽屉全局配置。TS 类型：`DrawerConfig` | N\nempty | Object | - | 空状态全局配置。TS 类型：`EmptyConfig` | N\nform | Object | - | 表单组件全局配置。TS 类型：`FormConfig` | N\nguide | Object | - | 引导全局配置。TS 类型：`GuideConfig` | N\nicon | Object | - | 图标全局配置。TS 类型：`IconConfig` `type IconConfig = GlobalIconConfig` `import { GlobalIconConfig } from '@icon'`。[详细类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/config-provider/type.ts) | N\nimage | Object | - | 图片全局配置。TS 类型：`ImageConfig` | N\nimageViewer | Object | - | 图片预览器全局配置。TS 类型：`ImageViewerConfig` | N\ninput | Object | - | 输入框组件全局配置。TS 类型：`InputConfig` | N\nlist | Object | - | 列表组件全局配置。TS 类型：`ListConfig` | N\nmessage | Object | - | 消息组件全局配置。TS 类型：`MessageConfig` | N\npagination | Object | - | 分页组件全局配置。TS 类型：`PaginationConfig` | N\npopconfirm | Object | - | 气泡确认框全局配置。TS 类型：`PopconfirmConfig` | N\nqrcode | Object | - | 二维码全局配置。TS 类型：`QRCodeConfig` | N\nrate | Object | - | 评分全局配置。TS 类型：`RateConfig` | N\nselect | Object | - | 选择器组件全局配置。TS 类型：`SelectConfig` | N\nsteps | Object | - | 步骤条组件全局配置。TS 类型：`StepsConfig` | N\ntable | Object | - | 表格组件全局配置。TS 类型：`TableConfig` | N\ntag | Object | - | 标签全局配置。TS 类型：`TagConfig` | N\ntimePicker | Object | - | 时间选择器全局配置。TS 类型：`TimePickerConfig` | N\ntransfer | Object | - | 穿梭框全局配置。TS 类型：`TransferConfig` | N\ntree | Object | - | 树组件全局配置。TS 类型：`TreeConfig` | N\ntreeSelect | Object | - | 树选择器组件全局配置。TS 类型：`TreeSelectConfig` | N\ntypography | Object | - | 排版组件全局配置。TS 类型：`TypographyConfig` | N\nupload | Object | - | 上传组件全局配置。TS 类型：`UploadConfig` | N\n\n### AlertConfig\n\n名称 | 类型 | 默认值 | 描述 | 必传\n-- | -- | -- | -- | --\ncollapseText | String | - | 语言配置，“收起”描述文本 | N\nexpandText | String | - | 语言配置，“展开更多”描述文本 | N\n\n### AnchorConfig\n\n名称 | 类型 | 默认值 | 描述 | 必传\n-- | -- | -- | -- | --\ncopySuccessText | String | - | 语言配置，“链接复制成功”描述文本 | N\ncopyText | String | - | 语言配置，“复制链接” 描述文本 | N\n\n### AutoCompleteConfig\n\n名称 | 类型 | 默认值 | 描述 | 必传\n-- | -- | -- | -- | --\nempty | String | - | 语言配置，“暂无数据”描述文本 | N\n\n### CalendarConfig\n\n名称 | 类型 | 默认值 | 描述 | 必传\n-- | -- | -- | -- | --\ncellMonth | String | - | 语言配置，月份描述文本，示例：'一月,二月,三月,四月,五月,六月,七月,八月,九月,十月,十一月,十二月' | N\ncontrollerConfig | Object | - | 日历右上角控制器按钮配置。TS 类型：`CalendarController`，[Calendar API Documents](./calendar?tab=api)。[详细类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/config-provider/type.ts) | N\nfillWithZero | Boolean | true | 当日期数字小于 10 时，是否使用 '0' 填充 | N\nfirstDayOfWeek | Number | 1 | 第一天从星期几开始。可选项：1/2/3/4/5/6/7 | N\nhideWeekend | String | - | 语言配置，“隐藏周末”描述文本 | N\nmonthRadio | String | - | 语言配置，模式切换时的“月”描述文本 | N\nmonthSelection | String | - | 语言配置，“月”选择描述文本。示例：`'{month} 月'` | N\nshowWeekend | String | - | 语言配置，“显示周末”描述文本 | N\nthisMonth | String | - | 语言配置，“本月”描述文本 | N\ntoday | String | - | 语言配置，“今天”描述文本 | N\nweek | String | - | 语言配置，星期描述文本，示例：`'周一,周二,周三,周四,周五,周六,周日'` | N\nyearRadio | String | - | 语言配置，模式切换时的“年”描述文本 | N\nyearSelection | String | - | 语言配置，“年”选择描述文本，示例：`'{year} 年'` | N\n\n### CascaderConfig\n\n名称 | 类型 | 默认值 | 描述 | 必传\n-- | -- | -- | -- | --\nempty | String | - | 语言配置，“暂无数据”描述文本 | N\nloadingText | String | - | 语言配置，“加载中”描述文本 | N\nplaceholder | String | - | 语言配置，“请选择”占位描述文本 | N\n\n### ColorPickerConfig\n\n名称 | 类型 | 默认值 | 描述 | 必传\n-- | -- | -- | -- | --\nclearConfirmText | String | - | 语言配置，“确定清空最近使用的颜色吗？”清空颜色确认文案 | N\nrecentColorTitle | String | - | 语言配置，“最近使用颜色” 区域标题文本 | N\nswatchColorTitle | String | - | 语言配置，“系统预设颜色” 区域标题文本 | N\n\n### DatePickerConfig\n\n名称 | 类型 | 默认值 | 描述 | 必传\n-- | -- | -- | -- | --\nconfirm | String | - | 语言配置，“确定” 描述文本 | N\ndayAriaLabel | String | - | 语言配置，“日” 描述文本 | N\ndayjsLocale | String | - | dayjs 语言国际化配置 | N\ndirection | String | 'ltr' | 日期方向，'ltr' 表示从左往右 | N\nfirstDayOfWeek | Number | 7 | 第一天从星期几开始。可选项：1/2/3/4/5/6/7 | N\nformat | String | 'YYYY-MM-DD' | 日期格式化规则 | N\nmonthAriaLabel | String | - | 语言配置，“月” 描述文本 | N\nmonths | Array | - | 月文本描述，默认值：['1 月', '2 月', '3 月', '4 月', '5 月', '6 月', '7 月', '8 月', '9 月', '10 月', '11 月', '12 月']。TS 类型：`string[]` | N\nnextDecade | String | - | 语言配置，“下个十年” 描述文本 | N\nnextMonth | String | - | 语言配置，“下个月” 描述文本 | N\nnextYear | String | - | 语言配置，“下一年” 描述文本 | N\nnow | String | - | 语言配置，“此刻” 描述文本 | N\nplaceholder | Object | - | 占位符文本提示，默认值：`{ date: '请选择日期',  month: '请选择月份',  year: '请选择年份' }`。TS 类型：`{ date?: string; month?: string; year?: string }` | N\npreDecade | String | - | 语言配置，“上个十年” 描述文本 | N\npreMonth | String | - | 语言配置，“上个月” 描述文本 | N\npreYear | String | - | 语言配置，“上一年” 描述文本 | N\npresets | Object | - | 【暂不支持，讨论确认中】预设快捷日期选择，示例：`{ '元旦': '2021-01-01', '昨天':  dayjs().subtract(1, 'day').format('YYYY-MM-DD'), '特定日期': () => ['2021-02-01'] }`。TS 类型：`ConfigPresetDate` `interface ConfigPresetDate { [name: string]: DateConfigValue \\| (() => DateConfigValue) }` `type DateConfigValue = string \\| Date \\| Array<DateConfigValue>`。[详细类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/config-provider/type.ts) | N\nquarters | Array | - | 季度文本描述，默认值：['1 季度', '2 季度', '3 季度', '4 季度']。TS 类型：`string[]` | N\nrangeSeparator | String | - | 语言配置，“ 至 ” 范围分隔符描述文本，示例：' ~ ' | N\nselectDate | String | - | 语言配置，“选择日期” 描述文本 | N\nselectTime | String | - | 语言配置，“选择时间” 描述文本 | N\nweekAbbreviation | String | - | 语言配置，“周” 描述文本 | N\nweekdays | Array | - | 星期文本描述，默认值：['日', '一', '二', '三', '四', '五', '六']。TS 类型：`string[]` | N\nyearAriaLabel | String | - | 语言配置，“年” 描述文本 | N\n\n### DescriptionsConfig\n\n名称 | 类型 | 默认值 | 描述 | 必传\n-- | -- | -- | -- | --\ncolonText | String | - | 字段旁边的冒号，中文为“：” | N\n\n### DialogConfig\n\n名称 | 类型 | 默认值 | 描述 | 必传\n-- | -- | -- | -- | --\ncancel | Object | - | 取消按钮风格。TS 类型：`string \\| ButtonProps`，[Button API Documents](./button?tab=api)。[详细类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/config-provider/type.ts) | N\ncloseOnEscKeydown | Boolean | true | 按下 ESC 时是否触发对话框关闭事件 | N\ncloseOnOverlayClick | Boolean | true | 点击蒙层时是否触发关闭事件 | N\nconfirm | Object | - | 确认按钮风格。TS 类型：`string \\| ButtonProps` | N\nconfirmBtnTheme | Object | - | 确认按钮主题色，即 Dialog 的 `theme` 和 确认按钮的 `theme` 映射关系。示例：{ danger: 'danger' }。TS 类型：`{ default: string; info: string; warning: string; danger: string; success: string; }` | N\n\n### DrawerConfig\n\n名称 | 类型 | 默认值 | 描述 | 必传\n-- | -- | -- | -- | --\ncancel | String | - | 语言配置，“取消”描述文本。TS 类型：`string \\| ButtonProps` | N\ncloseOnEscKeydown | Boolean | true | 按下 ESC 时是否触发抽屉关闭事件 | N\ncloseOnOverlayClick | Boolean | true | 点击蒙层时是否触发关闭事件 | N\nconfirm | String | - | 语言配置，“确认”描述文本。TS 类型：`string \\| ButtonProps` | N\nsize | String | 'small' | 尺寸配置，配置Drawer尺寸 | N\n\n### EmptyConfig\n\n名称 | 类型 | 默认值 | 描述 | 必传\n-- | -- | -- | -- | --\nimage | Object | - | 空状态组件各类型的图片配置。TS 类型：`{ maintenance: TNode; success: TNode; fail: TNode; empty: TNode; networkError: TNode; }`。[通用类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/common.ts) | N\ntitleText | Object | - | 空状态组件各类型的标题文本配置。TS 类型：`{ maintenance: string; success: string; fail: string; empty: string; networkError: string; }` | N\n\n### FormConfig\n\n名称 | 类型 | 默认值 | 描述 | 必传\n-- | -- | -- | -- | --\ncolonText | String | - | 字段旁边的冒号，中文为“：” | N\nerrorMessage | Object | - | 表单错误信息配置，示例：`{ idcard: '请输入正确的身份证号码', max: '字符长度不能超过 ${max}' }`。TS 类型：`FormErrorMessage`，[Form API Documents](./form?tab=api)。[详细类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/config-provider/type.ts) | N\nrequiredMark | Boolean | true | 是否显示必填符号（*），默认显示 | N\nrequiredMarkPosition | String | left | 表单必填符号（*）显示位置。可选项：left/right | N\n\n### GuideConfig\n\n名称 | 类型 | 默认值 | 描述 | 必传\n-- | -- | -- | -- | --\nfinishButtonProps | Object | - | 最后一步中的完成按钮，示例：`{ content: '完成', theme: 'primary' }`。TS 类型：`ButtonProps` | N\nnextButtonProps | Object | - | 下一步按钮，示例：`{ content: '下一步', theme: 'primary' }`。TS 类型：`ButtonProps` | N\nprevButtonProps | Object | - | 上一步按钮，示例：`{ content: '上一步', theme: 'default' }`。TS 类型：`ButtonProps` | N\nskipButtonProps | Object | - | 跳过按钮，示例：`{ content: '跳过', theme: 'default' }`。TS 类型：`ButtonProps` | N\n\n### ImageConfig\n\n名称 | 类型 | 默认值 | 描述 | 必传\n-- | -- | -- | -- | --\nerrorText | String | - | 图片加载失败显示的文本，中文默认为“图片无法显示” | N\nloadingText | String | - | 图片加载中显示的文本，中文默认为“图片加载中” | N\nreplaceImageSrc | Function | - | 统一替换图片 `src` 地址，参数为组件的全部属性，返回值为新的图片地址。TS 类型：`(params: ImageProps) => string`，[Image API Documents](./image?tab=api)。[详细类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/config-provider/type.ts) | N\n\n### ImageViewerConfig\n\n名称 | 类型 | 默认值 | 描述 | 必传\n-- | -- | -- | -- | --\nerrorText | String | - | 全局语言配置，默认为 “图片加载失败，可尝试重新加载” | N\nmirrorTipText | String | - | 全局语言配置，默认为 “镜像” | N\noriginalSizeTipText | String | - | 全局语言配置，默认为 “原始大小” | N\nrotateTipText | String | - | 全局语言配置，默认为 “旋转” | N\n\n### InputConfig\n\n名称 | 类型 | 默认值 | 描述 | 必传\n-- | -- | -- | -- | --\nautocomplete | String | - | 是否开启自动填充功能 | N\nplaceholder | String | - | 语言配置，“请输入”占位符描述文本 | N\n\n### ListConfig\n\n名称 | 类型 | 默认值 | 描述 | 必传\n-- | -- | -- | -- | --\nloadingMoreText | String | - | 语言配置，'点击加载更多' 描述文本 | N\nloadingText | String | - | 语言配置，'正在加载中，请稍后' 描述文本 | N\n\n### MessageConfig\n\n名称 | 类型 | 默认值 | 描述 | 必传\n-- | -- | -- | -- | --\n`MessageOptions` | \\- | - | 继承 `MessageOptions` 中的全部属性 | N\n\n### PaginationConfig\n\n名称 | 类型 | 默认值 | 描述 | 必传\n-- | -- | -- | -- | --\nitemsPerPage | String | - | 语言配置，每页条数文本，示例：`'{size} 条/页'` | N\njumpTo | String | - | 语言配置，页码跳转文本，示例：'跳至' | N\npage | String | - | 语言配置，“页”描述文本 | N\ntotal | String | - | 语言配置，数据总条数文本，示例：`'共 {total} 项数据'` | N\n\n### PopconfirmConfig\n\n名称 | 类型 | 默认值 | 描述 | 必传\n-- | -- | -- | -- | --\ncancel | String / Object | - | 语言配置，“取消”描述文本。TS 类型：`string \\| ButtonProps`，[Button API Documents](./button?tab=api)。[详细类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/config-provider/type.ts) | N\nconfirm | String / Object | - | 语言配置，“确定”描述文本。TS 类型：`string \\| ButtonProps` | N\nconfirmBtnTheme | Object | - | 确认按钮主题色，即 Popconfirm 的 `theme` 和 确认按钮的 `theme` 映射关系。示例：{ danger: 'danger' }。TS 类型：`{ default: string; warning: string; danger: string; }` | N\n\n### QRCodeConfig\n\n名称 | 类型 | 默认值 | 描述 | 必传\n-- | -- | -- | -- | --\nexpiredText | String | - | 语言配置，“二维码过期”描述文本 | N\nrefreshText | String | - | 语言配置，“点击刷新”描述文本 | N\nscannedText | String | - | 语言配置，“已扫描”描述文本 | N\n\n### RateConfig\n\n名称 | 类型 | 默认值 | 描述 | 必传\n-- | -- | -- | -- | --\nrateText | Array | - | 评分描述，默认值：['极差', '失望', '一般', '满意', '惊喜']。TS 类型：`string[]` | N\n\n### SelectConfig\n\n名称 | 类型 | 默认值 | 描述 | 必传\n-- | -- | -- | -- | --\nclearIcon | Function | - | 清除图标，【注意】使用渲染函数输出图标组件。TS 类型：`TNode`。[通用类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/common.ts) | N\nempty | String | - | 语言配置，“暂无数据”描述文本 | N\nfilterable | Boolean | false | 全局配置是否可筛选 | N\nloadingText | String | - | 语言配置，“加载中”描述文本 | N\nplaceholder | String | - | 语言配置，“请选择”占位符描述文本 | N\n\n### StepsConfig\n\n名称 | 类型 | 默认值 | 描述 | 必传\n-- | -- | -- | -- | --\ncheckIcon | Slot / Function | - | 已完成步骤图标，【注意】使用渲染函数输出图标组件。TS 类型：`TNode`。[通用类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/common.ts) | N\nerrorIcon | Slot / Function | - | 错误步骤图标，【注意】使用渲染函数输出图标组件。TS 类型：`TNode`。[通用类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/common.ts) | N\n\n### TableConfig\n\n名称 | 类型 | 默认值 | 描述 | 必传\n-- | -- | -- | -- | --\ncancelText | String | - | 语言配置，“取消” 描述文本 | N\nclearFilterResultButtonText | String | - | 语言配置，过滤功能中，“清空筛选” 描述文本 | N\ncolumnConfigButtonText | String | - | 语言配置，列配置功能中，“列配置” 按钮描述文本 | N\ncolumnConfigDescriptionText | String | - | 语言配置，“请选择需要在表格中显示的数据列” 描述文本，列配置功能中弹框顶部描述 | N\ncolumnConfigTitleText | String | - | 语言配置，“表格列配置” 描述文本，列配置功能中弹框的标题 | N\nconfirmText | String | - | 语言配置，“确认” 描述文本 | N\nempty | String / Slot / Function | - | 语言配置，“暂无数据” 描述文本。TS 类型：`string \\| TNode`。[通用类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/common.ts) | N\nexpandIcon | Slot / Function | undefined | 展开和收起图标（配置传入收起图标即可），如果没有配置，会使用组件内置的默认图标。TS 类型：`TNode`。[通用类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/common.ts) | N\nfilterIcon | Slot / Function | undefined | 过滤图标，如果没有配置，会使用组件内置的默认图标。TS 类型：`TNode`。[通用类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/common.ts) | N\nhideSortTips | Boolean | false | 隐藏排序文本提示 | N\nloadingMoreText | String | - | 语言配置，“点击加载更多” 描述文本 | N\nloadingText | String | - | 语言配置，“正在加载中，请稍后” 描述文本 | N\nresetText | String | - | 语言配置，“重置” 描述文本 | N\nsearchResultText | String | - | 语言配置，过滤功能中，过滤条件和结果描述文本，示例：'搜索“{result}”，找到 {count} 条结果' | N\nselectAllText | String | - | 语言配置，'全选' 描述文本 | N\nsize | String | medium | 全局表格尺寸配置。可选项：small/medium/large。TS 类型：`SizeEnum`。[通用类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/common.ts) | N\nsortAscendingOperationText | String | - | 语言配置，'点击升序' 描述文本 | N\nsortCancelOperationText | String | - | 语言配置，'点击取消排序' 描述文本 | N\nsortDescendingOperationText | String | - | 语言配置，'点击降序' 描述文本 | N\nsortIcon | Slot / Function | undefined | 排序图标（配置传入降序图标即可），如果没有配置，会使用组件内置的默认图标。TS 类型：`TNode`。[通用类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/common.ts) | N\ntreeExpandAndFoldIcon | Function | undefined | 树形结构，展开和折叠图标。如果没有配置，会使用组件内置的默认图标。TS 类型：`TNode<{ type: 'expand' \\| 'fold' }>`。[通用类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/common.ts) | N\n\n### TagConfig\n\n名称 | 类型 | 默认值 | 描述 | 必传\n-- | -- | -- | -- | --\ncloseIcon | Function | - | 关闭图标，【注意】使用渲染函数输出图标组件。TS 类型：`TNode`。[通用类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/common.ts) | N\n\n### TimePickerConfig\n\n名称 | 类型 | 默认值 | 描述 | 必传\n-- | -- | -- | -- | --\nanteMeridiem | String | - | 语言配置，“上午”描述文本 | N\nconfirm | String | - | 语言配置，“确定”描述文本 | N\nnow | String | - | 语言配置，“此刻”描述文本 | N\nplaceholder | String | - | 语言配置，\\\"请选择时间\\\"占位符描述文本 | N\npostMeridiem | String | - | 语言配置，“下午”描述文本 | N\n\n### TransferConfig\n\n名称 | 类型 | 默认值 | 描述 | 必传\n-- | -- | -- | -- | --\nempty | String | - | 语言配置，“暂无数据”空数据描述文本 | N\nplaceholder | String | - | 语言配置，“请输入关键词搜索”占位符描述文本 | N\ntitle | String | - | 语言配置，穿梭框标题描述文本，示例：“{checked} / {total} 项” | N\n\n### TreeConfig\n\n名称 | 类型 | 默认值 | 描述 | 必传\n-- | -- | -- | -- | --\nempty | String | - | 语言配置，“暂无数据”描述文本 | N\nfolderIcon | Function | - | 目录层级图标，传入收起状态图标即可。【注意】使用渲染函数输出图标组件。TS 类型：`TNode`。[通用类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/common.ts) | N\n\n### TreeSelectConfig\n\n名称 | 类型 | 默认值 | 描述 | 必传\n-- | -- | -- | -- | --\nempty | String | - | 语言配置，“暂无数据”描述文本 | N\nloadingText | String | - | 语言配置，“加载中”描述文本 | N\nplaceholder | String | - | 语言配置，“请选择”占位符描述文本 | N\n\n### TypographyConfig\n\n名称 | 类型 | 默认值 | 描述 | 必传\n-- | -- | -- | -- | --\ncollapseText | String | - | 语言配置，“收起”描述文本 | N\ncopiedText | String | - | 语言配置，“复制成功”描述文本 | N\nexpandText | String | - | 语言配置，“展开”描述文本 | N\n\n### UploadConfig\n\n名称 | 类型 | 默认值 | 描述 | 必传\n-- | -- | -- | -- | --\ncancelUploadText | String | - | 语言配置，“取消上传” 描述文本 | N\ndragger | Object | - | 语言配置，拖拽相关。示例：{ dragDropText: '释放图标', draggingText: '拖拽到此区域', clickAndDragText: '点击上方“选择文件”或将文件拖到此区域' }。TS 类型：`UploadConfigDragger` | N\nfile | Object | - | 语言配置，文件信息相关。示例：{  fileNameText: '文件名', fileSizeText: '文件尺寸', fileStatusText: '状态', fileOperationText: '操作', fileOperationDateText: '上传日期' }。TS 类型：`UploadConfigFileList` | N\nprogress | Object | - | 语言配置，上传进度相关。示例：{ uploadText: '上传中', waitingText: '待上传', 'failText': '上传失败', successText: '上传成功' }。TS 类型：`UploadConfigProgress` | N\nsizeLimitMessage | String | - | 语言配置，文件大小超出限制时提醒文本。示例：`'文件大小不能超过 {sizeLimit}'` | N\ntriggerUploadText | Object | - | 语言配置，上传功能触发文案。示例：{ image: '点击上传图片', normal: '点击上传',  fileInput: '选择文件', reupload: '重新上传', delete: '删除', continueUpload?: '继续选择' }。TS 类型：`UploadTriggerUploadText` `interface UploadTriggerUploadText { image?: string, normal?: string,  fileInput?: string,  reupload?: string, continueUpload?: string, delete?: string }`。[详细类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/config-provider/type.ts) | N\n\n### UploadConfigDragger\n\n名称 | 类型 | 默认值 | 描述 | 必传\n-- | -- | -- | -- | --\nclickAndDragText | String | - | 语言配置，“ 点击上方“选择文件”或将文件拖到此区域 ” 描述文本 | N\ndragDropText | String | - | 语言配置，“释放图标” 描述文本 | N\ndraggingText | String | - | 语言配置，'拖拽到此区域' 描述文本 | N\n\n### UploadConfigFileList\n\n名称 | 类型 | 默认值 | 描述 | 必传\n-- | -- | -- | -- | --\nfileNameText | String | - | 语言配置，“文件名” 描述文本 | N\nfileOperationDateText | String | - | 语言配置，“上传日期” 描述文本 | N\nfileOperationText | String | - | 语言配置，“操作” 描述文本 | N\nfileSizeText | String | - | 语言配置，“文件尺寸” 描述文本 | N\nfileStatusText | String | - | 语言配置，“状态” 描述文本 | N\n\n### UploadConfigProgress\n\n名称 | 类型 | 默认值 | 描述 | 必传\n-- | -- | -- | -- | --\nfailText | String | - | 语言配置，“上传失败”文本描述 | N\nsuccessText | String | - | 语言配置，“上传成功”文本描述 | N\nuploadingText | String | - | 语言配置，“上传中”文本描述 | N\nwaitingText | String | - | 语言配置，“待上传”文本描述 | N\n"
  },
  {
    "name": "date-picker",
    "propsData": ":: BASE_DOC ::\n\n## API\n\n### DatePicker Props\n\n名称 | 类型 | 默认值 | 描述 | 必传\n-- | -- | -- | -- | --\nallowInput | Boolean | false | 是否允许输入日期 | N\nborderless | Boolean | false | 无边框模式 | N\nclearable | Boolean | false | 是否显示清除按钮 | N\ndefaultTime | String | '00:00:00' | 时间选择器默认值，当 value/defaultValue 未设置值时有效 | N\ndisableDate | Object / Array / Function | - | 禁用日期，示例：['A', 'B'] 表示日期 A 和日期 B 会被禁用。`{ from: 'A', to: 'B' }` 表示在 A 到 B 之间的日期会被禁用。`{ before: 'A', after: 'B' }` 表示在 A 之前和在 B 之后的日期都会被禁用。其中 A = '2021-01-01'，B = '2021-02-01'。值类型为 Function 则表示返回值为 true 的日期会被禁用。TS 类型：`DisableDate` `type DisableDate = Array<DateValue> \\| DisableDateObj \\| ((date: DateValue) => boolean)` `interface DisableDateObj { from?: string; to?: string; before?: string; after?: string }`。[详细类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/date-picker/type.ts) | N\ndisabled | Boolean | undefined | 是否禁用组件 | N\nenableTimePicker | Boolean | false | 是否显示时间选择 | N\nfirstDayOfWeek | Number | 7 | 第一天从星期几开始。可选项：1/2/3/4/5/6/7 | N\nformat | String | 'YYYY-MM-DD' | 仅用于格式化日期显示的格式，不影响日期值。注意和 `valueType` 的区别，`valueType`会直接决定日期值 `value` 的格式。全局配置默认为：'YYYY-MM-DD'，[详细文档](https://day.js.org/docs/en/display/format) | N\ninputProps | Object | - | 透传给输入框（Input）组件的参数。TS 类型：`InputProps`，[Input API Documents](./input?tab=api)。[详细类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/date-picker/type.ts) | N\nlabel | String / Slot / Function | - | 左侧文本。TS 类型：`string \\| TNode`。[通用类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/common.ts) | N\nmode | String | date | 选择器模式。可选项：year/quarter/month/week/date | N\nmultiple | Boolean | false | 支持多选日期，但不支持在range-picker中，或与enableTimePicker、allowInput 一起使用。TS 类型：`boolean` | N\nneedConfirm | Boolean | true | 决定在日期时间选择器的场景下是否需要点击确认按钮才完成选择动作，默认为`true` | N\nplaceholder | String / Array | undefined | 占位符。TS 类型：`string` | N\npopupProps | Object | - | 透传 Popup 组件全部属性。TS 类型：`PopupProps`，[Popup API Documents](./popup?tab=api)。[详细类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/date-picker/type.ts) | N\nprefixIcon | Slot / Function | - | 用于自定义组件前置图标。TS 类型：`TNode`。[通用类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/common.ts) | N\npresets | Object | - | 预设快捷日期选择，示例：`{ '元旦': '2021-01-01', '昨天':  dayjs().subtract(1, 'day').format('YYYY-MM-DD'), '特定日期': () => ['2021-02-01'] }`。TS 类型：`PresetDate` `interface PresetDate { [name: string]: DateValue \\| (() => DateValue) }`。[详细类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/date-picker/type.ts) | N\npresetsPlacement | String | bottom | 预设面板展示区域（包含确定按钮）。可选项：left/top/right/bottom | N\nreadonly | Boolean | undefined | 是否只读，优先级大于 allowInput | N\nselectInputProps | Object | - | 透传 SelectInput 筛选器输入框组件的全部属性。TS 类型：`SelectInputProps`，[SelectInput API Documents](./select-input?tab=api)。[详细类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/date-picker/type.ts) | N\nsize | String | medium | 输入框尺寸。可选项：small/medium/large。TS 类型：`SizeEnum`。[通用类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/common.ts) | N\nstatus | String | default | 输入框状态。可选项：default/success/warning/error | N\nsuffixIcon | Slot / Function | - | 用于自定义组件后置图标。TS 类型：`TNode`。[通用类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/common.ts) | N\ntimePickerProps | Object | - | 透传 TimePicker 组件属性。TS 类型：`TimePickerProps`，[TimePicker API Documents](./time-picker?tab=api)。[详细类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/date-picker/type.ts) | N\ntips | String / Slot / Function | - | 输入框下方提示文本，会根据不同的 `status` 呈现不同的样式。TS 类型：`string \\| TNode`。[通用类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/common.ts) | N\nvalue | String / Number / Array / Date | '' | 选中值。支持语法糖 `v-model` 或 `v-model:value`。TS 类型：`DateValue \\| DateMultipleValue` ` type DateValue = string \\| number \\| Date ` ` type DateMultipleValue = Array<DateValue> `。[详细类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/date-picker/type.ts) | N\ndefaultValue | String / Number / Array / Date | '' | 选中值。非受控属性。TS 类型：`DateValue \\| DateMultipleValue` ` type DateValue = string \\| number \\| Date ` ` type DateMultipleValue = Array<DateValue> `。[详细类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/date-picker/type.ts) | N\nvalueDisplay | String / Slot / Function | - | 自定义选中项呈现的内容。TS 类型：`string \\| TNode<{ value: DateValue; displayValue?: DateValue }>`。[通用类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/common.ts) | N\nvalueType | String | - | 用于格式化日期的值，仅支持部分格式，时间戳、日期等。⚠️ `YYYYMMDD` 这种格式不支持，请勿使用，如果希望支持可以给 `dayjs` 提个 PR。注意和 `format` 的区别，`format` 仅用于处理日期在页面中呈现的格式。`ValueTypeEnum` 即将废弃，请更为使用 `DatePickerValueType`。TS 类型：`DatePickerValueType` `type DatePickerValueType = 'time-stamp' \\| 'Date' \\| 'YYYY' \\| 'YYYY-MM' \\| 'YYYY-MM-DD' \\| 'YYYY-MM-DD HH' \\| 'YYYY-MM-DD HH:mm' \\| 'YYYY-MM-DD HH:mm:ss' \\| 'YYYY-MM-DD HH:mm:ss:SSS'` `type ValueTypeEnum = DatePickerValueType`。[详细类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/date-picker/type.ts) | N\nonBlur | Function |  | TS 类型：`(context: { value: DateValue \\| DateMultipleValue; e: FocusEvent }) => void`<br/>当输入框失去焦点时触发 | N\nonChange | Function |  | TS 类型：`(value: DateValue\\| DateMultipleValue, context: { dayjsValue?: Dayjs, trigger?: DatePickerTriggerSource }) => void`<br/>选中值发生变化时触发。[详细类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/date-picker/type.ts)。<br/>`import { Dayjs } from 'dayjs'`<br/><br/>`type DatePickerTriggerSource = 'confirm' \\| 'pick' \\| 'enter' \\| 'preset' \\| 'clear'`<br/> | N\nonConfirm | Function |  | TS 类型：`(context: { date: Date, e: MouseEvent }) => void`<br/>如果存在“确定”按钮，则点击“确定”按钮时触发 | N\nonFocus | Function |  | TS 类型：`(context: { value: DateValue \\| DateMultipleValue; e: FocusEvent }) => void`<br/>输入框获得焦点时触发 | N\nonPick | Function |  | TS 类型：`(value: DateValue) => void`<br/>面板选中值后触发 | N\nonPresetClick | Function |  | TS 类型：`(context: { preset: PresetDate, e: MouseEvent }) => void`<br/>点击预设按钮后触发 | N\n\n### DatePicker Events\n\n名称 | 参数 | 描述\n-- | -- | --\nblur | `(context: { value: DateValue \\| DateMultipleValue; e: FocusEvent })` | 当输入框失去焦点时触发\nchange | `(value: DateValue\\| DateMultipleValue, context: { dayjsValue?: Dayjs, trigger?: DatePickerTriggerSource })` | 选中值发生变化时触发。[详细类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/date-picker/type.ts)。<br/>`import { Dayjs } from 'dayjs'`<br/><br/>`type DatePickerTriggerSource = 'confirm' \\| 'pick' \\| 'enter' \\| 'preset' \\| 'clear'`<br/>\nconfirm | `(context: { date: Date, e: MouseEvent })` | 如果存在“确定”按钮，则点击“确定”按钮时触发\nfocus | `(context: { value: DateValue \\| DateMultipleValue; e: FocusEvent })` | 输入框获得焦点时触发\npick | `(value: DateValue)` | 面板选中值后触发\npreset-click | `(context: { preset: PresetDate, e: MouseEvent })` | 点击预设按钮后触发\n\n\n### DateRangePicker Props\n\n名称 | 类型 | 默认值 | 描述 | 必传\n-- | -- | -- | -- | --\nallowInput | Boolean | false | 是否允许输入日期 | N\nborderless | Boolean | false | 无边框模式 | N\ncancelRangeSelectLimit | Boolean | false | 默认的日期选择交互是根据点击前后日期的顺序来决定并且会加以限制。比如：用户先点击开始时间输入框，选择了一个日期例如2020-05-15，紧接着交互会自动将焦点跳到结束日期输入框，等待用户选择结束时间。此时用户只能选择大于2020-05-15的日期（之前的日期会被灰态禁止点击，限制用户的点击）。当该值传递`true`时，则取消该限制 | N\nclearable | Boolean | false | 是否显示清除按钮 | N\ndefaultTime | Array | [\"00:00:00\", \"23:59:59\"] | 时间选择器默认值，当 value/defaultValue 未设置值时有效。TS 类型：`string[]` | N\ndisableDate | Object / Array / Function | - | 禁用日期，示例：['A', 'B'] 表示日期 A 和日期 B 会被禁用。{ from: 'A', to: 'B' } 表示在 A 到 B 之间的日期会被禁用。{ before: 'A', after: 'B' } 表示在 A 之前和在 B 之后的日期都会被禁用。其中 A = '2021-01-01'，B = '2021-02-01'。值类型为 Function 则表示返回值为 true 的日期会被禁用。TS 类型：`DisableRangeDate` `type DisableRangeDate = Array<DateValue> \\| DisableDateObj \\| ((context: { date: DateRangeValue; partial: DateRangePickerPartial }) => boolean)` `interface DisableDateObj { from?: string; to?: string; before?: string; after?: string }` `type DateRangePickerPartial = 'start' \\| 'end'`。[详细类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/date-picker/type.ts) | N\ndisableTime | Function | - | 禁用时间项的配置函数，仅在日期区间选择器中开启时间展示时可用。TS 类型：`(times: Array<Date \\| null>, context: { partial: DateRangePickerPartial }) => Partial<{ hour: Array<number>, minute: Array<number>, second: Array<number> }>` | N\ndisabled | Boolean | undefined | 是否禁用组件 | N\nenableTimePicker | Boolean | false | 是否显示时间选择 | N\nfirstDayOfWeek | Number | - | 第一天从星期几开始。可选项：1/2/3/4/5/6/7 | N\nformat | String | - | 用于格式化日期，[详细文档](https://day.js.org/docs/en/display/format) | N\nlabel | String / Slot / Function | - | 左侧文本。TS 类型：`string \\| TNode`。[通用类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/common.ts) | N\nmode | String | date | 选择器模式。可选项：year/quarter/month/week/date | N\nneedConfirm | Boolean | true | 决定在日期时间区间选择器的场景下是否需要点击确认按钮才完成选择动作，默认为 `true` | N\npanelPreselection | Boolean | true | 在开始日期选中之前，面板是否显示预选状态，即是否高亮预选日期 | N\nplaceholder | String / Array | - | 占位符，值为数组表示可分别为开始日期和结束日期设置占位符。TS 类型：`string \\| Array<string>` | N\npopupProps | Object | - | 透传 Popup 组件全部属性。TS 类型：`PopupProps`，[Popup API Documents](./popup?tab=api)。[详细类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/date-picker/type.ts) | N\nprefixIcon | Slot / Function | - | 组件前置图标。TS 类型：`TNode`。[通用类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/common.ts) | N\npresets | Object | - | 预设快捷日期选择，示例：{ '特定日期范围': ['2021-01-01', '2022-01-01'], '本月': [dayjs().startOf('month'), dayjs().endOf('month')] }。TS 类型：`PresetRange` `interface PresetRange { [range: string]: DateRange \\| (() => DateRange)}` `type DateRange = [DateValue, DateValue]`。[详细类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/date-picker/type.ts) | N\npresetsPlacement | String | bottom | 预设面板展示区域（包含确定按钮）。可选项：left/top/right/bottom | N\nreadonly | Boolean | undefined | 是否只读，优先级大于 `allowInput` | N\nrangeInputProps | Object | - | 透传给范围输入框 RangeInput 组件的参数。TS 类型：`RangeInputProps`，[RangeInput API Documents](./range-input?tab=api)。[详细类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/date-picker/type.ts) | N\nseparator | String | - | 日期分隔符，支持全局配置，默认为 '-' | N\nsize | String | medium | 输入框尺寸。可选项：small/medium/large。TS 类型：`SizeEnum`。[通用类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/common.ts) | N\nstatus | String | default | 输入框状态。可选项：default/success/warning/error | N\nsuffixIcon | Slot / Function | - | 组件后置图标。TS 类型：`TNode`。[通用类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/common.ts) | N\ntimePickerProps | Object | - | 透传 TimePicker 组件属性。TS 类型：`TimePickerProps`，[TimePicker API Documents](./time-picker?tab=api)。[详细类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/date-picker/type.ts) | N\ntips | String / Slot / Function | - | 输入框下方提示文本，会根据不同的 `status` 呈现不同的样式。TS 类型：`string \\| TNode`。[通用类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/common.ts) | N\nvalue | Array | [] | 选中值。支持语法糖 `v-model` 或 `v-model:value`。TS 类型：`DateRangeValue` `type DateRangeValue = Array<DateValue>`。[详细类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/date-picker/type.ts) | N\ndefaultValue | Array | [] | 选中值。非受控属性。TS 类型：`DateRangeValue` `type DateRangeValue = Array<DateValue>`。[详细类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/date-picker/type.ts) | N\nvalueType | String | - | 用于格式化日期的值，仅支持部分格式，时间戳、日期等。⚠️ `YYYYMMDD` 这种格式不支持，请勿使用，如果希望支持可以给 `dayjs` 提个 PR。注意和 `format` 的区别，`format` 仅用于处理日期在页面中呈现的格式。可选项：time-stamp/Date/YYYY/YYYY-MM/YYYY-MM-DD/YYYY-MM-DD HH/YYYY-MM-DD HH:mm/YYYY-MM-DD HH:mm:ss/YYYY-MM-DD HH:mm:ss:SSS | N\nonBlur | Function |  | TS 类型：`(context: { value: DateRangeValue; partial: DateRangePickerPartial; e: FocusEvent }) => void`<br/>当输入框失去焦点时触发 | N\nonChange | Function |  | TS 类型：`(value: DateRangeValue, context: { dayjsValue?: Dayjs[], trigger?: DatePickerTriggerSource }) => void`<br/>选中值发生变化时触发。[详细类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/date-picker/type.ts)。<br/>`import { Dayjs } from 'dayjs'`<br/> | N\nonConfirm | Function |  | TS 类型：`(context: { date: Date[], e: MouseEvent, partial: DateRangePickerPartial }) => void`<br/>如果存在“确定”按钮，则点击“确定”按钮时触发 | N\nonFocus | Function |  | TS 类型：`(context: { value: DateRangeValue; partial: DateRangePickerPartial; e: FocusEvent }) => void`<br/>输入框获得焦点时触发 | N\nonInput | Function |  | TS 类型：`(context: { input: string; value: DateRangeValue; partial: DateRangePickerPartial; e: InputEvent }) => void`<br/>输入框数据发生变化时触发，参数 input 表示输入内容，value 表示组件当前有效值 | N\nonPick | Function |  | TS 类型：`(value: DateValue, context: PickContext) => void`<br/>选中日期时触发，可能是开始日期，也可能是结束日期，第二个参数可以区分是开始日期或是结束日期。[详细类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/date-picker/type.ts)。<br/>`interface PickContext { e: MouseEvent; partial: DateRangePickerPartial }`<br/> | N\nonPresetClick | Function |  | TS 类型：`(context: { preset: PresetDate, e: MouseEvent }) => void`<br/>点击预设按钮后触发 | N\n\n### DateRangePicker Events\n\n名称 | 参数 | 描述\n-- | -- | --\nblur | `(context: { value: DateRangeValue; partial: DateRangePickerPartial; e: FocusEvent })` | 当输入框失去焦点时触发\nchange | `(value: DateRangeValue, context: { dayjsValue?: Dayjs[], trigger?: DatePickerTriggerSource })` | 选中值发生变化时触发。[详细类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/date-picker/type.ts)。<br/>`import { Dayjs } from 'dayjs'`<br/>\nconfirm | `(context: { date: Date[], e: MouseEvent, partial: DateRangePickerPartial })` | 如果存在“确定”按钮，则点击“确定”按钮时触发\nfocus | `(context: { value: DateRangeValue; partial: DateRangePickerPartial; e: FocusEvent })` | 输入框获得焦点时触发\ninput | `(context: { input: string; value: DateRangeValue; partial: DateRangePickerPartial; e: InputEvent })` | 输入框数据发生变化时触发，参数 input 表示输入内容，value 表示组件当前有效值\npick | `(value: DateValue, context: PickContext)` | 选中日期时触发，可能是开始日期，也可能是结束日期，第二个参数可以区分是开始日期或是结束日期。[详细类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/date-picker/type.ts)。<br/>`interface PickContext { e: MouseEvent; partial: DateRangePickerPartial }`<br/>\npreset-click | `(context: { preset: PresetDate, e: MouseEvent })` | 点击预设按钮后触发\n\n\n### DatePickerPanel Props\n\n名称 | 类型 | 默认值 | 描述 | 必传\n-- | -- | -- | -- | --\ndefaultTime | String | '00:00:00' | 时间选择器默认值，当 value/defaultValue 未设置值时有效 | N\n`Pick<DatePickerProps, 'value' \\| 'defaultValue' \\| 'disableDate' \\| 'enableTimePicker' \\| 'firstDayOfWeek' \\| 'format' \\| 'mode' \\| 'presets' \\| 'presetsPlacement' \\| 'timePickerProps'>` | \\- | - | 继承 `Pick<DatePickerProps, 'value' \\| 'defaultValue' \\| 'disableDate' \\| 'enableTimePicker' \\| 'firstDayOfWeek' \\| 'format' \\| 'mode' \\| 'presets' \\| 'presetsPlacement' \\| 'timePickerProps'>` 中的全部属性 | N\nonCellClick | Function |  | TS 类型：`(context: { date: Date, e: MouseEvent }) => void`<br/>点击日期单元格时触发 | N\nonChange | Function |  | TS 类型：`(value: DateValue, context: { dayjsValue?: Dayjs, e?: MouseEvent, trigger?: DatePickerTriggerSource }) => void`<br/>选中值发生变化时触发。参数 `context.trigger` 表示触发当前事件的来源，不同的模式触发来源也会不同 | N\nonConfirm | Function |  | TS 类型：`(context: { date: Date, e: MouseEvent }) => void`<br/>如果存在“确定”按钮，则点击“确定”按钮时触发 | N\nonMonthChange | Function |  | TS 类型：`(context: { month: number, date: Date, e?: MouseEvent, trigger: DatePickerMonthChangeTrigger }) => void`<br/>月份切换发生变化时触发。[详细类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/date-picker/type.ts)。<br/>`type DatePickerMonthChangeTrigger = 'month-select' \\| 'month-arrow-next' \\| 'month-arrow-previous' \\| 'today'`<br/> | N\nonPanelClick | Function |  | TS 类型：`(context: { e: MouseEvent }) => void`<br/>点击面板时触发 | N\nonPresetClick | Function |  | TS 类型：`(context: { preset: PresetDate, e: MouseEvent }) => void`<br/>点击预设按钮后触发 | N\nonTimeChange | Function |  | TS 类型：`(context: { time: string, date: Date, trigger: DatePickerTimeChangeTrigger, e?: MouseEvent }) => void`<br/>时间切换发生变化时触发。[详细类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/date-picker/type.ts)。<br/>`type DatePickerTimeChangeTrigger = 'time-hour' \\| 'time-minute' \\| 'time-second'`<br/> | N\nonYearChange | Function |  | TS 类型：`(context: { year: number, date: Date, trigger: DatePickerYearChangeTrigger, e?: MouseEvent }) => void`<br/>年份切换发生变化时触发。[详细类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/date-picker/type.ts)。<br/>`type DatePickerYearChangeTrigger = 'year-select' \\| 'year-arrow-next' \\| 'year-arrow-previous' \\| 'today'`<br/> | N\n\n### DatePickerPanel Events\n\n名称 | 参数 | 描述\n-- | -- | --\ncell-click | `(context: { date: Date, e: MouseEvent })` | 点击日期单元格时触发\nchange | `(value: DateValue, context: { dayjsValue?: Dayjs, e?: MouseEvent, trigger?: DatePickerTriggerSource })` | 选中值发生变化时触发。参数 `context.trigger` 表示触发当前事件的来源，不同的模式触发来源也会不同\nconfirm | `(context: { date: Date, e: MouseEvent })` | 如果存在“确定”按钮，则点击“确定”按钮时触发\nmonth-change | `(context: { month: number, date: Date, e?: MouseEvent, trigger: DatePickerMonthChangeTrigger })` | 月份切换发生变化时触发。[详细类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/date-picker/type.ts)。<br/>`type DatePickerMonthChangeTrigger = 'month-select' \\| 'month-arrow-next' \\| 'month-arrow-previous' \\| 'today'`<br/>\npanel-click | `(context: { e: MouseEvent })` | 点击面板时触发\npreset-click | `(context: { preset: PresetDate, e: MouseEvent })` | 点击预设按钮后触发\ntime-change | `(context: { time: string, date: Date, trigger: DatePickerTimeChangeTrigger, e?: MouseEvent })` | 时间切换发生变化时触发。[详细类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/date-picker/type.ts)。<br/>`type DatePickerTimeChangeTrigger = 'time-hour' \\| 'time-minute' \\| 'time-second'`<br/>\nyear-change | `(context: { year: number, date: Date, trigger: DatePickerYearChangeTrigger, e?: MouseEvent })` | 年份切换发生变化时触发。[详细类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/date-picker/type.ts)。<br/>`type DatePickerYearChangeTrigger = 'year-select' \\| 'year-arrow-next' \\| 'year-arrow-previous' \\| 'today'`<br/>\n\n\n### DateRangePickerPanel Props\n\n名称 | 类型 | 默认值 | 描述 | 必传\n-- | -- | -- | -- | --\ndefaultTime | Array | [\"00:00:00\", \"23:59:59\"] | 时间选择器默认值，当 value/defaultValue 未设置值时有效。TS 类型：`string[]` | N\n`Pick<DateRangePickerProps, 'value'\\| 'defaultValue' \\| 'disableDate' \\| 'enableTimePicker' \\| 'firstDayOfWeek' \\| 'format' \\| 'mode' \\| 'presets' \\| 'presetsPlacement' \\| 'panelPreselection' \\| 'timePickerProps'>` | \\- | - | 继承 `Pick<DateRangePickerProps, 'value'\\| 'defaultValue' \\| 'disableDate' \\| 'enableTimePicker' \\| 'firstDayOfWeek' \\| 'format' \\| 'mode' \\| 'presets' \\| 'presetsPlacement' \\| 'panelPreselection' \\| 'timePickerProps'>` 中的全部属性 | N\nonCellClick | Function |  | TS 类型：`(context: { date: Date[], partial: DateRangePickerPartial, e: MouseEvent }) => void`<br/>点击日期单元格时触发 | N\nonChange | Function |  | TS 类型：`(value: DateRangeValue, context: { dayjsValue?: Dayjs[], partial: DateRangePickerPartial, e?: MouseEvent, trigger?: DatePickerTriggerSource }) => void`<br/>选中值发生变化时触发。参数 `context.trigger` 表示触发当前事件的来源，不同的模式触发来源也会不同 | N\nonConfirm | Function |  | TS 类型：`(context: { date: Date[], e: MouseEvent }) => void`<br/>如果存在“确定”按钮，则点击“确定”按钮时触发 | N\nonMonthChange | Function |  | TS 类型：`(context: { month: number, date: Date[], partial: DateRangePickerPartial, e?: MouseEvent, trigger: DatePickerMonthChangeTrigger }) => void`<br/>月份切换发生变化时触发 | N\nonPanelClick | Function |  | TS 类型：`(context: { e: MouseEvent }) => void`<br/>点击面板时触发 | N\nonPresetClick | Function |  | TS 类型：`(context: { preset: PresetDate, e: MouseEvent }) => void`<br/>点击预设按钮后触发 | N\nonTimeChange | Function |  | TS 类型：`(context: { time: string, date: Date[], partial: DateRangePickerPartial, trigger: DatePickerTimeChangeTrigger, e?: MouseEvent }) => void`<br/>时间切换发生变化时触发 | N\nonYearChange | Function |  | TS 类型：`(context: { year: number, date: Date[], partial: DateRangePickerPartial, trigger: DatePickerYearChangeTrigger, e?: MouseEvent }) => void`<br/>年份切换发生变化时触发 | N\n\n### DateRangePickerPanel Events\n\n名称 | 参数 | 描述\n-- | -- | --\ncell-click | `(context: { date: Date[], partial: DateRangePickerPartial, e: MouseEvent })` | 点击日期单元格时触发\nchange | `(value: DateRangeValue, context: { dayjsValue?: Dayjs[], partial: DateRangePickerPartial, e?: MouseEvent, trigger?: DatePickerTriggerSource })` | 选中值发生变化时触发。参数 `context.trigger` 表示触发当前事件的来源，不同的模式触发来源也会不同\nconfirm | `(context: { date: Date[], e: MouseEvent })` | 如果存在“确定”按钮，则点击“确定”按钮时触发\nmonth-change | `(context: { month: number, date: Date[], partial: DateRangePickerPartial, e?: MouseEvent, trigger: DatePickerMonthChangeTrigger })` | 月份切换发生变化时触发\npanel-click | `(context: { e: MouseEvent })` | 点击面板时触发\npreset-click | `(context: { preset: PresetDate, e: MouseEvent })` | 点击预设按钮后触发\ntime-change | `(context: { time: string, date: Date[], partial: DateRangePickerPartial, trigger: DatePickerTimeChangeTrigger, e?: MouseEvent })` | 时间切换发生变化时触发\nyear-change | `(context: { year: number, date: Date[], partial: DateRangePickerPartial, trigger: DatePickerYearChangeTrigger, e?: MouseEvent })` | 年份切换发生变化时触发\n"
  },
  {
    "name": "descriptions",
    "propsData": ":: BASE_DOC ::\n\n## API\n\n### Descriptions Props\n\n名称 | 类型 | 默认值 | 描述 | 必传\n-- | -- | -- | -- | --\nbordered | Boolean | false | 是否带边框 | N\ncolon | Boolean | - | 字段名右侧是否携带冒号“：” | N\ncolumn | Number | 2 | 一行 `DescriptionsItem` 的数量 | N\ncontentStyle | Object | - | 自定义描述项内容的样式。TS 类型：`Styles`。[通用类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/common.ts) | N\nitemLayout | String | horizontal | 描述项的排列方向。可选项：horizontal/vertical | N\nitems | Array | - | 描述项的列表。TS 类型：`Array<TdDescriptionsItemProps>` | N\nlabelStyle | Object | - | 自定义描述项标签的样式，需要配合 `tableLayout` 为 `auto` 才可以生效。TS 类型：`Styles`。[通用类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/common.ts) | N\nlayout | String | horizontal | 排列方向。可选项：horizontal/vertical | N\nsize | String | medium | 组件尺寸。可选项：small/medium/large。TS 类型：`SizeEnum`。[通用类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/common.ts) | N\ntableLayout | String | fixed | 用于设置底层 `table` 单元格、行和列的布局算法，与原生 table-layout css 属性完全一致。`fixed`：采用固定布局算法；`auto`：采用自动布局算法。详情可参考 [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/table-layout)。可选项：fixed/auto | N\ntitle | String / Slot / Function | - | 描述列表的标题。TS 类型：`string \\| TNode`。[通用类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/common.ts) | N\n\n\n### DescriptionsItem Props\n\n名称 | 类型 | 默认值 | 描述 | 必传\n-- | -- | -- | -- | --\ncontent | String / Slot / Function | - | 描述项内容。TS 类型：`string \\| TNode`。[通用类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/common.ts) | N\ndefault | String / Slot / Function | - | 描述项内容，同 `content`。TS 类型：`string \\| TNode`。[通用类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/common.ts) | N\nlabel | String / Slot / Function | - | 描述项标签。TS 类型：`string \\| TNode`。[通用类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/common.ts) | N\nspan | Number | 1 | 占用的宽度数量 | N\n"
  },
  {
    "name": "dialog",
    "propsData": ":: BASE_DOC ::\n\n### 插件函数式调用\n\n#### 插件调用\n\n- 方式一：`this.$dialog(options)`\n\n- 方式二：`this.$dialog.confirm(options)`\n\n- 方式三：`this.$dialog.alert(options)`\n\n#### 函数调用\n\n- 方式一：`DialogPlugin(options)`\n\n- 方式二：`DialogPlugin.confirm(options)`\n\n- 方式三：`DialogPlugin.alert(options)`\n\n#### 组件实例方法\n\n组件实例指的是 `DialogInstance = this.$dialog(options)` 或者 `DialogInstance = DialogPlugin(options)`。\n\n- 销毁对话框：`DialogInstance.destroy()`\n\n- 隐藏对话框：`DialogInstance.hide()`\n\n- 显示对话框：`DialogInstance.show()`\n\n- 更新对话框：`DialogInstance.update()`\n\n注意在以下使用示例中，有多处并未销毁 DOM 元素。在实际应用中，需要考虑销毁 DOM 元素，否则当用户重复点击、创建插件或函数调用的实例后，会产生大量 DOM 元素、容易造成内存泄漏。\n\n{{ plugin }}\n\n## FAQ\n\n### 为什么在 Dialog 中无法使用样式穿透？\n\n`Dialog` 组件在 `1.0.8` 之后使用 `Vue3` 的 [Teleport](https://cn.vuejs.org/guide/built-ins/teleport.html) 重构了 `attach` 属性的实现，因此 `:deep()` 深度选择器无法作用于 [Teleport](https://cn.vuejs.org/guide/built-ins/teleport.html) 包裹的元素。\n\n如果必须要进行样式替换，可以采用以下几种方案。\n\n方案一：单独创建一个不使用`scoped`的`style`标签\n```html\n<style>\n.test .t-radio-button__label {\n  color: red;\n}\n</style>\n```\n方案二：使用 `:global` 伪类来实现相同效果，比起单独创建一个`style`更加简洁明了。\n```html\n<style scoped>\n.abc{\n  color: red;\n}\n:global(.test .t-radio-button__label) {\n  color: red;\n}\n</style>\n```\n\n### 为什么使用 attach 属性挂载元素时会失败？\n\n`attach` 属性使用属性使用 `Vue3` 的 [Teleport](https://cn.vuejs.org/guide/built-ins/teleport.html) 实现，因此attach遵守[Teleport](https://cn.vuejs.org/guide/built-ins/teleport.html)的使用规则。\n\n> `Teleport` 挂载时，传送的 `to` 目标必须已经存在于 `DOM` 中。理想情况下，这应该是整个 `Vue` 应用 `DOM` 树外部的一个元素。如果目标元素也是由 `Vue` 渲染的，你需要确保在挂载 `Teleport` 之前先挂载该元素。\n\n如果您不确定问题是否是由该规则引起的，或者确定该规则不是问题的根本原因，请在 `GitHub` 上提出一个 `issue`，并提供可以重现问题的代码。这将有助于我们更好地了解您的问题并提供更好的帮助。\n\n### 多层 Dialog 嵌套时，外层 Dialog 开启 destroy-on-close 后出现异常的情况？\n\n使用嵌套多层使用 dialog 且最外层开启了 `destroy-on-close` ，会出现框架层的报错：\n\n> Uncaught (in promise) NotFoundError: Failed to execute 'insertBefore' on 'Node': The node before which the new node is to be inserted is not a child of this node.\n\n解决方法： 除最后一层 dialog，外层的所有 dialog 都设置 `lazy` 为`true`；\n\n详情见 [issue](https://github.com/Tencent/tdesign-vue-next/pull/5659)，可通过此[链接](https://stackblitz.com/edit/vitejs-vite-vnywg115?file=src%2FApp.vue)体验。\n\n## API\n\n### DialogCard Props\n\n名称 | 类型 | 默认值 | 描述 | 必传\n-- | -- | -- | -- | --\nbody | String / Slot / Function | - | 对话框内容。TS 类型：`string \\| TNode`。[通用类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/common.ts) | N\ncancelBtn | String / Object / Slot / Function | - | 取消按钮，可自定义。值为 null 则不显示取消按钮。值类型为字符串，则表示自定义按钮文本，值类型为 Object 则表示透传 Button 组件属性。使用 TNode 自定义按钮时，需自行控制取消事件。TS 类型：`string \\| ButtonProps \\| TNode \\| null`，[Button API Documents](./button?tab=api)。[通用类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/common.ts)。[详细类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/dialog/type.ts) | N\ncloseBtn | String / Boolean / Slot / Function | true | 关闭按钮，可以自定义。值为 true 显示默认关闭按钮，值为 false 不显示关闭按钮。值类型为 string 则直接显示值，如：“关闭”。值类型为 TNode，则表示呈现自定义按钮示例。TS 类型：`string \\| ButtonProps \\| TNode \\| null`，[Button API Documents](./button?tab=api)。[通用类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/common.ts)。[详细类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/dialog/type.ts) | N\nconfirmBtn | String / Object / Slot / Function | true | 确认按钮。值为 null 则不显示确认按钮。值类型为字符串，则表示自定义按钮文本，值类型为 Object 则表示透传 Button 组件属性。使用 TNode 自定义按钮时，需自行控制确认事件。TS 类型：`string \\| ButtonProps \\| TNode \\| null`。[通用类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/common.ts) | N\nconfirmLoading | Boolean | - | 确认按钮加载状态。TS 类型：`string \\| ButtonProps \\| TNode \\| null`。[通用类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/common.ts) | N\nfooter | Boolean / Slot / Function | true | 底部操作栏，默认会有“确认”和“取消”两个按钮。值为 true 显示默认操作按钮，值为 false 不显示任何内容，值类型为 Function 表示自定义底部内容。TS 类型：`boolean \\| TNode`。[通用类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/common.ts) | N\nheader | String / Boolean / Slot / Function | true | 头部内容。值为 true 显示空白头部，值为 false 不显示任何内容，值类型为 string 则直接显示值，值类型为 Function 表示自定义头部内容。TS 类型：`string \\| boolean \\| TNode`。[通用类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/common.ts) | N\ntheme | String | default | 对话框风格。可选项：default/info/warning/danger/success | N\nonCancel | Function |  | TS 类型：`(context: { e: MouseEvent }) => void`<br/>如果“取消”按钮存在，则点击“取消”按钮时触发，同时触发关闭事件。可选项：default/info/warning/danger/success | N\nonCloseBtnClick | Function |  | TS 类型：`(context: { e: MouseEvent }) => void`<br/>点击右上角关闭按钮时触发。可选项：default/info/warning/danger/success | N\nonConfirm | Function |  | TS 类型：`(context: { e: MouseEvent \\| KeyboardEvent }) => void`<br/>如果“确认”按钮存在，则点击“确认”按钮时触发，或者键盘按下回车键时触发。可选项：default/info/warning/danger/success | N\n\n### DialogCard Events\n\n名称 | 参数 | 描述\n-- | -- | --\ncancel | `(context: { e: MouseEvent })` | 如果“取消”按钮存在，则点击“取消”按钮时触发，同时触发关闭事件。可选项：default/info/warning/danger/success\nclose-btn-click | `(context: { e: MouseEvent })` | 点击右上角关闭按钮时触发。可选项：default/info/warning/danger/success\nconfirm | `(context: { e: MouseEvent \\| KeyboardEvent })` | 如果“确认”按钮存在，则点击“确认”按钮时触发，或者键盘按下回车键时触发。可选项：default/info/warning/danger/success\n\n\n### Dialog Props\n\n名称 | 类型 | 默认值 | 描述 | 必传\n-- | -- | -- | -- | --\nattach | String / Function | - | 对话框挂载的节点。数据类型为 String 时，会被当作选择器处理，进行节点查询。示例：'body' 或 () => document.body。TS 类型：`AttachNode`。[通用类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/common.ts) | N\nbody | String / Slot / Function | - | 对话框内容。TS 类型：`string \\| TNode`。[通用类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/common.ts) | N\ncancelBtn | String / Object / Slot / Function | - | 取消按钮，可自定义。值为 null 则不显示取消按钮。值类型为字符串，则表示自定义按钮文本，值类型为 Object 则表示透传 Button 组件属性。使用 TNode 自定义按钮时，需自行控制取消事件。TS 类型：`string \\| ButtonProps \\| TNode \\| null`，[Button API Documents](./button?tab=api)。[通用类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/common.ts)。[详细类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/dialog/type.ts) | N\ncloseBtn | String / Boolean / Slot / Function | true | 关闭按钮，可以自定义。值为 true 显示默认关闭按钮，值为 false 不显示关闭按钮。值类型为 string 则直接显示值，如：“关闭”。值类型为 TNode，则表示呈现自定义按钮示例。TS 类型：`string \\| boolean \\| TNode`。[通用类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/common.ts) | N\ncloseOnEscKeydown | Boolean | true | 按下 ESC 时是否触发对话框关闭事件 | N\ncloseOnOverlayClick | Boolean | true | 点击蒙层时是否触发关闭事件 | N\nconfirmBtn | String / Object / Slot / Function | - | 确认按钮。值为 null 则不显示确认按钮。值类型为字符串，则表示自定义按钮文本，值类型为 Object 则表示透传 Button 组件属性。使用 TNode 自定义按钮时，需自行控制确认事件。TS 类型：`string \\| ButtonProps \\| TNode \\| null`。[通用类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/common.ts) | N\nconfirmLoading | Boolean | undefined | 确认按钮加载状态 | N\nconfirmOnEnter | Boolean | - | 是否在按下回车键时，触发确认事件 | N\ndefault | String / Slot / Function | - | 对话框内容，同 body。TS 类型：`string \\| TNode`。[通用类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/common.ts) | N\ndestroyOnClose | Boolean | false | 是否在关闭弹框的时候销毁子元素 | N\ndialogClassName | String | - | 弹框元素类名，示例：'t-class-dialog-first t-class-dialog-second' | N\ndialogStyle | Object | - | 作用于对话框本身的样式。TS 类型：`Styles`。[通用类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/common.ts) | N\ndraggable | Boolean | false | 对话框是否可以拖拽（仅在非模态对话框时有效） | N\nfooter | Boolean / Slot / Function | true | 底部操作栏，默认会有“确认”和“取消”两个按钮。值为 true 显示默认操作按钮，值为 false 不显示任何内容，值类型为 Function 表示自定义底部内容。TS 类型：`boolean \\| TNode`。[通用类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/common.ts) | N\nheader | String / Boolean / Slot / Function | true | 头部内容。值为 true 显示空白头部，值为 false 不显示任何内容，值类型为 string 则直接显示值，值类型为 Function 表示自定义头部内容。TS 类型：`string \\| boolean \\| TNode`。[通用类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/common.ts) | N\nlazy | Boolean | false | 是否启用对话框懒加载，启用时对话框内的内容不渲染 | N\nmode | String | modal | 对话框类型，有 4 种：模态对话框、非模态对话框、普通对话框、全屏对话框。弹出「模态对话框」时，只能操作对话框里面的内容，不能操作其他内容。弹出「非模态对话框」时，则可以操作页面内所有内容。「普通对话框」是指没有脱离文档流的对话框，可以在这个基础上开发更多的插件。可选项：modal/modeless/normal/full-screen | N\nplacement | String | top | 对话框位置，内置两种：垂直水平居中显示 和 靠近顶部（top:20%）显示。默认情况，为避免贴顶或贴底，顶部和底部距离最小为 `48px`，可通过调整 `top` 覆盖默认大小。可选项：top/center | N\npreventScrollThrough | Boolean | true | 防止滚动穿透 | N\nshowInAttachedElement | Boolean | false | 仅在挂载元素中显示抽屉，默认在浏览器可视区域显示。父元素需要有定位属性，如：position: relative | N\nshowOverlay | Boolean | true | 是否显示遮罩层 | N\ntheme | String | default | 对话框风格。可选项：default/info/warning/danger/success | N\ntop | String / Number | - | 用于弹框具体窗口顶部的距离，优先级大于 placement | N\nvisible | Boolean | - | 控制对话框是否显示 | N\nwidth | String / Number | - | 对话框宽度，示例：320, '500px', '80%' | N\nzIndex | Number | - | 对话框层级，Web 侧样式默认为 2500，移动端和小程序样式默认为 1500 | N\nonBeforeClose | Function |  | TS 类型：`() => void`<br/>对话框执行消失动画效果前触发 | N\nonBeforeOpen | Function |  | TS 类型：`() => void`<br/>对话框执行弹出动画效果前触发 | N\nonCancel | Function |  | TS 类型：`(context: { e: MouseEvent }) => void`<br/>如果“取消”按钮存在，则点击“取消”按钮时触发，同时触发关闭事件 | N\nonClose | Function |  | TS 类型：`(context: DialogCloseContext) => void`<br/>关闭事件，点击取消按钮、点击关闭按钮、点击蒙层、按下 ESC 等场景下触发。[详细类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/dialog/type.ts)。<br/>`type DialogEventSource = 'esc' \\| 'close-btn' \\| 'cancel' \\| 'overlay'`<br/><br/>`interface DialogCloseContext { trigger: DialogEventSource; e: MouseEvent \\| KeyboardEvent }`<br/> | N\nonCloseBtnClick | Function |  | TS 类型：`(context: { e: MouseEvent }) => void`<br/>点击右上角关闭按钮时触发 | N\nonClosed | Function |  | TS 类型：`() => void`<br/>对话框消失动画效果结束后触发 | N\nonConfirm | Function |  | TS 类型：`(context: { e: MouseEvent \\| KeyboardEvent }) => void`<br/>如果“确认”按钮存在，则点击“确认”按钮时触发，或者键盘按下回车键时触发 | N\nonEscKeydown | Function |  | TS 类型：`(context: { e: KeyboardEvent }) => void`<br/>按下 ESC 时触发事件 | N\nonOpened | Function |  | TS 类型：`() => void`<br/>对话框弹出动画效果结束后触发 | N\nonOverlayClick | Function |  | TS 类型：`(context: { e: MouseEvent }) => void`<br/>如果蒙层存在，点击蒙层时触发 | N\n\n### Dialog Events\n\n名称 | 参数 | 描述\n-- | -- | --\nbefore-close | \\- | 对话框执行消失动画效果前触发\nbefore-open | \\- | 对话框执行弹出动画效果前触发\ncancel | `(context: { e: MouseEvent })` | 如果“取消”按钮存在，则点击“取消”按钮时触发，同时触发关闭事件\nclose | `(context: DialogCloseContext)` | 关闭事件，点击取消按钮、点击关闭按钮、点击蒙层、按下 ESC 等场景下触发。[详细类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/dialog/type.ts)。<br/>`type DialogEventSource = 'esc' \\| 'close-btn' \\| 'cancel' \\| 'overlay'`<br/><br/>`interface DialogCloseContext { trigger: DialogEventSource; e: MouseEvent \\| KeyboardEvent }`<br/>\nclose-btn-click | `(context: { e: MouseEvent })` | 点击右上角关闭按钮时触发\nclosed | \\- | 对话框消失动画效果结束后触发\nconfirm | `(context: { e: MouseEvent \\| KeyboardEvent })` | 如果“确认”按钮存在，则点击“确认”按钮时触发，或者键盘按下回车键时触发\nesc-keydown | `(context: { e: KeyboardEvent })` | 按下 ESC 时触发事件\nopened | \\- | 对话框弹出动画效果结束后触发\noverlay-click | `(context: { e: MouseEvent })` | 如果蒙层存在，点击蒙层时触发\n\n### DialogOptions\n\n名称 | 类型 | 默认值 | 描述 | 必传\n-- | -- | -- | -- | --\nattach | String / Function | 'body' | 对话框挂载的节点。数据类型为 String 时，会被当作选择器处理，进行节点查询。示例：'body' 或 () => document.body。TS 类型：`AttachNode`。[通用类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/common.ts) | N\nclassName | String | - | 弹框类名，示例：'t-class-dialog-first t-class-dialog-second' | N\nstyle | String / Object | - | 弹框 style 属性，输入 [CSSStyleDeclaration.cssText](https://developer.mozilla.org/en-US/docs/Web/API/CSSStyleDeclaration/cssText)。TS 类型：`string \\| Styles`。[通用类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/common.ts) | N\n`Omit<DialogProps, 'attach'>` | \\- | - | 继承 `Omit<DialogProps, 'attach'>` 中的全部属性 | N\n\n### DialogInstance\n\n名称 | 参数 | 返回值 | 描述\n-- | -- | -- | --\ndestroy | \\- | \\- | 必需。销毁弹框\nhide | \\- | \\- | 必需。隐藏弹框\nsetConfirmLoading | `(loading: boolean)` | \\- | 必需。设置确认按钮加载状态\nshow | \\- | \\- | 必需。显示弹框\nupdate | `(props: DialogOptions)` | \\- | 必需。更新弹框内容\n\n### DialogPlugin\n\n同时也支持 `this.$dialog`。\n\n参数名称 | 参数类型 | 参数默认值 | 参数描述\n-- | -- | -- | --\noptions | \\- | - | TS 类型：`DialogOptions`\ncontext | \\- | - | 要继承的应用的上下文。TS 类型：`AppContext`。[通用类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/common.ts)\n\n插件返回值：`DialogInstance`\n\n### DialogPlugin.confirm\n\n同时也支持 `this.$dialog.confirm`。\n\n参数名称 | 参数类型 | 参数默认值 | 参数描述\n-- | -- | -- | --\noptions | \\- | - | TS 类型：`DialogOptions`\ncontext | \\- | - | TS 类型：`AppContext`。[通用类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/common.ts)\n\n### DialogPlugin.alert\n\n同时也支持 `this.$dialog.alert`。\n\n参数名称 | 参数类型 | 参数默认值 | 参数描述\n-- | -- | -- | --\noptions | Object | - | TS 类型：`Omit<DialogOptions, 'cancelBtn'>`\ncontext | \\- | - | TS 类型：`AppContext`。[通用类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/common.ts)\n"
  },
  {
    "name": "divider",
    "propsData": ":: BASE_DOC ::\n\n## API\n### Divider Props\n\n名称 | 类型 | 默认值 | 说明 | 必传\n-- | -- | -- | -- | --\nalign | String | center | 文本位置（仅在水平分割线有效）。可选项：left/right/center | N\ncontent | String / Slot / Function | - | 子元素。TS 类型：`string \\| TNode`。[通用类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/common.ts) | N\ndashed | Boolean | false | 是否虚线（仅在水平分割线有效） | N\ndefault | String / Slot / Function | - | 子元素，同 content。TS 类型：`string \\| TNode`。[通用类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/common.ts) | N\nlayout | String | horizontal | 分隔线类型有两种：水平和垂直。可选项：horizontal/vertical | N\ntheme | String | - | 已废弃。请更为使用 `layout`。分隔线类型有两种：水平和垂直。可选项：horizontal/vertical | N\n"
  },
  {
    "name": "drawer",
    "propsData": ":: BASE_DOC ::\n\n### 插件函数式调用\n\n#### 插件调用\n\n- `this.$drawer(options)`\n\n#### 函数调用\n\n- `DrawerPlugin(options)`\n\n#### 组件实例方法\n\n组件实例指的是 `DrawerInstance = this.$drawer(options)` 或者 `DrawerInstance = DrawerPlugin(options)`。\n\n- 销毁抽屉：`DrawerInstance.destroy()`\n\n- 隐藏抽屉：`DrawerInstance.hide()`\n\n- 显示抽屉：`DrawerInstance.show()`\n\n- 更新抽屉：`DrawerInstance.update()`\n\n注意在以下使用示例中，有多处并未销毁 DOM 元素。在实际应用中，需要考虑销毁 DOM 元素，否则当用户重复点击、创建插件或函数调用的实例后，会产生大量 DOM 元素、容易造成内存泄漏。\n\n{{ plugin }}\n\n## FAQ\n\n### 为什么在 Drawer 中无法使用样式穿透？\n\n`Drawer` 组件在 `1.0.8` 之后使用 `Vue3` 的 [Teleport](https://cn.vuejs.org/guide/built-ins/teleport.html) 重构了 `attach` 属性的实现，因此 `:deep()` 深度选择器无法作用于 [Teleport](https://cn.vuejs.org/guide/built-ins/teleport.html) 包裹的元素。\n\n如果必须要进行样式替换，可以采用以下几种方案。\n\n方案一：单独创建一个不使用`scoped`的`style`标签\n```html\n<style>\n.test .t-radio-button__label {\n  color: red;\n}\n</style>\n```\n方案二：使用 `:global` 伪类来实现相同效果，比起单独创建一个`style`更加简洁明了。\n```html\n<style scoped>\n.abc{\n  color: red;\n}\n:global(.test .t-radio-button__label) {\n  color: red;\n}\n</style>\n```\n\n### 为什么使用 attach 属性挂载元素时会失败？\n\n`attach` 属性使用属性使用 `Vue3` 的 [Teleport](https://cn.vuejs.org/guide/built-ins/teleport.html) 实现，因此attach遵守[Teleport](https://cn.vuejs.org/guide/built-ins/teleport.html)的使用规则。\n\n> `Teleport` 挂载时，传送的 `to` 目标必须已经存在于 `DOM` 中。理想情况下，这应该是整个 `Vue` 应用 `DOM` 树外部的一个元素。如果目标元素也是由 `Vue` 渲染的，你需要确保在挂载 `Teleport` 之前先挂载该元素。\n\n如果您不确定问题是否是由该规则引起的，或者确定该规则不是问题的根本原因，请在 `GitHub` 上提出一个 `issue`，并提供可以重现问题的代码。这将有助于我们更好地了解您的问题并提供更好的帮助。\n\n## API\n\n### Drawer Props\n\n名称 | 类型 | 默认值 | 描述 | 必传\n-- | -- | -- | -- | --\nattach | String / Function | - | 抽屉挂载的节点，默认挂在组件本身的位置。数据类型为 String 时，会被当作选择器处理，进行节点查询。示例：'body' 或 () => document.body。TS 类型：`AttachNode`。[通用类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/common.ts) | N\nbody | String / Slot / Function | - | 抽屉内容。TS 类型：`string \\| TNode`。[通用类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/common.ts) | N\ncancelBtn | String / Object / Slot / Function | - | 取消按钮，可自定义。值为 null 则不显示取消按钮。值类型为字符串，则表示自定义按钮文本，值类型为 Object 则表示透传 Button 组件属性。使用 TNode 自定义按钮时，需自行控制取消事件。TS 类型：`FooterButton` | N\ncloseBtn | String / Boolean / Slot / Function | - | 关闭按钮，可以自定义。值为 true 显示默认关闭按钮，值为 false 不显示关闭按钮。值类型为 string 则直接显示值，如：“关闭”。值类型为 TNode，则表示呈现自定义按钮示例。TS 类型：`string \\| boolean \\| TNode`。[通用类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/common.ts) | N\ncloseOnEscKeydown | Boolean | true | 按下 ESC 时是否触发抽屉关闭事件 | N\ncloseOnOverlayClick | Boolean | true | 点击蒙层时是否触发抽屉关闭事件 | N\nconfirmBtn | String / Object / Slot / Function | - | 确认按钮，可自定义。值为 null 则不显示确认按钮。类型为字符串，则表示自定义按钮文本，值类型为 Object 则表示透传 Button 组件属性。使用 TNode 自定义按钮时，需自行控制确认事件。TS 类型：`FooterButton` `type FooterButton = string \\| ButtonProps \\| TNode \\| null `，[Button API Documents](./button?tab=api)。[通用类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/common.ts)。[详细类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/drawer/type.ts) | N\ndefault | String / Slot / Function | - | 抽屉内容，同 body。TS 类型：`string \\| TNode`。[通用类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/common.ts) | N\ndestroyOnClose | Boolean | false | 抽屉关闭时是否销毁节点 | N\ndrawerClassName | String | - | 抽屉元素类名。 | N\nfooter | Boolean / Slot / Function | true | 底部操作栏，默认会有“确认”和“取消”两个按钮。值为 true 显示默认操作按钮，值为 false 或 null 不显示任何内容，值类型为 TNode 表示自定义底部内容。TS 类型：`boolean \\| TNode`。[通用类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/common.ts) | N\nheader | String / Boolean / Slot / Function | true | 头部内容。值为 true 显示空白头部，值为 false 不显示头部，值类型为 string 则直接显示值，值类型为 TNode 表示自定义头部内容。TS 类型：`string \\| boolean \\| TNode`。[通用类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/common.ts) | N\nlazy | Boolean | false | 是否启用抽屉懒加载，启用时抽屉的内容不渲染 | N\nmode | String | overlay | 展开方式，有两种：直接展示在内容上方 和 推开内容区域。可选项：overlay/push | N\nplacement | String | right | 抽屉方向。可选项：left/right/top/bottom | N\npreventScrollThrough | Boolean | true | 防止滚动穿透 | N\nshowInAttachedElement | Boolean | false | 仅在挂载元素中显示抽屉，默认在浏览器可视区域显示。父元素需要有定位属性，如：position: relative | N\nshowOverlay | Boolean | true | 是否显示遮罩层 | N\nsize | String | 'small' | 尺寸，支持 'small', 'medium', 'large'，'35px', '30%',  '3em' 等。纵向抽屉调整的是抽屉宽度，横向抽屉调整的是抽屉高度 | N\nsizeDraggable | Boolean / Object | false | 抽屉大小可拖拽调整，横向抽屉调整宽度，纵向抽屉调整高度。`sizeDraggable.max` 和 `sizeDraggable.min` 用于控制拖拽尺寸大小限制。TS 类型：`boolean \\| SizeDragLimit` `interface SizeDragLimit { max: number, min: number }`。[详细类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/drawer/type.ts) | N\nvisible | Boolean | false | 组件是否可见 | N\nzIndex | Number | - | 抽屉层级，样式默认为 1500 | N\nonBeforeClose | Function |  | TS 类型：`() => void`<br/>抽屉执行关闭动画效果前触发 | N\nonBeforeOpen | Function |  | TS 类型：`() => void`<br/>抽屉执行打开动画效果前触发 | N\nonCancel | Function |  | TS 类型：`(context: { e: MouseEvent }) => void`<br/>如果“取消”按钮存在，点击“取消”按钮时触发，同时触发关闭事件 | N\nonClose | Function |  | TS 类型：`(context: DrawerCloseContext) => void`<br/>关闭事件，取消按钮点击时、关闭按钮点击时、ESC 按下时、点击蒙层时均会触发。[详细类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/drawer/type.ts)。<br/>`type DrawerEventSource = 'esc' \\| 'close-btn' \\| 'cancel' \\| 'overlay'`<br/><br/>`interface DrawerCloseContext { trigger: DrawerEventSource; e: MouseEvent \\| KeyboardEvent }`<br/> | N\nonCloseBtnClick | Function |  | TS 类型：`(context: { e: MouseEvent }) => void`<br/>如果关闭按钮存在，点击关闭按钮时触发该事件，同时触发关闭事件 | N\nonConfirm | Function |  | TS 类型：`(context: { e: MouseEvent }) => void`<br/>如果“确认”按钮存在，则点击“确认”按钮时触发 | N\nonEscKeydown | Function |  | TS 类型：`(context: { e: KeyboardEvent }) => void`<br/>按下 ESC 键时触发 | N\nonOverlayClick | Function |  | TS 类型：`(context: { e: MouseEvent }) => void`<br/>如果蒙层存在，点击蒙层时触发 | N\nonSizeDragEnd | Function |  | TS 类型：`(context: { e: MouseEvent; size: number  }) => void`<br/>抽屉大小拖拽结束时触发，事件参数 `size` 在横向抽屉中表示宽度，在纵向抽屉中表示高度 | N\n\n### Drawer Events\n\n名称 | 参数 | 描述\n-- | -- | --\nbefore-close | \\- | 抽屉执行关闭动画效果前触发\nbefore-open | \\- | 抽屉执行打开动画效果前触发\ncancel | `(context: { e: MouseEvent })` | 如果“取消”按钮存在，点击“取消”按钮时触发，同时触发关闭事件\nclose | `(context: DrawerCloseContext)` | 关闭事件，取消按钮点击时、关闭按钮点击时、ESC 按下时、点击蒙层时均会触发。[详细类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/drawer/type.ts)。<br/>`type DrawerEventSource = 'esc' \\| 'close-btn' \\| 'cancel' \\| 'overlay'`<br/><br/>`interface DrawerCloseContext { trigger: DrawerEventSource; e: MouseEvent \\| KeyboardEvent }`<br/>\nclose-btn-click | `(context: { e: MouseEvent })` | 如果关闭按钮存在，点击关闭按钮时触发该事件，同时触发关闭事件\nconfirm | `(context: { e: MouseEvent })` | 如果“确认”按钮存在，则点击“确认”按钮时触发\nesc-keydown | `(context: { e: KeyboardEvent })` | 按下 ESC 键时触发\noverlay-click | `(context: { e: MouseEvent })` | 如果蒙层存在，点击蒙层时触发\nsize-drag-end | `(context: { e: MouseEvent; size: number  })` | 抽屉大小拖拽结束时触发，事件参数 `size` 在横向抽屉中表示宽度，在纵向抽屉中表示高度\n\n### DrawerOptions\n\n名称 | 类型 | 默认值 | 描述 | 必传\n-- | -- | -- | -- | --\nattach | String / Function | 'body' | 抽屉挂载的节点。数据类型为 String 时，会被当作选择器处理，进行节点查询。示例：'body' 或 () => document.body。TS 类型：`AttachNode`。[通用类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/common.ts) | N\nclassName | String | - | 抽屉类名，示例：'t-class-drawer-first t-class-drawer-second' | N\nstyle | String / Object | - | 弹框 style 属性，输入 [CSSStyleDeclaration.cssText](https://developer.mozilla.org/en-US/docs/Web/API/CSSStyleDeclaration/cssText)。TS 类型：`string \\| Styles`。[通用类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/common.ts) | N\n`Omit<DrawerProps, 'attach'>` | \\- | - | 继承 `Omit<DrawerProps, 'attach'>` 中的全部属性 | N\n\n### DrawerInstance\n\n名称 | 参数 | 返回值 | 描述\n-- | -- | -- | --\ndestroy | \\- | \\- | 销毁抽屉\nhide | \\- | \\- | 隐藏抽屉\nshow | \\- | \\- | 显示抽屉\nupdate | `(props: DrawerOptions)` | \\- | 更新抽屉内容\n\n### DrawerPlugin\n\n同时也支持 `this.$drawer`。\n\n参数名称 | 参数类型 | 参数默认值 | 参数描述\n-- | -- | -- | --\noptions | \\- | - | TS 类型：`DrawerOptions`\ncontext | \\- | - | TS 类型：`AppContext`。[通用类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/common.ts)\n\n插件返回值：`DrawerInstance`\n"
  },
  {
    "name": "dropdown",
    "propsData": ":: BASE_DOC ::\n\n### 绑定点击事件的下拉菜单\n\n下拉菜单的操作项绑定 click 事件，常用于需要对每个操作项绑定不同的 click 事件的场景。\n\n{{ event }}\n\n### 通过插槽方式使用下拉菜单\n\n下拉菜单操作项支持通过插槽的方式传递操作项。\n\n{{ slot }}\n\n## API\n### Dropdown Props\n\n名称 | 类型 | 默认值 | 说明 | 必传\n-- | -- | -- | -- | --\ndirection | String | right | 多层级操作时，子层级展开方向。可选项：left/right | N\ndisabled | Boolean | false | 是否禁用组件 | N\nhideAfterItemClick | Boolean | true | 点击选项后是否自动隐藏弹窗 | N\nmaxColumnWidth | String / Number | 100 | 选项最大宽度，内容超出时，显示为省略号。值为字符串时，值就是最大宽度；值为数字时，单位：px | N\nmaxHeight | Number | 300 | 弹窗最大高度，单位：px 。统一控制每一列的高度 | N\nminColumnWidth | String / Number | 10 | 选项最小宽度。值为字符串时，值就是最小宽度；值为数字时，单位：px | N\noptions | Array | [] | 下拉操作项。TS 类型：`Array<DropdownOption>` `type DropdownOption = { children?: DropdownOption[] } & TdDropdownItemProps & Record<string, any>`。[详细类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/dropdown/type.ts) | N\npanelBottomContent | String / Slot / Function | - | 面板内的底部内容。TS 类型：`string \\| TNode`。[通用类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/common.ts) | N\npanelTopContent | String / Slot / Function | - | 面板内的顶部内容。TS 类型：`string \\| TNode`。[通用类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/common.ts) | N\nplacement | String | bottom-left | 弹窗定位方式，可选值同 Popup 组件。可选项：top/left/right/bottom/top-left/top-right/bottom-left/bottom-right/left-top/left-bottom/right-top/right-bottom | N\npopupProps | Object | - | 透传  Popup 组件属性，方便更加自由地控制。比如使用 popupProps.overlayStyle 设置浮层样式。TS 类型：`PopupProps`，[Popup API Documents](./popup?tab=api)。[详细类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/dropdown/type.ts) | N\ntrigger | String | hover | 触发下拉显示的方式。可选项：hover/click/focus/context-menu | N\nonClick | Function |  | TS 类型：`(dropdownItem: DropdownOption, context: { e: MouseEvent }) => void`<br/>下拉操作项点击时触发 | N\n\n### Dropdown Events\n\n名称 | 参数 | 描述\n-- | -- | --\nclick | `(dropdownItem: DropdownOption, context: { e: MouseEvent })` | 下拉操作项点击时触发\n\n### DropdownItem Props\n\n名称 | 类型 | 默认值 | 说明 | 必传\n-- | -- | -- | -- | --\nactive | Boolean | false | 是否高亮当前操作项 | N\ncontent | String / Slot / Function | '' | 下拉操作项内容。TS 类型：`string \\| TNode`。[通用类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/common.ts) | N\ndisabled | Boolean | false | 是否禁用操作项 | N\ndivider | Boolean | false | 是否显示操作项之间的分隔线（分隔线默认在下方） | N\nprefixIcon | Slot / Function | - | 组件前置图标。TS 类型：`TNode`。[通用类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/common.ts) | N\ntheme | String | default | 下拉菜单选项主题。可选项：default/success/warning/error。TS 类型：`DropdownItemTheme` `type DropdownItemTheme = 'default' \\| 'success' \\| 'warning' \\| 'error'`。[详细类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/dropdown-menu/type.ts) | N\nvalue | String / Number / Object | - | 下拉操作项唯一标识。TS 类型：`string \\| number \\| { [key: string]: any }` | N\nonClick | Function |  | TS 类型：`(dropdownItem: DropdownOption, context: { e: MouseEvent }) => void`<br/>点击时触发 | N\n\n### DropdownItem Events\n\n名称 | 参数 | 描述\n-- | -- | --\nclick | `(dropdownItem: DropdownOption, context: { e: MouseEvent })` | 点击时触发\n"
  },
  {
    "name": "empty",
    "propsData": ":: BASE_DOC ::\n\n## API\n\n### Empty Props\n\n名称 | 类型 | 默认值 | 描述 | 必传\n-- | -- | -- | -- | --\naction | Slot / Function | - | 操作按钮。TS 类型：`TNode`。[通用类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/common.ts) | N\ndescription | String / Slot / Function | - | 描述文字。TS 类型：`string \\| TNode`。[通用类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/common.ts) | N\nimage | String / Slot / Function | - | 组件图片，可以完全自定义内容。值类型为字符串时，表示图片地址；值类型为对象时，则表示透传全部属性到图片组件。TS 类型：`string \\| ImageProps \\| TNode `，[Image API Documents](./image?tab=api)。[通用类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/common.ts)。[详细类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/empty/type.ts) | N\nimageStyle | Object | - | 透传图片样式表。TS 类型：`Styles`。[通用类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/common.ts) | N\nsize | String | medium | 空状态的尺寸，默认为 `medium`。可选项：small/medium/large。TS 类型：`SizeEnum`。[通用类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/common.ts) | N\ntitle | String / Slot / Function | - | 错误标题。TS 类型：`string \\| TNode`。[通用类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/common.ts) | N\ntype | String | empty | 组件类型，如：空数据/成功/失败/网络错误/建设中。可选项：empty/success/fail/network-error/maintenance | N\n"
  },
  {
    "name": "form",
    "propsData": ":: BASE_DOC ::\n\n<!-- 可在这里自行添加 demo 展示 -->\n\n## API\n### Form Props\n\n名称 | 类型 | 默认值 | 描述 | 必传\n-- | -- | -- | -- | --\ncolon | Boolean | false | 是否在表单标签字段右侧显示冒号 | N\ndata | Object | {} | 表单数据。TS 类型：`FormData` | N\ndisabled | Boolean | undefined | 是否禁用整个表单 | N\nerrorMessage | Object | - | 表单错误信息配置，示例：`{ idcard: '请输入正确的身份证号码', max: '字符长度不能超过 ${max}' }`。TS 类型：`FormErrorMessage` | N\nid | String | undefined | 表单原生的id属性，支持用于配合非表单内的按钮通过form属性来触发表单事件 | N\nlabelAlign | String | right | 表单字段标签对齐方式：左对齐、右对齐、顶部对齐。可选项：left/right/top | N\nlabelWidth | String / Number | '100px' | 可以整体设置label标签宽度，默认为100px | N\nlayout | String | vertical | 表单布局，有两种方式：纵向布局 和 行内布局。可选项：vertical/inline | N\npreventSubmitDefault | Boolean | true | 是否阻止表单提交默认事件（表单提交默认事件会刷新页面），设置为 `true` 可以避免刷新 | N\nreadonly | Boolean | undefined | 是否整个表单只读 | N\nrequiredMark | Boolean | true | 是否显示必填符号（*），默认显示 | N\nrequiredMarkPosition | String | left | 表单必填符号（*）显示位置。可选项：left/right | N\nresetType | String | empty | 重置表单的方式，值为 empty 表示重置表单为空，值为 initial 表示重置表单数据为初始值。可选项：empty/initial | N\nrules | Object | - | 表单字段校验规则。TS 类型：`FormRules<FormData>` `type FormRules<T extends Data = any> = { [field in keyof T]?: Array<FormRule> }`。[详细类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/form/type.ts) | N\nscrollToFirstError | String | - | 表单校验不通过时，是否自动滚动到第一个校验不通过的字段，平滑滚动或是瞬间直达。值为空则表示不滚动。可选项：''/smooth/auto | N\nshowErrorMessage | Boolean | true | 校验不通过时，是否显示错误提示信息，统一控制全部表单项。如果希望控制单个表单项，请给 FormItem 设置该属性 | N\nstatusIcon | Boolean / Slot / Function | undefined | 校验状态图标，值为 `true` 显示默认图标，默认图标有 成功、失败、警告 等，不同的状态图标不同。`statusIcon` 值为 `false`，不显示图标。`statusIcon` 值类型为渲染函数，则可以自定义右侧状态图标。TS 类型：`boolean \\| TNode<TdFormItemProps>`。[通用类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/common.ts) | N\nsubmitWithWarningMessage | Boolean | false | 【讨论中】当校验结果只有告警信息时，是否触发 `submit` 提交事件 | N\nonReset | Function |  | TS 类型：`(context: { e?: FormResetEvent }) => void`<br/>表单重置时触发 | N\nonSubmit | Function |  | TS 类型：`(context: SubmitContext<FormData>) => void`<br/>表单提交时触发。其中 `context.validateResult` 表示校验结果，`context.firstError` 表示校验不通过的第一个规则提醒。`context.validateResult` 值为 `true` 表示校验通过；如果校验不通过，`context.validateResult` 值为校验结果列表。<br />【注意】⚠️ 默认情况，输入框按下 Enter 键会自动触发提交事件，如果希望禁用这个默认行为，可以给输入框添加  enter 事件，并在事件中设置 `e.preventDefault()`。[详细类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/form/type.ts)。<br/>`interface SubmitContext<T extends Data = Data> { e?: FormSubmitEvent; validateResult: FormValidateResult<T>; firstError?: string; fields?: any }`<br/><br/>`type FormValidateResult<T> = boolean \\| ValidateResultObj<T>`<br/><br/>`type ValidateResultObj<T> = { [key in keyof T]: boolean \\| ValidateResultList }`<br/><br/>`type ValidateResultList = Array<AllValidateResult>`<br/><br/>`type AllValidateResult = CustomValidateObj \\| ValidateResultType`<br/><br/>`interface ValidateResultType extends FormRule { result: boolean }`<br/><br/>`type ValidateResult<T> = { [key in keyof T]: boolean \\| ErrorList }`<br/><br/>`type ErrorList = Array<FormRule>`<br/> | N\nonValidate | Function |  | TS 类型：`(result: ValidateResultContext<FormData>) => void`<br/>校验结束后触发，result 值为 true 表示校验通过；如果校验不通过，result 值为校验结果列表。[详细类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/form/type.ts)。<br/>`type ValidateResultContext<T extends Data> = Omit<SubmitContext<T>, 'e'>`<br/> | N\n\n### Form Events\n\n名称 | 参数 | 描述\n-- | -- | --\nreset | `(context: { e?: FormResetEvent })` | 表单重置时触发\nsubmit | `(context: SubmitContext<FormData>)` | 表单提交时触发。其中 `context.validateResult` 表示校验结果，`context.firstError` 表示校验不通过的第一个规则提醒。`context.validateResult` 值为 `true` 表示校验通过；如果校验不通过，`context.validateResult` 值为校验结果列表。<br />【注意】⚠️ 默认情况，输入框按下 Enter 键会自动触发提交事件，如果希望禁用这个默认行为，可以给输入框添加  enter 事件，并在事件中设置 `e.preventDefault()`。[详细类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/form/type.ts)。<br/>`interface SubmitContext<T extends Data = Data> { e?: FormSubmitEvent; validateResult: FormValidateResult<T>; firstError?: string; fields?: any }`<br/><br/>`type FormValidateResult<T> = boolean \\| ValidateResultObj<T>`<br/><br/>`type ValidateResultObj<T> = { [key in keyof T]: boolean \\| ValidateResultList }`<br/><br/>`type ValidateResultList = Array<AllValidateResult>`<br/><br/>`type AllValidateResult = CustomValidateObj \\| ValidateResultType`<br/><br/>`interface ValidateResultType extends FormRule { result: boolean }`<br/><br/>`type ValidateResult<T> = { [key in keyof T]: boolean \\| ErrorList }`<br/><br/>`type ErrorList = Array<FormRule>`<br/>\nvalidate | `(result: ValidateResultContext<FormData>)` | 校验结束后触发，result 值为 true 表示校验通过；如果校验不通过，result 值为校验结果列表。[详细类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/form/type.ts)。<br/>`type ValidateResultContext<T extends Data> = Omit<SubmitContext<T>, 'e'>`<br/>\n\n### FormInstanceFunctions 组件实例方法\n\n名称 | 参数 | 返回值 | 描述\n-- | -- | -- | --\nclearValidate | `(fields?: Array<keyof FormData>)` | \\- | 必需。清空校验结果。可使用 fields 指定清除部分字段的校验结果，fields 值为空则表示清除所有字段校验结果。清除邮箱校验结果示例：`clearValidate(['email'])`\nreset | `(params?: FormResetParams<FormData>)` | \\- | 必需。重置表单，表单里面没有重置按钮`<button type=\\\"reset\\\" />`时可以使用该方法，默认重置全部字段为空，该方法会触发 `reset` 事件。<br />如果表单属性 `resetType='empty'` 或者 `reset.type='empty'` 会重置为空；<br />如果表单属性 `resetType='initial'` 或者 `reset.type='initial'` 会重置为表单初始值。<br />`reset.fields` 用于设置具体重置哪些字段，示例：`reset({ type: 'initial', fields: ['name', 'age'] })`。[详细类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/form/type.ts)。<br/>`interface FormResetParams<FormData> { type?: 'initial' \\| 'empty'; fields?: Array<keyof FormData> }`<br/>\nsetValidateMessage | `(message: FormValidateMessage<FormData>)` | \\- | 必需。设置自定义校验结果，如远程校验信息直接呈现。注意需要在组件挂载结束后使用该方法。`FormData` 指表单数据泛型。[详细类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/form/type.ts)。<br/>`type FormValidateMessage<FormData> = { [field in keyof FormData]: FormItemValidateMessage[] }`<br/><br/>`interface FormItemValidateMessage { type: 'warning' \\| 'error'; message: string }`<br/>\nsubmit | `(params?: { showErrorMessage?: boolean })` | \\- | 必需。提交表单，表单里面没有提交按钮`<button type=\\\"submit\\\" />`时可以使用该方法。`showErrorMessage` 表示是否在提交校验不通过时显示校验不通过的原因，默认显示。该方法会触发 `submit` 事件\nvalidate | `(params?: FormValidateParams)` | `Promise<FormValidateResult<FormData>>` | 必需。校验函数，包含错误文本提示等功能。泛型 `FormData` 表示表单数据 TS 类型。<br/>【关于参数】`params.fields` 表示校验字段，如果设置了 `fields`，本次校验将仅对这些字段进行校验。`params.trigger` 表示本次触发校验的范围，'params.trigger = blur' 表示只触发校验规则设定为 trigger='blur' 的字段，'params.trigger = change' 表示只触发校验规则设定为 trigger='change' 的字段，默认触发全范围校验。`params.showErrorMessage` 表示校验结束后是否显示错误文本提示，默认显示。<br />【关于返回值】返回值为 true 表示校验通过；如果校验不通过，返回值为校验结果列表。[详细类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/form/type.ts)。<br/>`interface FormValidateParams { fields?: Array<string>; showErrorMessage?: boolean; trigger?: ValidateTriggerType }`<br/><br/>`type ValidateTriggerType = 'blur' \\| 'change' \\| 'submit' \\| 'all'`<br/>\nvalidateOnly | `(params?: Pick<FormValidateParams, 'fields' \\| 'trigger'>)` | `Promise<FormValidateResult<FormData>>` | 必需。纯净的校验函数，仅返回校验结果，不对组件进行任何操作。泛型 `FormData` 表示表单数据 TS 类型。参数和返回值含义同 `validate` 方法\n\n\n### FormItem Props\n\n名称 | 类型 | 默认值 | 描述 | 必传\n-- | -- | -- | -- | --\nfor | String | - | label 原生属性 | N\nhelp | String / Slot / Function | - | 表单项说明内容。TS 类型：`string \\| TNode`。[通用类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/common.ts) | N\nlabel | String / Slot / Function | '' | 字段标签名称。TS 类型：`string \\| TNode`。[通用类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/common.ts) | N\nlabelAlign | String | - | 表单字段标签对齐方式：左对齐、右对齐、顶部对齐。默认使用 Form 的对齐方式，优先级高于 Form.labelAlign。可选项：left/right/top | N\nlabelWidth | String / Number | - | 可以整体设置标签宽度，优先级高于 Form.labelWidth | N\nname | String | - | 表单字段名称 | N\nrequiredMark | Boolean | undefined | 是否显示必填符号（*），优先级高于 Form.requiredMark | N\nrules | Array | - | 表单字段校验规则。TS 类型：`Array<FormRule>` | N\nshowErrorMessage | Boolean | undefined | 校验不通过时，是否显示错误提示信息，优先级高于 `Form.showErrorMessage` | N\nstatus | String | - | 校验状态，可在需要完全自主控制校验状态时使用。TS 类型：`'error' \\| 'warning' \\| 'success'` | N\nstatusIcon | Boolean / Slot / Function | undefined | 校验状态图标，值为 `true` 显示默认图标，默认图标有 成功、失败、警告 等，不同的状态图标不同。`statusIcon` 值为 `false`，不显示图标。`statusIcon` 值类型为渲染函数，则可以自定义右侧状态图标。优先级高级 Form 的 statusIcon。TS 类型：`boolean \\| TNode`。[通用类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/common.ts) | N\nsuccessBorder | Boolean | false | 是否显示校验成功的边框，默认不显示 | N\ntips | String / Slot / Function | - | 自定义提示内容，样式跟随 `status` 变动，可在需要完全自主控制校验规则时使用。TS 类型：`string \\| TNode`。[通用类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/common.ts) | N\n\n### FormRule\n\n名称 | 类型 | 默认值 | 描述 | 必传\n-- | -- | -- | -- | --\nboolean | Boolean | - | 内置校验方法，校验值类型是否为布尔类型，示例：`{ boolean: true, message: '数据类型必须是布尔类型' }` | N\ndate | Boolean / Object | - | 内置校验方法，校验值是否为日期格式，[参数文档](https://github.com/validatorjs/validator.js)，示例：`{ date: { delimiters: '-' }, message: '日期分隔线必须是短横线（-）' }`。TS 类型：`boolean \\| IsDateOptions` `interface IsDateOptions { format: string; strictMode: boolean; delimiters: string[] }`。[详细类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/form/type.ts) | N\nemail | Boolean / Object | - | 内置校验方法，校验值是否为邮件格式，[参数文档](https://github.com/validatorjs/validator.js)，示例：`{ email: { ignore_max_length: true }, message: '请输入正确的邮箱地址' }`。TS 类型：`boolean \\| IsEmailOptions` `import { IsEmailOptions } from 'validator/es/lib/isEmail'`。[详细类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/form/type.ts) | N\nenum | Array | - | 内置校验方法，校验值是否属于枚举值中的值。示例：`{ enum: ['primary', 'info', 'warning'], message: '值只能是 primary/info/warning 中的一种' }`。TS 类型：`Array<string>` | N\nidcard | Boolean | - | 内置校验方法，校验值是否为身份证号码，组件校验正则为 `/^(\\\\d{18,18}\\|\\\\d{15,15}\\|\\\\d{17,17}x)$/i`，示例：`{ idcard: true, message: '请输入正确的身份证号码' }` | N\nlen | Number / Boolean | - | 内置校验方法，校验值固定长度，如：len: 10 表示值的字符长度只能等于 10 ，中文表示 2 个字符，英文为 1 个字符。示例：`{ len: 10, message: '内容长度不对' }`。<br />如果希望字母和中文都是同样的长度，示例：`{ validator: (val) => val.length === 10, message: '内容文本长度只能是 10 个字' }` | N\nmax | Number / Boolean | - | 内置校验方法，校验值最大长度，如：max: 100 表示值最多不能超过 100 个字符，中文表示 2 个字符，英文为 1 个字符。示例：`{ max: 10, message: '内容超出' }`。<br />如果希望字母和中文都是同样的长度，示例：`{ validator: (val) => val.length <= 10, message: '内容文本长度不能超过 10 个字' }`<br />如果数据类型数字（Number），则自动变为数字大小的比对 | N\nmessage | String | - | 校验未通过时呈现的错误信息，值为空则不显示 | N\nmin | Number / Boolean | - | 内置校验方法，校验值最小长度，如：min: 10 表示值最多不能少于 10 个字符，中文表示 2 个字符，英文为 1 个字符。示例：`{ min: 10, message: '内容长度不够' }`。<br />如果希望字母和中文都是同样的长度，示例：`{ validator: (val) => val.length >= 10, message: '内容文本长度至少为 10 个字' }`。<br />如果数据类型数字（Number），则自动变为数字大小的比对 | N\nnumber | Boolean | - | 内置校验方法，校验值是否为数字（1.2 、 1e5  都算数字），示例：`{ number: true, message: '请输入数字' }` | N\npattern | Object | - | 内置校验方法，校验值是否符合正则表达式匹配结果，示例：`{ pattern: /@qq.com/, message: '请输入 QQ 邮箱' }`。TS 类型：`RegExp` | N\nrequired | Boolean | - | 内置校验方法，校验值是否已经填写。该值为 true，默认显示必填标记，可通过设置 `requiredMark: false` 隐藏必填标记 | N\ntelnumber | Boolean | - | 内置校验方法，校验值是否为手机号码，校验正则为 `/^1[3-9]\\d{9}$/`，示例：`{ telnumber: true, message: '请输入正确的手机号码' }` | N\ntrigger | String | change | 校验触发方式。TS 类型：`ValidateTriggerType` | N\ntype | String | error | 校验未通过时呈现的错误信息类型，有 告警信息提示 和 错误信息提示 等两种。可选项：error/warning | N\nurl | Boolean / Object | - | 内置校验方法，校验值是否为网络链接地址，[参数文档](https://github.com/validatorjs/validator.js)，示例：`{ url: { protocols: ['http','https','ftp'] }, message: '请输入正确的 Url 地址' }`。TS 类型：`boolean \\| IsURLOptions` `import { IsURLOptions } from 'validator/es/lib/isURL'`。[详细类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/form/type.ts) | N\nvalidator | Function | - | 自定义校验规则，示例：`{ validator: (val) => val.length > 0, message: '请输入内容'}`。TS 类型：`CustomValidator` `type CustomValidator = (val: ValueType) => CustomValidateResolveType \\| Promise<CustomValidateResolveType>` `type CustomValidateResolveType = boolean \\| CustomValidateObj` `interface CustomValidateObj { result: boolean; message: string; type?: 'error' \\| 'warning' \\| 'success' }` `type ValueType = any`。[详细类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/form/type.ts) | N\nwhitespace | Boolean | - | 内置校验方法，校验值是否为空格。示例：`{ whitespace: true, message: '值不能为空' }` | N\n\n### FormErrorMessage\n\n名称 | 类型 | 默认值 | 描述 | 必传\n-- | -- | -- | -- | --\nboolean | String | - | 布尔类型校验不通过时的表单项显示文案，全局配置默认是：`'${name}数据类型必须是布尔类型'` | N\ndate | String | - | 日期校验规则不通过时的表单项显示文案，全局配置默认是：`'请输入正确的${name}'` | N\nenum | String | - | 枚举值校验规则不通过时的表单项显示文案，全局配置默认是：`${name}只能是${validate}等` | N\nidcard | String | - | 身份证号码校验不通过时的表单项显示文案，全局配置默认是：`'请输入正确的${name}'` | N\nlen | String | - | 值长度校验不通过时的表单项显示文案，全局配置默认是：`'${name}字符长度必须是 ${validate}'` | N\nmax | String | - | 值的长度太长或值本身太大时，校验不通过的表单项显示文案，全局配置默认是：`'${name}字符长度不能超过 ${validate} 个字符，一个中文等于两个字符'` | N\nmin | String | - | 值的长度太短或值本身太小时，校验不通过的表单项显示文案，全局配置默认是：`'${name}字符长度不能少于 ${validate} 个字符，一个中文等于两个字符'` | N\nnumber | String | - | 数字类型校验不通过时的表单项显示文案，全局配置默认是：`'${name}必须是数字'` | N\npattern | String | - | 正则表达式校验不通过时的表单项显示文案，全局配置默认是：`'请输入正确的${name}'` | N\nrequired | String | - | 没有填写必填项时的表单项显示文案，全局配置默认是：`'${name}必填'` | N\ntelnumber | String | - | 手机号号码校验不通过时的表单项显示文案，全局配置默认是：`'请输入正确的${name}'` | N\nurl | String | - | 链接校验规则不通过时的表单项显示文案，全局配置默认是：`'请输入正确的${name}'` | N\nvalidator | String | - | 自定义校验规则校验不通过时的表单项显示文案，全局配置默认是：'${name}不符合要求' | N\nwhitespace | String | - | 值为空格校验不通过时表单项显示文案，全局配置默认是：`'${name}不能为空` | N\n"
  },
  {
    "name": "grid",
    "propsData": ":: BASE_DOC ::\n\n## API\n### Row Props\n\n名称 | 类型 | 默认值 | 说明 | 必传\n-- | -- | -- | -- | --\nalign | String | top | 纵向对齐方式，CSS 属性 `align-items` 值。其中 `top` 和 `start` 等效；`middle` 和 `center` 等效；`bottom` 和 `end` 等效。可选项：start/end/center/stretch/baseline/top/middle/bottom | N\ngutter | Number / Object / Array | 0 | 栅格间隔，示例：`{ xs: 8, sm: 16, md: 24, lg: 32, xl: 32, xxl: 40 }`。当数据类型为 Number 和 Object 时，用于指定横向间隔。当数据类型为数组时，第一个参数为横向间隔，第二个参数为纵向间隔， [水平间隔, 垂直间隔]。TS 类型：`number \\|  GutterObject \\| Array<GutterObject \\| number>` `interface GutterObject { xs: number; sm: number; md: number; lg: number, xl: number; xxl: number; } `。[详细类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/grid/type.ts) | N\njustify | String | start | flex 布局下的水平排列方式。可选项：start/end/center/space-around/space-between | N\ntag | String | div | 自定义元素标签 | N\n\n### Col Props\n\n名称 | 类型 | 默认值 | 说明 | 必传\n-- | -- | -- | -- | --\nflex | String / Number | - | flex 布局填充。CSS 属性 flex 值。示例：2 / 3 / '100px' / 'auto' / '1 1 200px' | N\nlg | Number / Object | - | ≥1200px 响应式栅格，可为栅格数或一个包含其他属性的对象（小尺寸电脑）。TS 类型：`number \\| BaseColProps` | N\nmd | Number / Object | - | ≥992px 响应式栅格，可为栅格数或一个包含其他属性的对象（超小尺寸电脑）。TS 类型：`number \\| BaseColProps` | N\noffset | Number | 0 | 栅格左侧的间隔格数，间隔内不可以有栅格 | N\norder | Number | 0 | 栅格顺序，flex 布局模式下有效 | N\npull | Number | 0 | 栅格向左移动格数 | N\npush | Number | 0 | 栅格向右移动格数 | N\nsm | Number / Object | - | ≥768px 响应式栅格，可为栅格数或一个包含其他属性的对象（平板）。TS 类型：`number \\| BaseColProps` | N\nspan | Number | - | 栅格占位格数，为 0 时相当于 display: none | N\ntag | String | div | 自定义元素标签 | N\nxl | Number / Object | - | ≥1400px 响应式栅格，可为栅格数或一个包含其他属性的对象（中尺寸电脑）。TS 类型：`number \\| BaseColProps` | N\nxs | Number / Object | - | <768px 响应式栅格，可为栅格数或一个包含其他属性的对象（手机）。TS 类型：`number \\| BaseColProps` `interface BaseColProps { offset: number; order: number; pull: number; push: number; span: number }`。[详细类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/grid/type.ts) | N\nxxl | Number / Object | - | ≥1880px 响应式栅格，可为栅格数或一个包含其他属性的对象（大尺寸电脑）。TS 类型：`number \\| BaseColProps` | N\n"
  },
  {
    "name": "guide",
    "propsData": ":: BASE_DOC ::\n\n## FAQ\n\n### 为什么在 Guide 中无法使用样式穿透？\n\n`Guide` 组件在 `1.0.8` 之后使用 `Vue3` 的 [Teleport](https://cn.vuejs.org/guide/built-ins/teleport.html) 重构了元素挂载方式，因此 `:deep()` 深度选择器无法作用于 [Teleport](https://cn.vuejs.org/guide/built-ins/teleport.html) 包裹的元素。\n\n如果必须要进行样式替换，可以采用以下几种方案。\n\n方案一：单独创建一个不使用`scoped`的`style`标签\n```html\n<style>\n.test .t-radio-button__label {\n  color: red;\n}\n</style>\n```\n方案二：使用 `:global` 伪类来实现相同效果，比起单独创建一个`style`更加简洁明了。\n```html\n<style scoped>\n.abc{\n  color: red;\n}\n:global(.test .t-radio-button__label) {\n  color: red;\n}\n</style>\n```\n\n## API\n### Guide Props\n\n名称 | 类型 | 默认值 | 说明 | 必传\n-- | -- | -- | -- | --\ncounter | Slot / Function | - | 用于自定义渲染计数部分。TS 类型：`TNode<{ current: number; total: number }>`。[通用类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/common.ts) | N\ncurrent | Number | - | 当前步骤，即整个引导的进度。-1 则不展示，用于需要中断展示的场景。支持语法糖 `v-model` 或 `v-model:current` | N\ndefaultCurrent | Number | - | 当前步骤，即整个引导的进度。-1 则不展示，用于需要中断展示的场景。非受控属性 | N\nfinishButtonProps | Object | - | 透传 完成 的全部属性，示例：`{ content: '完成', theme: 'primary' }`。TS 类型：`ButtonProps` | N\nhideCounter | Boolean | false | 是否隐藏计数 | N\nhidePrev | Boolean | false | 是否隐藏上一步按钮 | N\nhideSkip | Boolean | false | 是否隐藏跳过按钮 | N\nhighlightPadding | Number | 8 | 高亮框的内边距 | N\nmode | String | popup | 引导框的类型。可选项：popup/dialog | N\nnextButtonProps | Object | - | 透传 下一步按钮 的全部属性，示例：{ content: '下一步', theme: 'primary' }。TS 类型：`ButtonProps`，[Button API Documents](./button?tab=api)。[详细类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/guide/type.ts) | N\nprevButtonProps | Object | - | 透传 上一步按钮 的全部属性，示例：{ content: '上一步', theme: 'default' }。TS 类型：`ButtonProps` | N\nshowOverlay | Boolean | true | 是否出现遮罩层 | N\nskipButtonProps | Object | - | 透传 跳过按钮 的全部属性，{ content: '跳过', theme: 'default' }。TS 类型：`ButtonProps` | N\nsteps | Array | - | 用于定义每个步骤的内容，包括高亮的节点、相对位置和具体的文案内容等。TS 类型：`Array<GuideStep>` | N\nzIndex | Number | 999999 | 提示框的层级 | N\nonChange | Function |  | TS 类型：`(current: number, context?: { e: MouseEvent,  total: number }) => void`<br/>当前步骤发生变化时触发 | N\nonFinish | Function |  | TS 类型：`(context: { e: MouseEvent, current: number, total: number  }) => void`<br/>点击完成按钮时触发 | N\nonNextStepClick | Function |  | TS 类型：`(context: { e: MouseEvent, next: number, current: number, total: number  }) => void`<br/>点击下一步时触发 | N\nonPrevStepClick | Function |  | TS 类型：`(context: { e: MouseEvent, prev: number, current: number, total: number  }) => void`<br/>点击上一步时触发 | N\nonSkip | Function |  | TS 类型：`(context: { e: MouseEvent, current: number, total: number  }) => void`<br/>点击跳过按钮时触发 | N\n\n### Guide Events\n\n名称 | 参数 | 描述\n-- | -- | --\nchange | `(current: number, context?: { e: MouseEvent,  total: number })` | 当前步骤发生变化时触发\nfinish | `(context: { e: MouseEvent, current: number, total: number  })` | 点击完成按钮时触发\nnext-step-click | `(context: { e: MouseEvent, next: number, current: number, total: number  })` | 点击下一步时触发\nprev-step-click | `(context: { e: MouseEvent, prev: number, current: number, total: number  })` | 点击上一步时触发\nskip | `(context: { e: MouseEvent, current: number, total: number  })` | 点击跳过按钮时触发\n\n### GuideStep\n\n名称 | 类型 | 默认值 | 说明 | 必传\n-- | -- | -- | -- | --\nbody | String / Slot / Function | - | 当前步骤提示框的内容。TS 类型：`string \\| TNode`。[通用类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/common.ts) | N\ncontent | Slot / Function | - | 用户自定义引导弹框的内容，一旦存在，此时除 `placement`、`offset`和`element` 外，其它属性全部失效）。TS 类型：`TNode`。[通用类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/common.ts) | N\nelement | String / Function | - | 必需。高亮的节点。数据类型为 String 时，会被当作选择器处理，进行节点查询。示例：'#tdesign' 或 () => document.querySelector('#tdesign')。TS 类型：`AttachNode`。[通用类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/common.ts) | Y\nhighlightContent | Slot / Function | - | 用户自定义的高亮框 (仅当 `mode` 为 `popup` 时生效)。TS 类型：`TNode`。[通用类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/common.ts) | N\nhighlightPadding | Number | - | 高亮框的内边距 | N\nmode | String | - | 引导框的类型。可选项：popup/dialog | N\nnextButtonProps | Object | - | 用于自定义当前引导框的下一步按钮的内容。TS 类型：`ButtonProps` | N\noffset | Array | - | 【讨论确认中】相对于 placement 的偏移量，示例：[-10, 20] 或 ['10px', '8px']。TS 类型：`Array<string \\| number>` | N\nplacement | String | 'top' | 引导框相对于高亮元素出现的位置。TS 类型：`StepPopupPlacement \\| StepDialogPlacement` `type StepPopupPlacement = 'top'\\|'left'\\|'right'\\|'bottom'\\|'top-left'\\|'top-right'\\|'bottom-left'\\|'bottom-right'\\|'left-top'\\|'left-bottom'\\|'right-top'\\|'right-bottom'` `type StepDialogPlacement = 'top'\\|'center' `。[详细类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/guide/type.ts) | N\npopupProps | Object | - | 透传全部属性到 Popup 组件。`mode=popup` 时有效。TS 类型：`PopupProps`，[Popup API Documents](./popup?tab=api)。[详细类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/guide/type.ts) | N\nprevButtonProps | Object | - | 用于自定义当前引导框的上一步按钮的内容。TS 类型：`ButtonProps` | N\nshowOverlay | Boolean | true | 是否出现遮罩层 | N\nskipButtonProps | Object | - | 用于自定义当前步骤引导框的跳过按钮的内容。TS 类型：`ButtonProps` | N\nstepOverlayClass | String | - | 覆盖引导框的类名 | N\ntitle | String | - | 当前步骤的标题内容 | N\n"
  },
  {
    "name": "icon",
    "propsData": ":: BASE_DOC ::\n\n### 安装独立 Icon 包\n\n图标相对其他基础组件较为独立，所以作为一个独立的 `npm` 包做发布管理。如果项目中直接使用，请安装 `tdesign-icons-vue-next`。 同时 `tdesign-vue-next` 也内置了 `icon`, 支持直接通过 `t-icon` 来使用。\n图标库中共包含超过 **25** 类，**2100+** 个图标，推荐您按需引用图标，减少产物的体积。\n\n### 按需引入使用图标\n\n图标可以按需引入单个 SVG 图标。组件开发内部使用到 Icon 时，均按需引入 SVG 图标。\n\n{{ single }}\n### 全量引入使用图标\n\n图标尺寸单位支持多种， 'small', 'medium', 'large', '35px', '3em' 等。\n图标颜色使用 CSS 控制，如：style=\"color: red\"，或者 style=\"fill: red\"。\n点击右侧导航「全部图标」即可查看组件库全部图标。\n\n{{ base }}\n\n### iconfont 图标\n\nTDesign 支持通过使用 Iconfont 图标，使用时需要单独引入 Iconfont 图标组件。\n\n{{ iconfont }}\n### SVG 高级用法\n\n可以传入 url 加入新的 SVG 图标。\n\n引入新的图标 Url 之后，图标名称必须写全称，以作区分，如：`\"name='home'\"` 需要写成 `\"name='t-icon-home'\"`。\n\n组件会引入默认的 SVG 图标，如果希望禁止组件加载默认的 SVG 图标，将 `loadDefaultIcons` 置为 false 即可。\n\n{{ enhanced }}\n\n\n\n### iconfont 高级用法\n\n可以传入 url 加入新的 iconfont 图标。\n\n引入新的图标 Url 之后，图标名称必须写全称，以作区分，如：`\"name='home'\"` 需要写成 `\"name='t-icon-home'\"`。\n\n组件会引入默认的 iconfont 图标，如果希望禁止组件加载默认的 iconfont 图标，将 `loadDefaultIcons` 置为 false 即可。\n\n{{ iconfont-enhanced }}\n\n### 图标选择器\n\n在一些业务场景中，存在需要选择图标的情况，可以配合`Select`组件来实现`图标选择器`。\n\n{{ icon-select }}\n\n### FAQ\n\n#### 如何获取全部图标的名称列表？\n\n可以通过`import { manifest } from 'tdesign-icons-vue-next'` 获取全部图标的名称列表。\n\n### t-icon、iconfont和icon使用时都会发起网络请求，我的项目是无网络场景，如何使用？\n\n首先明确`t-icon`、`iconfont`和`icon`三者的关系。如上面的示例所示，`iconfont`和`icon`都是从icon独立包中引入，而`t-icon`只是为了方便用户习惯，对`icon`的一个简单封装。\n\n`iconfont`需要加载图标的字体资源，而`icon`需要加载图标的svgsprite资源，这些资源都是相对来说比较大的，所以没有直接放在包里（当然不排除未来会做改动），所以会发起网络请求。\n\n所以如果你的项目是**无网络场景**，请使用**按需加载**的图标，如`<t-icon name=\"add\" />`请改为`<AddIcon />`。\n\n### 全部图标\n\n<div style=\"background: #ecf2fe; display: flex; align-items: center; line-height: 20px; padding: 14px 24px; border-radius: 3px; color: #555a65;margin:16px 0\">\n  <svg fill=\"none\" viewBox=\"0 0 16 16\" width=\"16px\" height=\"16px\" style=\"margin-right: 5px\">\n    <path fill=\"#0052d9\" d=\"M8 15A7 7 0 108 1a7 7 0 000 14zM7.4 4h1.2v1.2H7.4V4zm.1 2.5h1V12h-1V6.5z\" fillOpacity=\"0.9\"></path>\n  </svg>\n <p style=\"flex: 1\">大部分图标在 0.3.0 版本后的图标库新增，如果发现图标引入后无法正常展示，请检查安装的图标库`tdesign-icons-vue-next`的版本。支持中文英文搜索，如果觉得可以再增加其他关键词提示，欢迎到 <a href=\"https://github.com/Tencent/tdesign-icons/blob/develop/packages/view/src/manifest.js\" target=\"_blank\" > 图标仓库</a> 提交PR，帮我们一起补充。\n </p>\n</div>\n\n<td-icons-view />\n\n## API\n### IconSVG Props\n\n名称 | 类型 | 默认值 | 说明 | 必传\n-- | -- | -- | -- | --\nloadDefaultIcons | Boolean | true | 是否加载组件库内置图标 | N\nname | String | - | 必需。图标名称 | Y\nsize | String | undefined | 图标尺寸，支持 'small', 'medium', 'large'，'35px', '3em' 等 | N\nstyle | String | - | HTML 原生属性。可用于设置图标颜色，如：style=\\\"color: red\\\" | N\nurl | String / Array | - | 图标地址，地址内容参考[组件内部默认加载图标](https://tdesign.gtimg.com/icon/web/index.js)。TS 类型：`string \\| Array<string>` | N\nonClick | Function |  | TS 类型：`(context: { e: MouseEvent }) => void`<br/>点击时触发 | N\n\n### IconSVG Events\n\n名称 | 参数 | 描述\n-- | -- | --\nclick | `(context: { e: MouseEvent })` | 点击时触发\n\n### Iconfont Props\n\n名称 | 类型 | 默认值 | 说明 | 必传\n-- | -- | -- | -- | --\nloadDefaultIcons | Boolean | true | 是否加载组件库内置图标 | N\nname | String | - | 必需。图标名称 | Y\nsize | String | undefined | 图标尺寸，支持 'small', 'medium', 'large'，'35px', '3em' 等 | N\nstyle | String | - | HTML 原生属性。可用于设置图标颜色，如：style=\\\"color: red\\\" | N\ntag | String | i | 图标 DOM 元素，可选值：i/span/div/... | N\nurl | String / Array | - | 图标地址，地址内容参考[组件内部默认加载图标](https://tdesign.gtimg.com/icon/web/index.css)。也可以在 index.html 中引入图标地址。TS 类型：`string \\| Array<string>` | N\nonClick | Function |  | TS 类型：`(context: { e: MouseEvent }) => void`<br/>点击时触发 | N\n\n### Iconfont Events\n\n名称 | 参数 | 描述\n-- | -- | --\nclick | `(context: { e: MouseEvent })` | 点击时触发\n"
  },
  {
    "name": "image",
    "propsData": ":: BASE_DOC ::\n\n## API\n### Image Props\n\n名称 | 类型 | 默认值 | 说明 | 必传\n-- | -- | -- | -- | --\nalt | String | - | 图片描述 | N\nerror | String / Slot / Function | - | 自定义图片加载失败状态下的显示内容。TS 类型：`string \\| TNode`。[通用类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/common.ts) | N\nfallback | String | - | 图片加载失败时，显示当前链接设置的图片地址。如果要使用组件图标或完全自定义加载失败时显示的内容，请更为使用 `error` | N\nfit | String | fill | 图片填充模式。可选项：contain/cover/fill/none/scale-down | N\ngallery | Boolean | false | 是否展示为图集样式 | N\nlazy | Boolean | false | 是否开启图片懒加载 | N\nloading | String / Slot / Function | - | 自定义加载中状态的图片内容，如：“加载中”。TS 类型：`string \\| TNode`。[通用类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/common.ts) | N\noverlayContent | String / Slot / Function | - | 图片上方的浮层内容。TS 类型：`string \\| TNode`。[通用类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/common.ts) | N\noverlayTrigger | String | always | 浮层 `overlayContent` 出现的时机。可选项：always/hover | N\nplaceholder | String / Slot / Function | - | 占位元素，展示层级低于 `loading` `error` 和图片本身，值类型为字符串时表示占位图片地址。TS 类型：`string \\| TNode`。[通用类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/common.ts) | N\nposition | String | center | 等同于原生的 object-position 属性，可选值为 top right bottom left 或 string，可以自定义任何单位，px 或者 百分比 | N\nreferrerpolicy | String | strict-origin-when-cross-origin | `<img>` 标签的原生属性，[MDN 定义](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Referrer-Policy)。可选项：no-referrer/no-referrer-when-downgrade/origin/origin-when-cross-origin/same-origin/strict-origin/strict-origin-when-cross-origin/unsafe-url | N\nshape | String | square | 图片圆角类型。可选项：circle/round/square | N\nsrc | String / Object | - | 用于显示图片的链接或原始图片文件对象。TS 类型：`string \\| File` | N\nsrcset | Object | - | 图片链接集合，用于支持特殊格式的图片，如 `.avif` 和 `.webp`。会优先加载 `srcset` 中的图片格式，浏览器不支持的情况下，加载 `src` 设置的图片地址。TS 类型：`ImageSrcset` `interface ImageSrcset { 'image/avif': string; 'image/webp': string; }`。[详细类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/image/type.ts) | N\nonError | Function |  | TS 类型：`(context: { e: ImageEvent }) => void`<br/>图片加载失败时触发 | N\nonLoad | Function |  | TS 类型：`(context: { e: ImageEvent }) => void`<br/>图片加载完成时触发 | N\n\n### Image Events\n\n名称 | 参数 | 描述\n-- | -- | --\nerror | `(context: { e: ImageEvent })` | 图片加载失败时触发\nload | `(context: { e: ImageEvent })` | 图片加载完成时触发\n"
  },
  {
    "name": "image-viewer",
    "propsData": ":: BASE_DOC ::\n\n## API\n\n### ImageViewer Props\n\n名称 | 类型 | 默认值 | 描述 | 必传\n-- | -- | -- | -- | --\nattach | String / Function | 'body' | 指定挂载节点。数据类型为 String 时，会被当作选择器处理，进行节点查询。示例：'body' 或 () => document.body。TS 类型：`AttachNode`。[通用类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/common.ts) | N\ncloseBtn | Boolean / Slot / Function | true | 是否展示关闭按钮，值为 `true` 显示默认关闭按钮；值为 `false` 则不显示关闭按钮；也可以完全自定义关闭按钮。TS 类型：`boolean \\| TNode`。[通用类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/common.ts) | N\ncloseOnEscKeydown | Boolean | true | 按下 ESC 时是否触发图片预览器关闭事件 | N\ncloseOnOverlay | Boolean | - | 是否在点击遮罩层时，触发预览关闭 | N\ndraggable | Boolean | undefined | 是否允许拖拽调整位置。`mode=modal` 时，默认不允许拖拽；`mode=modeless` 时，默认允许拖拽 | N\nimageReferrerpolicy | String | - | 图片预览中的 `<img>` 标签的原生属性，[MDN 定义](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Referrer-Policy)。可选项：no-referrer/no-referrer-when-downgrade/origin/origin-when-cross-origin/same-origin/strict-origin/strict-origin-when-cross-origin/unsafe-url | N\nimageScale | Object | - |  图片缩放相关配置。`imageScale.max` 缩放的最大比例；`imageScale.min` 缩放的最小比例；`imageScale.step` 缩放的步长速度; `imageScale.defaultScale` 默认的缩放比例。TS 类型：`ImageScale` `interface ImageScale { max: number; min: number; step: number; defaultScale?: number; }`。[详细类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/image-viewer/type.ts) | N\nimages | Array | [] | 图片数组。`mainImage` 表示主图，必传；`thumbnail` 表示缩略图，如果不存在，则使用主图显示；`download` 是否允许下载图片，默认允许下载。示例: `['img_url_1', 'img_url_2']`，`[{ thumbnail: 'small_image_url', mainImage: 'big_image_url', download: false }]`。TS 类型：`Array<string \\| File \\| ImageInfo>` `interface ImageInfo { mainImage: string \\| File; thumbnail?: string \\| File; download?: boolean; isSvg?: boolean }`。[详细类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/image-viewer/type.ts) | N\nindex | Number | 0 | 当前预览图片所在的下标。支持语法糖 `v-model:index` | N\ndefaultIndex | Number | 0 | 当前预览图片所在的下标。非受控属性 | N\nmode | String | modal | 模态预览（modal）和非模态预览（modeless)。可选项：modal/modeless | N\nnavigationArrow | Boolean / Slot / Function | true | 切换预览图片的左图标，可自定义。TS 类型：`boolean \\| TNode`。[通用类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/common.ts) | N\nshowOverlay | Boolean | undefined | 是否显示遮罩层。`mode=modal` 时，默认显示；`mode=modeless` 时，默认不显示 | N\ntitle | String / Slot / Function | - | 预览标题。TS 类型：`string \\| TNode`。[通用类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/common.ts) | N\ntrigger | String / Slot / Function | - | 触发图片预览的元素，可能是一个预览按钮，可能是一张缩略图，完全自定义。TS 类型：`TNode \\| TNode<{ open: () => void }>`。[通用类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/common.ts) | N\nviewerScale | Object | - | 限制预览器缩放的最小宽度和最小高度，仅 `mode=modeless` 时有效。TS 类型：`ImageViewerScale` `interface ImageViewerScale { minWidth: number; minHeight: number }`。[详细类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/image-viewer/type.ts) | N\nvisible | Boolean | false | 隐藏/显示预览。支持语法糖 `v-model` 或 `v-model:visible` | N\ndefaultVisible | Boolean | false | 隐藏/显示预览。非受控属性 | N\nzIndex | Number | - | 层级，默认为 2000 | N\nonClose | Function |  | TS 类型：`(context: { trigger: 'close-btn' \\| 'overlay' \\| 'esc'; e: MouseEvent \\| KeyboardEvent }) => void`<br/>关闭时触发，事件参数包含触发关闭的来源：关闭按钮、遮罩层、ESC 键 | N\nonDownload | Function |  | TS 类型：`(url: string) => void`<br/>自定义预览图片下载操作，url为图片链接 | N\nonIndexChange | Function |  | TS 类型：`(index: number, context: { trigger: 'prev' \\| 'next' \\| 'current' }) => void`<br/>预览图片切换时触发，`context.prev` 切换到上一张图片，`context.next` 切换到下一张图片 | N\n\n### ImageViewer Events\n\n名称 | 参数 | 描述\n-- | -- | --\nclose | `(context: { trigger: 'close-btn' \\| 'overlay' \\| 'esc'; e: MouseEvent \\| KeyboardEvent })` | 关闭时触发，事件参数包含触发关闭的来源：关闭按钮、遮罩层、ESC 键\ndownload | `(url: string \\| File)` | 自定义预览图片下载操作，url为图片链接\nindex-change | `(index: number, context: { trigger: 'prev' \\| 'next' \\| 'current' })` | 预览图片切换时触发，`context.prev` 切换到上一张图片，`context.next` 切换到下一张图片\n"
  },
  {
    "name": "input",
    "propsData": ":: BASE_DOC ::\n\n## API\n\n### Input Props\n\n名称 | 类型 | 默认值 | 描述 | 必传\n-- | -- | -- | -- | --\nalign | String | left | 文本内容位置，居左/居中/居右。可选项：left/center/right | N\nallowInputOverMax | Boolean | false | 超出 `maxlength` 或 `maxcharacter` 之后是否允许继续输入 | N\nautoWidth | Boolean | false | 宽度随内容自适应 | N\nautocomplete | String | undefined | 是否开启自动填充功能，HTML5 原生属性，[点击查看详情](https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/autocomplete) | N\nautofocus | Boolean | false | 自动聚焦 | N\nborderless | Boolean | false | 是否开启无边框模式 | N\nclearable | Boolean | false | 是否可清空 | N\ndisabled | Boolean | undefined | 是否禁用输入框 | N\nformat | Function | - | 指定输入框展示值的格式。注意 `type=number` 时请勿使用，此功能建议更为使用 `InputNumber` 组件。TS 类型：`InputFormatType` `type InputFormatType = (value: string) => string`。[详细类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/input/type.ts) | N\ninputClass | String / Object / Array | - | t-input 同级类名，示例：'name1 name2 name3' 或 `['name1', 'name2']` 或 `[{ 'name1': true }]`。TS 类型：`ClassName`。[通用类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/common.ts) | N\nlabel | String / Slot / Function | - | 左侧文本。TS 类型：`string \\| TNode`。[通用类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/common.ts) | N\nmaxcharacter | Number | - | 用户最多可以输入的字符个数，一个中文汉字表示两个字符长度。`maxcharacter` 和 `maxlength` 二选一使用 | N\nmaxlength | String / Number | - | 用户最多可以输入的文本长度，一个中文等于一个计数长度。默认为空，不限制输入长度。`maxcharacter` 和 `maxlength` 二选一使用 | N\nname | String | - | 名称 | N\nplaceholder | String | undefined | 占位符 | N\nprefixIcon | Slot / Function | - | 组件前置图标。TS 类型：`TNode`。[通用类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/common.ts) | N\nreadonly | Boolean | undefined | 只读状态 | N\nshowClearIconOnEmpty | Boolean | false | 输入框内容为空时，悬浮状态是否显示清空按钮，默认不显示 | N\nshowLimitNumber | Boolean | false | 是否在输入框右侧显示字数统计 | N\nsize | String | medium | 输入框尺寸。可选项：small/medium/large。TS 类型：`SizeEnum`。[通用类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/common.ts) | N\nspellCheck | Boolean | false | 是否开启拼写检查，HTML5 原生属性，[点击查看详情](https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/spellcheck) | N\nstatus | String | default | 输入框状态。可选项：default/success/warning/error | N\nsuffix | String / Slot / Function | - | 后置图标前的后置内容。TS 类型：`string \\| TNode`。[通用类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/common.ts) | N\nsuffixIcon | Slot / Function | - | 组件后置图标。TS 类型：`TNode`。[通用类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/common.ts) | N\ntips | String / Slot / Function | - | 输入框下方提示文本，会根据不同的 `status` 呈现不同的样式。TS 类型：`string \\| TNode`。[通用类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/common.ts) | N\ntype | String | text | 输入框类型。`type=number` 仅支持最基础的数字输入功能，更多功能建议使用 `InputNumber` 组件。可选项：text/number/url/tel/password/search/submit/hidden | N\nvalue | String / Number | - | 输入框的值。支持语法糖 `v-model` 或 `v-model:value`。TS 类型：`T` `type InputValue = string \\| number`。[详细类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/input/type.ts) | N\ndefaultValue | String / Number | - | 输入框的值。非受控属性。TS 类型：`T` `type InputValue = string \\| number`。[详细类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/input/type.ts) | N\nonBlur | Function |  | TS 类型：`(value: T, context: { e: FocusEvent }) => void`<br/>失去焦点时触发 | N\nonChange | Function |  | TS 类型：`(value: T, context?: { e?: InputEvent \\| MouseEvent \\| CompositionEvent; trigger: 'input' \\| 'initial' \\| 'clear' }) => void`<br/>输入框值发生变化时触发。参数 `trigger=initial` 表示传入的数据不符合预期，组件自动处理后触发 change 告知父组件。如：初始值长度超过 `maxlength` 限制 | N\nonClear | Function |  | TS 类型：`(context: { e: MouseEvent }) => void`<br/>清空按钮点击时触发 | N\nonClick | Function |  | TS 类型：`(context: { e: MouseEvent }) => void`<br/>点击组件时触发 | N\nonCompositionend | Function |  | TS 类型：`(value: string, context: { e: CompositionEvent }) => void`<br/>中文输入结束时触发 | N\nonCompositionstart | Function |  | TS 类型：`(value: string, context: { e: CompositionEvent }) => void`<br/>中文输入开始时触发 | N\nonEnter | Function |  | TS 类型：`(value: T, context: { e: KeyboardEvent }) => void`<br/>回车键按下时触发 | N\nonFocus | Function |  | TS 类型：`(value: T, context: { e: FocusEvent }) => void`<br/>获得焦点时触发 | N\nonKeydown | Function |  | TS 类型：`(value: T, context: { e: KeyboardEvent }) => void`<br/>键盘按下时触发 | N\nonKeypress | Function |  | TS 类型：`(value: T, context: { e: KeyboardEvent }) => void`<br/>按下字符键时触发（keydown -> keypress -> keyup） | N\nonKeyup | Function |  | TS 类型：`(value: T, context: { e: KeyboardEvent }) => void`<br/>释放键盘时触发 | N\nonMouseenter | Function |  | TS 类型：`(context: { e: MouseEvent }) => void`<br/>进入输入框时触发 | N\nonMouseleave | Function |  | TS 类型：`(context: { e: MouseEvent }) => void`<br/>离开输入框时触发 | N\nonPaste | Function |  | TS 类型：`(context: { e: ClipboardEvent; pasteValue: string }) => void`<br/>粘贴事件，`pasteValue` 表示粘贴板的内容 | N\nonValidate | Function |  | TS 类型：`(context: { error?: 'exceed-maximum' \\| 'below-minimum' }) => void`<br/>字数超出限制时触发 | N\nonWheel | Function |  | TS 类型：`(context: { e: WheelEvent }) => void`<br/>输入框中滚动鼠标时触发 | N\n\n### Input Events\n\n名称 | 参数 | 描述\n-- | -- | --\nblur | `(value: T, context: { e: FocusEvent })` | 失去焦点时触发\nchange | `(value: T, context?: { e?: InputEvent \\| MouseEvent \\| CompositionEvent; trigger: 'input' \\| 'initial' \\| 'clear' })` | 输入框值发生变化时触发。参数 `trigger=initial` 表示传入的数据不符合预期，组件自动处理后触发 change 告知父组件。如：初始值长度超过 `maxlength` 限制\nclear | `(context: { e: MouseEvent })` | 清空按钮点击时触发\nclick | `(context: { e: MouseEvent })` | 点击组件时触发\ncompositionend | `(value: string, context: { e: CompositionEvent })` | 中文输入结束时触发\ncompositionstart | `(value: string, context: { e: CompositionEvent })` | 中文输入开始时触发\nenter | `(value: T, context: { e: KeyboardEvent })` | 回车键按下时触发\nfocus | `(value: T, context: { e: FocusEvent })` | 获得焦点时触发\nkeydown | `(value: T, context: { e: KeyboardEvent })` | 键盘按下时触发\nkeypress | `(value: T, context: { e: KeyboardEvent })` | 按下字符键时触发（keydown -> keypress -> keyup）\nkeyup | `(value: T, context: { e: KeyboardEvent })` | 释放键盘时触发\nmouseenter | `(context: { e: MouseEvent })` | 进入输入框时触发\nmouseleave | `(context: { e: MouseEvent })` | 离开输入框时触发\npaste | `(context: { e: ClipboardEvent; pasteValue: string })` | 粘贴事件，`pasteValue` 表示粘贴板的内容\nvalidate | `(context: { error?: 'exceed-maximum' \\| 'below-minimum' })` | 字数超出限制时触发\nwheel | `(context: { e: WheelEvent })` | 输入框中滚动鼠标时触发\n\n\n### InputGroup Props\n\n名称 | 类型 | 默认值 | 描述 | 必传\n-- | -- | -- | -- | --\nseparate | Boolean | - | 多个输入框之间是否需要间隔 | N\n"
  },
  {
    "name": "input-adornment",
    "propsData": ":: BASE_DOC ::\n\n## API\n### InputAdornment Props\n\n名称 | 类型 | 默认值 | 说明 | 必传\n-- | -- | -- | -- | --\nappend | String / Slot / Function | - | 后缀装饰。TS 类型：`string \\| TNode`。[通用类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/common.ts) | N\nprepend | String / Slot / Function | - | 前缀装饰。TS 类型：`string \\| TNode`。[通用类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/common.ts) | N\n"
  },
  {
    "name": "input-number",
    "propsData": ":: BASE_DOC ::\n\n## API\n\n### InputNumber Props\n\n名称 | 类型 | 默认值 | 描述 | 必传\n-- | -- | -- | -- | --\nalign | String | - | 文本内容位置，居左/居中/居右。可选项：left/center/right | N\nallowInputOverLimit | Boolean | true | 是否允许输入超过 `max` `min` 范围外的数字。为保障用户体验，仅在失去焦点时进行数字范围矫正。默认允许超出，数字超出范围时，输入框变红提醒 | N\nautoWidth | Boolean | false | 宽度随内容自适应 | N\ndecimalPlaces | Number / Object | undefined | [小数位数](https://en.wiktionary.org/wiki/decimal_place)。TS 类型：`InputNumberDecimalPlaces` `type InputNumberDecimalPlaces = number \\| { enableRound: boolean; places: number } `。[详细类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/input-number/type.ts) | N\ndisabled | Boolean | undefined | 禁用组件 | N\nformat | Function | - | 格式化输入框展示值。第二个事件参数 `context.fixedNumber` 表示处理过小数位数 `decimalPlaces` 的数字。TS 类型：`(value: InputNumberValue, context?: { fixedNumber?: InputNumberValue }) => InputNumberValue` | N\ninputProps | Object | - | 透传 Input 输入框组件全部属性。TS 类型：`InputProps`，[Input API Documents](./input?tab=api)。[详细类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/input-number/type.ts) | N\nlabel | String / Slot / Function | - | 左侧文本。TS 类型：`string \\| TNode`。[通用类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/common.ts) | N\nlargeNumber | Boolean | false | 是否作为大数使用。JS 支持的最大数字位数是 16 位，超过 16 位的数字需作为字符串大数处理。此时，数据类型必须保持为字符串，否则会丢失数据 | N\nmax | String / Number | Infinity | 最大值。如果是大数，请传入字符串。TS 类型：`InputNumberValue` | N\nmin | String / Number | -Infinity | 最小值。如果是大数，请传入字符串。TS 类型：`InputNumberValue` | N\nplaceholder | String | undefined | 占位符 | N\nreadonly | Boolean | undefined | 只读状态 | N\nsize | String | medium | 组件尺寸。可选项：small/medium/large | N\nstatus | String | default | 文本框状态。可选项：default/success/warning/error | N\nstep | String / Number | 1 | 数值改变步数，可以是小数。如果是大数，请保证数据类型为字符串。TS 类型：`InputNumberValue` | N\nsuffix | String / Slot / Function | - | 后置内容。TS 类型：`string \\| TNode`。[通用类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/common.ts) | N\ntheme | String | row | 按钮布局。可选项：column/row/normal | N\ntips | String / Slot / Function | - | 输入框下方提示文本，会根据不同的 `status` 呈现不同的样式。TS 类型：`string \\| TNode`。[通用类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/common.ts) | N\nvalue | String / Number | - | 数字输入框的值。当值为 '' 时，输入框显示为空。支持语法糖 `v-model` 或 `v-model:value`。TS 类型：`T` `type InputNumberValue = number \\| string`。[详细类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/input-number/type.ts) | N\ndefaultValue | String / Number | - | 数字输入框的值。当值为 '' 时，输入框显示为空。非受控属性。TS 类型：`T` `type InputNumberValue = number \\| string`。[详细类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/input-number/type.ts) | N\nonBlur | Function |  | TS 类型：`(value: InputNumberValue, context: { e: FocusEvent }) => void`<br/>失去焦点时触发 | N\nonChange | Function |  | TS 类型：`(value: T, context: ChangeContext) => void`<br/>值变化时触发，`type` 表示触发本次变化的来源。[详细类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/input-number/type.ts)。<br/>`interface ChangeContext { type: ChangeSource; e: InputEvent \\| MouseEvent \\| FocusEvent \\| KeyboardEvent \\| CompositionEvent }`<br/><br/>`type ChangeSource = 'add' \\| 'reduce' \\| 'input' \\| 'blur' \\| 'enter' \\| 'clear' \\| 'props'`<br/> | N\nonEnter | Function |  | TS 类型：`(value: InputNumberValue, context: { e: KeyboardEvent }) => void`<br/>回车键按下时触发 | N\nonFocus | Function |  | TS 类型：`(value: InputNumberValue, context: { e: FocusEvent }) => void`<br/>获取焦点时触发 | N\nonKeydown | Function |  | TS 类型：`(value: InputNumberValue, context: { e: KeyboardEvent }) => void`<br/>键盘按下时触发 | N\nonKeypress | Function |  | TS 类型：`(value: InputNumberValue, context: { e: KeyboardEvent }) => void`<br/>按下字符键时触发（keydown -> keypress -> keyup） | N\nonKeyup | Function |  | TS 类型：`(value: InputNumberValue, context: { e: KeyboardEvent }) => void`<br/>释放键盘时触发 | N\nonValidate | Function |  | TS 类型：`(context: { error?: 'exceed-maximum' \\| 'below-minimum' }) => void`<br/>最大值或最小值校验结束后触发，`exceed-maximum` 表示超出最大值，`below-minimum` 表示小于最小值 | N\n\n### InputNumber Events\n\n名称 | 参数 | 描述\n-- | -- | --\nblur | `(value: InputNumberValue, context: { e: FocusEvent })` | 失去焦点时触发\nchange | `(value: T, context: ChangeContext)` | 值变化时触发，`type` 表示触发本次变化的来源。[详细类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/input-number/type.ts)。<br/>`interface ChangeContext { type: ChangeSource; e: InputEvent \\| MouseEvent \\| FocusEvent \\| KeyboardEvent \\| CompositionEvent }`<br/><br/>`type ChangeSource = 'add' \\| 'reduce' \\| 'input' \\| 'blur' \\| 'enter' \\| 'clear' \\| 'props'`<br/>\nenter | `(value: InputNumberValue, context: { e: KeyboardEvent })` | 回车键按下时触发\nfocus | `(value: InputNumberValue, context: { e: FocusEvent })` | 获取焦点时触发\nkeydown | `(value: InputNumberValue, context: { e: KeyboardEvent })` | 键盘按下时触发\nkeypress | `(value: InputNumberValue, context: { e: KeyboardEvent })` | 按下字符键时触发（keydown -> keypress -> keyup）\nkeyup | `(value: InputNumberValue, context: { e: KeyboardEvent })` | 释放键盘时触发\nvalidate | `(context: { error?: 'exceed-maximum' \\| 'below-minimum' })` | 最大值或最小值校验结束后触发，`exceed-maximum` 表示超出最大值，`below-minimum` 表示小于最小值\n"
  },
  {
    "name": "layout",
    "propsData": ":: BASE_DOC ::\n\n## API\n\n### Layout Props\n\n名称 | 类型 | 默认值 | 描述 | 必传\n-- | -- | -- | -- | --\ndirection | String | - | 【开发中】布局方向。可选项：vertical/horizontal | N\n\n\n### Header Props\n\n名称 | 类型 | 默认值 | 描述 | 必传\n-- | -- | -- | -- | --\nheight | String | - | 顶栏高度。样式表（class）中定义的默认高度为：64px | N\n\n\n### Aside Props\n\n名称 | 类型 | 默认值 | 描述 | 必传\n-- | -- | -- | -- | --\nwidth | String | - | 侧边栏宽度。样式表（class）中定义的默认宽度为：232px | N\n\n\n### Content Props\n\n名称 | 类型 | 默认值 | 描述 | 必传\n-- | -- | -- | -- | --\ncontent | String / Slot / Function | - | 内容。TS 类型：`string \\| TNode`。[通用类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/common.ts) | N\ndefault | String / Slot / Function | - | 内容，同 content。TS 类型：`string \\| TNode`。[通用类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/common.ts) | N\n\n\n### Footer Props\n\n名称 | 类型 | 默认值 | 描述 | 必传\n-- | -- | -- | -- | --\nheight | String | - | 底栏高度。样式表（class）中定义的默认高度为：24px | N\n"
  },
  {
    "name": "link",
    "propsData": ":: BASE_DOC ::\n\n## API\n### Link Props\n\n名称 | 类型 | 默认值 | 说明 | 必传\n-- | -- | -- | -- | --\ncontent | String / Slot / Function | - | 链接内容。TS 类型：`string \\| TNode`。[通用类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/common.ts) | N\ndefault | String / Slot / Function | - | 链接内容，同 content。TS 类型：`string \\| TNode`。[通用类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/common.ts) | N\ndisabled | Boolean | undefined | 禁用链接。优先级：Link.disabled > Form.disabled | N\ndownload | String / Boolean | - | 使得浏览器将链接的 URL 视为可下载资源 | N\nhover | String | underline | 链接悬浮态样式，有 文本颜色变化、添加下划线等 2 种方法。可选项：color/underline | N\nhref | String | - | 跳转链接 | N\nprefixIcon | Slot / Function | - | 前置图标。TS 类型：`TNode`。[通用类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/common.ts) | N\nsize | String | medium | 尺寸。可选项：small/medium/large。TS 类型：`SizeEnum`。[通用类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/common.ts) | N\nsuffixIcon | Slot / Function | - | 后置图标。TS 类型：`TNode`。[通用类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/common.ts) | N\ntarget | String | - | 跳转方式，如：当前页面打开、新页面打开等，同 HTML 属性 target 含义相同 | N\ntheme | String | default | 组件风格，依次为默认色、品牌色、危险色、警告色、成功色。可选项：default/primary/danger/warning/success | N\nunderline | Boolean | - | 普通状态是否显示链接下划线 | N\nonClick | Function |  | TS 类型：`(e: MouseEvent) => void`<br/>点击事件，禁用状态不会触发点击事件 | N\n\n### Link Events\n\n名称 | 参数 | 描述\n-- | -- | --\nclick | `(e: MouseEvent)` | 点击事件，禁用状态不会触发点击事件\n"
  },
  {
    "name": "list",
    "propsData": ":: BASE_DOC ::\n\n## API\n### List Props\n\n名称 | 类型 | 默认值 | 说明 | 必传\n-- | -- | -- | -- | --\nasyncLoading | String / Slot / Function | - | 自定义加载中。值为空不显示加载中，值为 'loading' 显示加载中状态，值为 'load-more' 显示加载更多状态。值类型为函数，则表示自定义加载状态呈现内容。TS 类型：`string \\| TNode`。[通用类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/common.ts) | N\nfooter | String / Slot / Function | - | 底部。TS 类型：`string \\| TNode`。[通用类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/common.ts) | N\nheader | String / Slot / Function | - | 头部。TS 类型：`string \\| TNode`。[通用类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/common.ts) | N\nlayout | String | horizontal | 排列方式（待设计稿输出）。可选项：horizontal/vertical | N\nscroll | Object | - | 懒加载和虚拟滚动。为保证组件收益最大化，当数据量小于阈值 `scroll.threshold` 时，无论虚拟滚动的配置是否存在，组件内部都不会开启虚拟滚动，`scroll.threshold` 默认为 `100`。TS 类型：`TScroll`。[通用类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/common.ts) | N\nsize | String | medium | 尺寸。可选项：small/medium/large | N\nsplit | Boolean | false | 是否展示分割线 | N\nstripe | Boolean | false | 是否展示斑马纹 | N\nonLoadMore | Function |  | TS 类型：`(options: { e: MouseEvent }) => void`<br/>点击加载更多时触发 | N\nonScroll | Function |  | TS 类型：`(options: { e: Event \\| WheelEvent; scrollTop: number; scrollBottom: number }) => void`<br/>列表滚动时触发，scrollTop 表示顶部滚动距离，scrollBottom 表示底部滚动距离 | N\n\n### List Events\n\n名称 | 参数 | 描述\n-- | -- | --\nload-more | `(options: { e: MouseEvent })` | 点击加载更多时触发\nscroll | `(options: { e: Event \\| WheelEvent; scrollTop: number; scrollBottom: number })` | 列表滚动时触发，scrollTop 表示顶部滚动距离，scrollBottom 表示底部滚动距离\n\n### ListInstanceFunctions 组件实例方法\n\n名称 | 参数 | 返回值 | 描述\n-- | -- | -- | --\nscrollTo | `(scrollToParams: ScrollToElementParams)` | \\- | 虚拟滚动场景下，支持指定滚动到具体的节点\n\n\n### ListItem Props\n\n名称 | 类型 | 默认值 | 说明 | 必传\n-- | -- | -- | -- | --\naction | String / Slot / Function | - | 操作栏。TS 类型：`string \\| TNode`。[通用类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/common.ts) | N\ncontent | String / Slot / Function | - | 内容。TS 类型：`string \\| TNode`。[通用类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/common.ts) | N\ndefault | String / Slot / Function | - | 内容，同 content。TS 类型：`string \\| TNode`。[通用类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/common.ts) | N\n\n### ListItemMeta Props\n\n名称 | 类型 | 默认值 | 说明 | 必传\n-- | -- | -- | -- | --\navatar | String / Slot / Function | - | 已废弃。列表项图片。TS 类型：`string \\| TNode`。[通用类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/common.ts) | N\ndescription | String / Slot / Function | - | 列表项内容。TS 类型：`string \\| TNode`。[通用类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/common.ts) | N\nimage | String / Slot / Function | - | 列表项图片。TS 类型：`string \\| TNode`。[通用类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/common.ts) | N\ntitle | String / Slot / Function | - | 列表项标题。TS 类型：`string \\| TNode`。[通用类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/common.ts) | N\n"
  },
  {
    "name": "loading",
    "propsData": ":: BASE_DOC ::\n\n### 指令方式调用\n\n支持 `v-loading` 指令调用 `Loading`，只需要绑定 `boolean` 值即可，支持 `fullscreen` 和 `inheritColor` 修饰符以及 `Object` 形式的自定义配置，分别对应其属性。\n\n{{ directive }}\n\n## FAQ\n\n### 为什么在 Loading 中无法使用样式穿透？\n\n`Loading` 组件在 `1.0.8` 之后使用 `Vue3` 的 [Teleport](https://cn.vuejs.org/guide/built-ins/teleport.html) 重构了 `attach` 属性的实现，因此 `:deep()` 深度选择器无法作用于 [Teleport](https://cn.vuejs.org/guide/built-ins/teleport.html) 包裹的元素。\n\n如果必须要进行样式替换，可以采用以下几种方案。\n\n方案一：单独创建一个不使用`scoped`的`style`标签\n\n```html\n<style>\n.test .t-radio-button__label {\n  color: red;\n}\n</style>\n```\n\n方案二：使用 `:global` 伪类来实现相同效果，比起单独创建一个`style`更加简洁明了。\n\n```html\n<style scoped>\n.abc{\n  color: red;\n}\n:global(.test .t-radio-button__label) {\n  color: red;\n}\n</style>\n```\n\n### 为什么使用 attach 属性挂载元素时会失败？\n\n`attach` 属性使用属性使用 `Vue3` 的 [Teleport](https://cn.vuejs.org/guide/built-ins/teleport.html) 实现，因此attach遵守[Teleport](https://cn.vuejs.org/guide/built-ins/teleport.html)的使用规则。\n\n> `Teleport` 挂载时，传送的 `to` 目标必须已经存在于 `DOM` 中。理想情况下，这应该是整个 `Vue` 应用 `DOM` 树外部的一个元素。如果目标元素也是由 `Vue` 渲染的，你需要确保在挂载 `Teleport` 之前先挂载该元素。\n\n如果您不确定问题是否是由该规则引起的，或者确定该规则不是问题的根本原因，请在 `GitHub` 上提出一个 `issue`，并提供可以重现问题的代码。这将有助于我们更好地了解您的问题并提供更好的帮助。\n\n## API\n\n### Loading Props\n\n名称 | 类型 | 默认值 | 说明 | 必传\n-- | -- | -- | -- | --\nattach | String / Function | '' | 挂载元素，默认挂载到组件本身所在的位置。数据类型为 String 时，会被当作选择器处理，进行节点查询。示例：'body' 或 () => document.body。TS 类型：`AttachNode`。[通用类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/common.ts) | N\ncontent | String / Slot / Function | - | 子元素。TS 类型：`string \\| TNode`。[通用类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/common.ts) | N\ndefault | String / Slot / Function | - | 子元素，同 content。TS 类型：`string \\| TNode`。[通用类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/common.ts) | N\ndelay | Number | 0 | 延迟显示加载效果的时间，用于防止请求速度过快引起的加载闪烁，单位：毫秒 | N\nfullscreen | Boolean | false | 是否显示为全屏加载 | N\nindicator | Boolean / Slot / Function | true | 加载指示符，值为 true 显示默认指示符，值为 false 则不显示，也可以自定义指示符。TS 类型：`boolean \\| TNode`。[通用类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/common.ts) | N\ninheritColor | Boolean | false | 是否继承父元素颜色 | N\nloading | Boolean | true | 是否处于加载状态 | N\npreventScrollThrough | Boolean | true | 防止滚动穿透，全屏加载模式有效 | N\nshowOverlay | Boolean | true | 是否需要遮罩层，遮罩层对包裹元素才有效 | N\nsize | String | medium | 尺寸，示例：small/medium/large/12px/56px/0.3em | N\ntext | String / Slot / Function | - | 加载提示文案。TS 类型：`string \\| TNode`。[通用类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/common.ts) | N\nzIndex | Number | - | 消息通知层级，样式默认为 3500 | N\n\n### LoadingPlugin\n\n同时也支持 `this.$loading`。这是一个插件函数，参数形式为顺序参数（形如：(a, b, c)），而非对象参数（形如：({ a, b, c })）。顺序参数如下，\n\n参数名称 | 参数类型 | 参数默认值 | 参数说明\n-- | -- | -- | --\noptions | Function | - | 必需。TS 类型：`boolean \\| TdLoadingProps`\ncontext | \\- | - | 要继承的应用的上下文。TS 类型：`AppContext`。[通用类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/common.ts)\n\n插件返回值：`LoadingInstance【interface LoadingInstance { hide: () => void }】`\n"
  },
  {
    "name": "menu",
    "propsData": ":: BASE_DOC ::\n\n### 可设置宽度的侧边导航\n\n通过 `width` 设置侧边导航的宽度。\n\n{{ side-menu-width }}\n\n## API\n### Menu Props\n\n名称 | 类型 | 默认值 | 说明 | 必传\n-- | -- | -- | -- | --\ncollapsed | Boolean | false | 是否收起菜单 | N\nexpandMutex | Boolean | false | 同级别互斥展开 | N\nexpandType | String | normal | 二级菜单展开方式，平铺展开和浮层展开。可选项：normal/popup | N\nexpanded | Array | [] | 子菜单展开的导航集合。支持语法糖 `v-model:expanded`。TS 类型：`Array<MenuValue>` | N\ndefaultExpanded | Array | [] | 子菜单展开的导航集合。非受控属性。TS 类型：`Array<MenuValue>` | N\nlogo | Slot / Function | - | 站点 LOGO。TS 类型：`TNode`。[通用类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/common.ts) | N\noperations | Slot / Function | - | 导航操作区域。TS 类型：`TNode`。[通用类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/common.ts) | N\ntheme | String | light | 菜单风格，有亮色模式和暗色模式两种。当 `theme = global` 时，模式随整个组件库；当 `theme = system` 时，模式跟随系统。⚠️ `global/system` 正在开发中，暂勿使用。可选项：light/dark/global/system | N\nvalue | String / Number | - | 激活菜单项。支持语法糖 `v-model` 或 `v-model:value`。TS 类型：`MenuValue` `type MenuValue = string \\| number`。[详细类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/menu/type.ts) | N\ndefaultValue | String / Number | - | 激活菜单项。非受控属性。TS 类型：`MenuValue` `type MenuValue = string \\| number`。[详细类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/menu/type.ts) | N\nwidth | String / Number / Array | '232px' | 菜单宽度。值类型为数组时，分别表示菜单展开和折叠的宽度。[ 展开时的宽度, 折叠时的宽度 ]，示例：['200px', '80px']。TS 类型：`string \\| number \\| Array<string \\| number>` | N\nonChange | Function |  | TS 类型：`(value: MenuValue) => void`<br/>激活菜单项发生变化时触发 | N\nonExpand | Function |  | TS 类型：`(value: Array<MenuValue>) => void`<br/>展开的菜单项发生变化时触发 | N\n\n### Menu Events\n\n名称 | 参数 | 描述\n-- | -- | --\nchange | `(value: MenuValue)` | 激活菜单项发生变化时触发\nexpand | `(value: Array<MenuValue>)` | 展开的菜单项发生变化时触发\n\n### HeadMenu Props\n\n名称 | 类型 | 默认值 | 说明 | 必传\n-- | -- | -- | -- | --\nexpandType | String | normal | 二级菜单展开方式，平铺展开和浮层展开。可选项：normal/popup | N\nexpanded | Array | [] | 展开的子菜单集合。支持语法糖 `v-model:expanded`。TS 类型：`Array<MenuValue>` | N\ndefaultExpanded | Array | [] | 展开的子菜单集合。非受控属性。TS 类型：`Array<MenuValue>` | N\nlogo | Slot / Function | - | 站点 LOGO。TS 类型：`TNode`。[通用类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/common.ts) | N\noperations | Slot / Function | - | 导航操作区域。TS 类型：`TNode`。[通用类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/common.ts) | N\ntheme | String | light | 可选项：light/dark | N\nvalue | String / Number | - | 激活菜单项。支持语法糖 `v-model` 或 `v-model:value`。TS 类型：`MenuValue` `type MenuValue = string \\| number`。[详细类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/menu/type.ts) | N\ndefaultValue | String / Number | - | 激活菜单项。非受控属性。TS 类型：`MenuValue` `type MenuValue = string \\| number`。[详细类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/menu/type.ts) | N\nonChange | Function |  | TS 类型：`(value: MenuValue) => void`<br/>激活菜单项发生变化时触发 | N\nonExpand | Function |  | TS 类型：`(value: Array<MenuValue>) => void`<br/>展开的菜单项发生变化时触发 | N\n\n### HeadMenu Events\n\n名称 | 参数 | 描述\n-- | -- | --\nchange | `(value: MenuValue)` | 激活菜单项发生变化时触发\nexpand | `(value: Array<MenuValue>)` | 展开的菜单项发生变化时触发\n\n### Submenu Props\n\n名称 | 类型 | 默认值 | 说明 | 必传\n-- | -- | -- | -- | --\ncontent | String / Slot / Function | - | 菜单项内容。TS 类型：`string \\| TNode`。[通用类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/common.ts) | N\ndefault | String / Slot / Function | - | 菜单项内容，同 content。TS 类型：`string \\| TNode`。[通用类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/common.ts) | N\ndisabled | Boolean | - | 是否禁用菜单项展开/收起/跳转等功能 | N\nicon | Slot / Function | - | 菜单项图标。TS 类型：`TNode`。[通用类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/common.ts) | N\npopupProps | Object | - | 透传 Popup 组件全部特性。TS 类型：`PopupProps`，[Popup API Documents](./popup?tab=api)。[详细类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/menu/type.ts) | N\ntitle | String / Slot / Function | - | 二级菜单内容。TS 类型：`string \\| TNode`。[通用类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/common.ts) | N\nvalue | String / Number | - | 菜单项唯一标识。TS 类型：`MenuValue` | N\n\n### MenuItem Props\n\n名称 | 类型 | 默认值 | 说明 | 必传\n-- | -- | -- | -- | --\ncontent | String / Slot / Function | - | 菜单项内容。TS 类型：`string \\| TNode`。[通用类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/common.ts) | N\ndefault | String / Slot / Function | - | 菜单项内容，同 content。TS 类型：`string \\| TNode`。[通用类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/common.ts) | N\ndisabled | Boolean | - | 是否禁用菜单项展开/收起/跳转等功能 | N\nhref | String | - | 跳转链接 | N\nicon | Slot / Function | - | 图标。TS 类型：`TNode`。[通用类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/common.ts) | N\nreplace | Boolean | false | 路由跳转是否采用覆盖的方式（覆盖后将没有浏览器历史记录） | N\nrouter | Object | - | 路由对象。如果项目存在 Router，则默认使用 Router。TS 类型：`Record<string, any>` | N\nrouterLink | Boolean | - | `1.3.11`。当且仅当 Router 存在时，该 API 有效。开启菜单项内容渲染为与router-link行为一致的`<a />`标签。 | N\ntarget | String | _self | 链接或路由跳转方式。可选项：_blank/_self/_parent/_top | N\nto | String / Object | - | 路由跳转目标，当且仅当 Router 存在时，该 API 有效。TS 类型：`MenuRoute` `interface MenuRoute { path?: string; name?: string; hash?: string; query?: MenuQueryData; params?: MenuQueryData }` `type MenuQueryData = { [key: string]: string \\| string[] }`。[详细类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/menu/type.ts) | N\nvalue | String / Number | - | 菜单项唯一标识。TS 类型：`MenuValue` | N\nonClick | Function |  | TS 类型：`(context: { e: MouseEvent }) => void`<br/>点击时触发 | N\n\n### MenuItem Events\n\n名称 | 参数 | 描述\n-- | -- | --\nclick | `(context: { e: MouseEvent })` | 点击时触发\n\n### MenuGroup Props\n\n名称 | 类型 | 默认值 | 说明 | 必传\n-- | -- | -- | -- | --\ntitle | String / Slot / Function | - | 菜单组标题。TS 类型：`string \\| TNode`。[通用类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/common.ts) | N\n"
  },
  {
    "name": "message",
    "propsData": ":: BASE_DOC ::\n\n### 关闭全局提示\n\n#### 带关闭按钮的全局提示\n\n{{ close }}\n\n#### 使用关闭函数控制全局提示\n\n如果不希望通过计时关闭，或者用户点击按钮关闭，也可以使用关闭函数。\n\n{{ toggle }}\n\n#### 关闭多条全局提示\n\n{{ close-all }}\n\n### 控制全局提示显示位置\n\n全局提示显示位置可控制，`placement` 用于控制大概位置，`offset` 用于设置相对于 `placement` 所在位置的偏移\n\n{{ placement }}\n\n### 插件调用与函数式调用\n\n支持插件式调用 `this.$message` 和函数式调用 `MessagePlugin` 两种方式，两种方式参数完全一样。\n\n示例：`MessagePlugin.warning('请输入信息')` 或 `this.$message.warning('请输入信息')`\n\n{{ plugin }}\n\n## API\n### Message Props\n\n名称 | 类型 | 默认值 | 说明 | 必传\n-- | -- | -- | -- | --\ncloseBtn | String / Boolean / Slot / Function | undefined | 关闭按钮，可以自定义。值为 true 显示默认关闭按钮，值为 false 不显示关闭按钮。值类型为 string 则直接显示值，如：“关闭”。也可以完全自定义按钮。TS 类型：`string \\| boolean \\| TNode`。[通用类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/common.ts) | N\ncontent | String / Slot / Function | - | 用于自定义消息弹出内容。TS 类型：`string \\| TNode`。[通用类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/common.ts) | N\nduration | Number | 3000 | 消息内置计时器，计时到达时会触发 duration-end 事件。单位：毫秒。值为 0 则表示没有计时器。 | N\nicon | Boolean / Slot / Function | true | 用于自定义消息前面的图标，优先级大于 theme 设定的图标。值为 false 则不显示图标，值为 true 显示 theme 设定图标。TS 类型：`boolean \\| TNode`。[通用类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/common.ts) | N\ntheme | String | info | 消息组件风格。可选项：info/success/warning/error/question/loading。TS 类型：`MessageThemeList` `type MessageThemeList = 'info' \\| 'success' \\| 'warning' \\| 'error' \\| 'question' \\| 'loading'`。[详细类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/message/type.ts) | N\nonClose | Function |  | TS 类型：`(context: { trigger: 'close-click' \\| 'duration-end', e?: MouseEvent }) => void`<br/>关闭消息时触发 | N\nonCloseBtnClick | Function |  | TS 类型：`(context: { e: MouseEvent }) => void`<br/>当关闭按钮存在时，用户点击关闭按钮触发 | N\nonDurationEnd | Function |  | TS 类型：`() => void`<br/>计时结束后触发 | N\n\n### Message Events\n\n名称 | 参数 | 描述\n-- | -- | --\nclose | `(context: { trigger: 'close-click' \\| 'duration-end', e?: MouseEvent })` | 关闭消息时触发\nclose-btn-click | `(context: { e: MouseEvent })` | 当关闭按钮存在时，用户点击关闭按钮触发\nduration-end | \\- | 计时结束后触发\n\n### MessageOptions\n\n名称 | 类型 | 默认值 | 说明 | 必传\n-- | -- | -- | -- | --\nattach | String / Function | 'body' | 指定弹框挂载的父节点。数据类型为 String 时，会被当作选择器处理，进行节点查询。示例：'body' 或 () => document.body。TS 类型：`AttachNode`。[通用类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/common.ts) | N\nclassName | String | - | 类名 | N\noffset | Array | - | 相对于 placement 的偏移量，示例：[-10, 20] 或 ['10em', '8rem']。TS 类型：`Array<string \\| number>` | N\nplacement | String | top | 弹出消息位置。可选项：center/top/left/right/bottom/top-left/top-right/bottom-left/bottom-right。TS 类型：`MessagePlacementList` `type MessagePlacementList = 'center' \\| 'top' \\| 'left' \\| 'right' \\| 'bottom' \\| 'top-left' \\| 'top-right' \\| 'bottom-left' \\| 'bottom-right'`。[详细类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/message/type.ts) | N\nstyle | Object | - | 内敛样式。TS 类型：`CSSProperties` | N\nzIndex | Number | 5000 | 消息层级 | N\n`MessageProps` | \\- | - | 继承 `MessageProps` 中的全部 API | N\n\n### MessagePlugin\n\n同时也支持 `this.$message`。\n\n参数名称 | 参数类型 | 参数默认值 | 参数说明\n-- | -- | -- | --\ntheme | String | - | 必需。消息类型。TS 类型：`MessageThemeList`\nmessage | String / Object | - | 必需。消息内容。TS 类型：`string \\| MessageOptions`\nduration | Number | 3000 | 消息显示时长，单位：毫秒。值为 0 表示永久显示\ncontext | \\- | - | 要继承的应用的上下文。TS 类型：`AppContext`。[通用类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/common.ts)\n\n### MessagePlugin.info\n\n同时也支持 `this.$message.info`。\n\n参数名称 | 参数类型 | 参数默认值 | 参数说明\n-- | -- | -- | --\nmessage | String / Object | - | 必需。消息内容。TS 类型：`string \\| MessageInfoOptions` `type MessageInfoOptions = Omit<MessageOptions, 'theme'>`。[详细类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/message/type.ts)\nduration | Number | 3000 | 消息显示时长，单位：毫秒。值为 0 表示永久显示\ncontext | \\- | - | 要继承的应用的上下文。TS 类型：`AppContext`。[通用类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/common.ts)\n\n\n### MessagePlugin.error\n\n同时也支持 `this.$message.error`。\n\n参数名称 | 参数类型 | 参数默认值 | 参数说明\n-- | -- | -- | --\nmessage | String / Object | - | 必需。消息内容。TS 类型：`string \\| MessageInfoOptions`\nduration | Number | 3000 | 消息显示时长，单位：毫秒。值为 0 表示永久显示\ncontext | \\- | - | 要继承的应用的上下文。TS 类型：`AppContext`。[通用类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/common.ts)\n\n### MessagePlugin.warning\n\n同时也支持 `this.$message.warning`。\n\n参数名称 | 参数类型 | 参数默认值 | 参数说明\n-- | -- | -- | --\nmessage | String / Object | - | 必需。消息内容。TS 类型：`string \\| MessageInfoOptions`\nduration | Number | 3000 | 消息显示时长，单位：毫秒。值为 0 表示永久显示\ncontext | \\- | - | 要继承的应用的上下文。TS 类型：`AppContext`。[通用类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/common.ts)\n\n### MessagePlugin.success\n\n同时也支持 `this.$message.success`。\n\n参数名称 | 参数类型 | 参数默认值 | 参数说明\n-- | -- | -- | --\nmessage | String / Object | - | 必需。消息内容。TS 类型：`string \\| MessageInfoOptions`\nduration | Number | 3000 | 消息显示时长，单位：毫秒。值为 0 表示永久显示\ncontext | \\- | - | 要继承的应用的上下文。TS 类型：`AppContext`。[通用类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/common.ts)\n\n### MessagePlugin.loading\n\n同时也支持 `this.$message.loading`。\n\n参数名称 | 参数类型 | 参数默认值 | 参数说明\n-- | -- | -- | --\nmessage | String / Object | - | 必需。消息提醒内容。TS 类型：`string \\| MessageInfoOptions`\nduration | Number | 3000 | 消息显示时长，单位：毫秒。值为 0 表示永久显示\ncontext | \\- | - | 要继承的应用的上下文。TS 类型：`AppContext`。[通用类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/common.ts)\n\n### MessagePlugin.question\n\n同时也支持 `this.$message.question`。\n\n参数名称 | 参数类型 | 参数默认值 | 参数说明\n-- | -- | -- | --\nmessage | String / Object | - | 必需。消息内容。TS 类型：`string \\| MessageInfoOptions`\nduration | Number | 3000 | 消息显示时长，单位：毫秒。值为 0 表示永久显示\ncontext | \\- | - | 要继承的应用的上下文。TS 类型：`AppContext`。[通用类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/common.ts)\n\n\n### MessagePlugin.close\n\n同时也支持 `this.$message.close`。\n\n参数名称 | 参数类型 | 参数默认值 | 参数说明\n-- | -- | -- | --\noptions | Object | - | 必需。该插件参数为 $Message.info() 等插件执行后的返回值。示例：`const msg = $Message.info({}); $Message.close(msg)`。TS 类型：`Promise<MessageInstance>`\n\n### MessagePlugin.closeAll\n\n同时也支持 `this.$message.closeAll`。\n\n参数名称 | 参数类型 | 参数默认值 | 参数说明\n-- | -- | -- | --\n\\- | \\- | - | \\-\n\n### MessagePlugin.config\n\n同时也支持 `this.$message.config`。\n\n参数名称 | 参数类型 | 参数默认值 | 参数说明\n-- | -- | -- | --\nmessage | Object | - | 必需。全局提醒插件全局配置。TS 类型：`MessageOptions`\n"
  },
  {
    "name": "notification",
    "propsData": ":: BASE_DOC ::\n\n### 关闭多个消息通知\n\n可以通过`closeAll`同时关闭多个消息通知。\n\n{{ close-all }}\n\n### 插件调用与函数式调用\n\n支持插件式调用 `this.$notify` 和函数式调用 `NotifyPlugin` 两种方式，两种方式参数完全一样。\n\n示例：`NotifyPlugin.warning({title: '请输入标题', content: '请输入内容'})` 或 `this.$notify.warning({title: '请输入标题', content: '请输入内容'})`\n\n{{ plugin }}\n\n## API\n### Notification Props\n\n名称 | 类型 | 默认值 | 说明 | 必传\n-- | -- | -- | -- | --\ncloseBtn | String / Boolean / Slot / Function | undefined | 关闭按钮，可以自定义。值为 true 显示默认关闭按钮，值为 false 不显示关闭按钮。值类型为 string 则直接显示值，如：“关闭”。值类型为 TNode，则表示呈现自定义按钮示例。TS 类型：`string \\| boolean \\| TNode`。[通用类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/common.ts) | N\ncontent | String / Slot / Function | - | 自定义内容。TS 类型：`string \\| TNode`。[通用类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/common.ts) | N\ndefault | String / Slot / Function | - | 自定义内容，同 content。TS 类型：`string \\| TNode`。[通用类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/common.ts) | N\nduration | Number | 3000 | 消息显示时长，单位：毫秒。值为 0 表示永久显示 | N\nfooter | String / Slot / Function | - | 用于自定义底部内容。TS 类型：`string \\| TNode`。[通用类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/common.ts) | N\nicon | Boolean / Slot / Function | true | 用于自定义消息通知前面的图标，优先级大于 theme 设定的图标。值为 false 则不显示图标，值为 true 显示 theme 设定图标。TS 类型：`boolean \\| TNode`。[通用类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/common.ts) | N\ntheme | String | info | 消息类型。可选项：info/success/warning/error。TS 类型：`NotificationThemeList` `type NotificationThemeList = 'info' \\| 'success' \\| 'warning' \\| 'error'`。[详细类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/notification/type.ts) | N\ntitle | String / Slot / Function | - | 标题。TS 类型：`string \\| TNode`。[通用类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/common.ts) | N\nonCloseBtnClick | Function |  | TS 类型：`(context: { e: MouseEvent }) => void`<br/>点击关闭按钮时触发 | N\nonDurationEnd | Function |  | TS 类型：`() => void`<br/>计时结束时触发 | N\n\n### Notification Events\n\n名称 | 参数 | 描述\n-- | -- | --\nclose-btn-click | `(context: { e: MouseEvent })` | 点击关闭按钮时触发\nduration-end | \\- | 计时结束时触发\n\n### NotificationOptions\n\n名称 | 类型 | 默认值 | 说明 | 必传\n-- | -- | -- | -- | --\nattach | String / Function | 'body' | 指定消息通知挂载的父节点。数据类型为 String 时，会被当作选择器处理，进行节点查询。示例：'body' 或 () => document.body。TS 类型：`AttachNode`。[通用类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/common.ts) | N\noffset | Array | - | 相对于 placement 的偏移量，示例：[-10, 20] 或 ['10em', '8rem']。TS 类型：`Array<string \\| number>` | N\nplacement | String | top-right | 消息弹出位置。可选项：top-left/top-right/bottom-left/bottom-right。TS 类型：`NotificationPlacementList` `type NotificationPlacementList = 'top-left' \\| 'top-right' \\| 'bottom-left' \\| 'bottom-right'`。[详细类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/notification/type.ts) | N\nzIndex | Number | 6000 | 消息通知层级 | N\n`NotificationProps` | \\- | - | 继承 `NotificationProps` 中的全部 API | N\n\n### NotificationPlugin\n\n同时也支持 `this.$notification`。\n\n参数名称 | 参数类型 | 参数默认值 | 参数说明\n-- | -- | -- | --\ntheme | String | info | 必需。消息类型。可选项：info/success/warning/error。TS 类型：`NotificationThemeList`\noptions | Object | - | 必需。消息通知内容。TS 类型：`NotificationOptions`\ncontext | \\- | - | 要继承的应用的上下文。TS 类型：`AppContext`。[通用类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/common.ts) \n\n### NotificationPlugin.info\n\n同时也支持 `this.$notification.info`。\n\n参数名称 | 参数类型 | 参数默认值 | 参数说明\n-- | -- | -- | --\noptions | Object | - | 必需。消息通知内容。TS 类型：`NotificationInfoOptions` `type NotificationInfoOptions = Omit<NotificationOptions, 'theme'>`。[详细类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/notification/type.ts)\ncontext | \\- | - | 要继承的应用的上下文。TS 类型：`AppContext`。[通用类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/common.ts) \n\n\n插件返回值：`Promise<NotificationInstance>`\n\n### NotificationPlugin.warning\n\n同时也支持 `this.$notification.warning`。\n\n参数名称 | 参数类型 | 参数默认值 | 参数说明\n-- | -- | -- | --\noptions | Object | - | 必需。消息通知内容。TS 类型：`NotificationInfoOptions`\ncontext | \\- | - | 要继承的应用的上下文。TS 类型：`AppContext`。[通用类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/common.ts) \n\n\n插件返回值：`Promise<NotificationInstance>`\n\n### NotificationPlugin.error\n\n同时也支持 `this.$notification.error`。\n\n参数名称 | 参数类型 | 参数默认值 | 参数说明\n-- | -- | -- | --\noptions | Object | - | 必需。消息通知内容。TS 类型：`NotificationInfoOptions`\ncontext | \\- | - | 要继承的应用的上下文。TS 类型：`AppContext`。[通用类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/common.ts) \n\n\n插件返回值：`Promise<NotificationInstance>`\n\n### NotificationPlugin.success\n\n同时也支持 `this.$notification.success`。\n\n参数名称 | 参数类型 | 参数默认值 | 参数说明\n-- | -- | -- | --\noptions | Object | - | 必需。消息通知内容。TS 类型：`NotificationInfoOptions`\ncontext | \\- | - | 要继承的应用的上下文。TS 类型：`AppContext`。[通用类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/common.ts) \n\n\n插件返回值：`Promise<NotificationInstance>`\n\n### NotificationPlugin.close\n\n同时也支持 `this.$notification.close`。\n\n参数名称 | 参数类型 | 参数默认值 | 参数说明\n-- | -- | -- | --\noptions | Object | - | 必需。该插件参数为 $Notification.info() 等插件执行后的返回值。示例：`const msg = $Notification.info({}); $Notification.close(msg)`。TS 类型：`Promise<NotificationInstance>`\ncontext | \\- | - | 要继承的应用的上下文。TS 类型：`AppContext`。[通用类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/common.ts) \n\n### NotificationPlugin.closeAll\n\n同时也支持 `this.$notification.closeAll`。\n\n参数名称 | 参数类型 | 参数默认值 | 参数说明\n-- | -- | -- | --\n-- | \\- | - | \\-\n\n### NotificationPlugin.config\n\n同时也支持 `this.$notification.config`。\n\n参数名称 | 参数类型 | 参数默认值 | 参数说明\n-- | -- | -- | --\nnotify | Object | - | 必需。消息通知插件全局配置。TS 类型：`NotificationOptions`\n"
  },
  {
    "name": "pagination",
    "propsData": ":: BASE_DOC ::\n\n## API\n### Pagination Props\n\n名称 | 类型 | 默认值 | 说明 | 必传\n-- | -- | -- | -- | --\ncurrent | Number | 1 | 当前页。支持语法糖 `v-model` 或 `v-model:current` | N\ndefaultCurrent | Number | 1 | 当前页。非受控属性 | N\ndisabled | Boolean | - | 是否禁用分页组件 | N\nfoldedMaxPageBtn | Number | 5 | 折叠时最多显示页码按钮数 | N\nmaxPageBtn | Number | 10 | 最多显示页码按钮数 | N\npageEllipsisMode | String | mid | 页码数量超出时，前后省略模式, `mid`表示中间省略, `both-ends` 表示两端省略。可选项：mid/both-ends | N\npageSize | Number | 10 | 每一页的数据量。支持语法糖 `v-model:pageSize` | N\ndefaultPageSize | Number | 10 | 每一页的数据量。非受控属性 | N\npageSizeOptions | Array | [5, 10, 20, 50] | 分页大小控制器，值为 [] 则不显示。TS 类型：`Array<number \\| { label: string; value: number }>` | N\nselectProps | Object | - | 透传全部属性到 Select 组件，也可使用 `selectProps.popupProps` 透传全部 Popup 组件。TS 类型：`SelectProps`，[Select API Documents](./select?tab=api)。[详细类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/pagination/type.ts) | N\nshowFirstAndLastPageBtn | Boolean | false | 是否显示跳转首页尾页页码控制器 | N\nshowJumper | Boolean | false | 是否显示跳转页码控制器 | N\nshowPageNumber | Boolean | true | 是否显示页码控制器 | N\nshowPageSize | Boolean | true | 是否显示分页数量控制器 | N\nshowPreviousAndNextBtn | Boolean | true | 是否显示跳转前后页页码控制器 | N\nsize | String | medium | 分页组件尺寸。可选项：small/medium | N\ntheme | String | default | 分页组件风格。可选项：default/simple | N\ntotal | Number | 0 | 数据总条数 | N\ntotalContent | Boolean / Slot / Function | true | 用于自定义总条数呈现内容。默认显示总条数，值为 false 则不显示。TS 类型：`boolean \\| TNode`。[通用类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/common.ts) | N\nonChange | Function |  | TS 类型：`(pageInfo: PageInfo) => void`<br/>当前页或分页大小发生变化时触发。[详细类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/pagination/type.ts)。<br/>`interface PageInfo { current: number; previous: number; pageSize: number }`<br/> | N\nonCurrentChange | Function |  | TS 类型：`(current: number, pageInfo: PageInfo) => void`<br/>当前页发生变化时触发 | N\nonPageSizeChange | Function |  | TS 类型：`(pageSize: number, pageInfo: PageInfo) => void`<br/>分页大小发生变化时触发 | N\n\n### Pagination Events\n\n名称 | 参数 | 描述\n-- | -- | --\nchange | `(pageInfo: PageInfo)` | 当前页或分页大小发生变化时触发。[详细类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/pagination/type.ts)。<br/>`interface PageInfo { current: number; previous: number; pageSize: number }`<br/>\ncurrent-change | `(current: number, pageInfo: PageInfo)` | 当前页发生变化时触发\npage-size-change | `(pageSize: number, pageInfo: PageInfo)` | 分页大小发生变化时触发\n\n### PaginationMini Props\n\n名称 | 类型 | 默认值 | 说明 | 必传\n-- | -- | -- | -- | --\ndisabled | Boolean / Object | - | 按钮禁用配置。TS 类型：`boolean \\| JumperDisabledConfig` `type JumperDisabledConfig = { prev?: boolean; current?: boolean; next?: boolean; }`。[详细类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/pagination/type.ts) | N\nlayout | String | horizontal | 按钮方向。可选项：horizontal/vertical | N\nshowCurrent | Boolean | true | 是否展示当前按钮。TS 类型：`boolean` | N\nsize | String | medium | 按钮尺寸。可选项：small/medium/large。TS 类型：`SizeEnum`。[通用类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/common.ts) | N\ntips | Object | - | 提示文案配置，值为 `true` 显示默认文案；值为 `false` 不显示提示文案；值类型为对象则单独配置文案内容。TS 类型：`boolean \\| JumperTipsConfig` `type JumperTipsConfig = { prev?: string; current?: string; next?: string; }`。[详细类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/pagination/type.ts) | N\nvariant | String | text | 按钮形式。可选项：text/outline | N\nonChange | Function |  | TS 类型：`(context: {e: MouseEvent, trigger: JumperTrigger}) => void`<br/>按钮点击事件回调。[详细类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/pagination/type.ts)。<br/>`type JumperTrigger = 'prev' \\| 'current' \\| 'next'`<br/> | N\n\n### PaginationMini Events\n\n名称 | 参数 | 描述\n-- | -- | --\nchange | `(context: {e: MouseEvent, trigger: JumperTrigger})` | 按钮点击事件回调。[详细类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/pagination/type.ts)。<br/>`type JumperTrigger = 'prev' \\| 'current' \\| 'next'`<br/>\n"
  },
  {
    "name": "popconfirm",
    "propsData": ":: BASE_DOC ::\n\n## API\n### Popconfirm Props\n\n名称 | 类型 | 默认值 | 说明 | 必传\n-- | -- | -- | -- | --\ncancelBtn | String / Object / Slot / Function | '' | 取消按钮，可自定义。值为 null 则不显示取消按钮。值类型为字符串，则表示自定义按钮文本，值类型为 Object 则表示透传 Button 组件属性。使用 TNode 自定义按钮时，需自行控制取消事件。TS 类型：`string \\| ButtonProps \\| TNode`，[Button API Documents](./button?tab=api)。[通用类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/common.ts)。[详细类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/popconfirm/type.ts) | N\nconfirmBtn | String / Object / Slot / Function | '' | 确认按钮。值类型为字符串，则表示自定义按钮文本，值类型为 Object 则表示透传 Button 组件属性。使用 TNode 自定义按钮时，需自行控制确认事件。TS 类型：`string \\| ButtonProps \\| TNode`。[通用类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/common.ts) | N\ncontent | String / Slot / Function | - | 确认框内容。TS 类型：`string \\| TNode`。[通用类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/common.ts) | N\ndefault | String / Slot / Function | - | 触发元素，同 triggerElement。TS 类型：`string \\| TNode`。[通用类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/common.ts) | N\ndestroyOnClose | Boolean | true | 是否在关闭浮层时销毁浮层 | N\nicon | Slot / Function | - | 确认框图标。TS 类型：`TNode`。[通用类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/common.ts) | N\nplacement | String | top | 浮层出现位置。可选项：top/left/right/bottom/top-left/top-right/bottom-left/bottom-right/left-top/left-bottom/right-top/right-bottom | N\npopupProps | Object | - | 透传 Popup 组件属性。TS 类型：`PopupProps`，[Popup API Documents](./popup?tab=api)。[详细类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/popconfirm/type.ts) | N\nshowArrow | Boolean | true | 是否显示浮层箭头 | N\ntheme | String | default | 文字提示风格。可选项：default/warning/danger | N\ntriggerElement | String / Slot / Function | - | 触发元素。TS 类型：`string \\| TNode`。[通用类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/common.ts) | N\nvisible | Boolean | - | 是否显示气泡确认框。支持语法糖 `v-model:visible` | N\ndefaultVisible | Boolean | - | 是否显示气泡确认框。非受控属性 | N\nonCancel | Function |  | TS 类型：`(options: { e: MouseEvent }) => void`<br/>点击取消按钮时触发 | N\nonConfirm | Function |  | TS 类型：`(options: { e: MouseEvent }) => void`<br/>点击确认按钮时触发 | N\nonVisibleChange | Function |  | TS 类型：`(visible: boolean, context?: PopconfirmVisibleChangeContext) => void`<br/>确认框显示或隐藏时触发。[详细类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/popconfirm/type.ts)。<br/>`interface PopconfirmVisibleChangeContext { trigger?: TriggerSource; e?: MouseEvent }`<br/><br/>`type TriggerSource = 'cancel' \\| 'confirm' \\| 'document' \\| 'trigger-element-click'`<br/> | N\n\n### Popconfirm Events\n\n名称 | 参数 | 描述\n-- | -- | --\ncancel | `(options: { e: MouseEvent })` | 点击取消按钮时触发\nconfirm | `(options: { e: MouseEvent })` | 点击确认按钮时触发\nvisible-change | `(visible: boolean, context?: PopconfirmVisibleChangeContext)` | 确认框显示或隐藏时触发。[详细类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/popconfirm/type.ts)。<br/>`interface PopconfirmVisibleChangeContext { trigger?: TriggerSource; e?: MouseEvent }`<br/><br/>`type TriggerSource = 'cancel' \\| 'confirm' \\| 'document' \\| 'trigger-element-click'`<br/>\n"
  },
  {
    "name": "popup",
    "propsData": ":: BASE_DOC ::\n\n## FAQ\n\n### 为什么在 Popup 中无法使用样式穿透？\n\n`Popup` 组件及其衍生组件（例如 `Popconfirm`、`Tooltip`）的 `attach` 属性使用 Vue3 的 [Teleport](https://cn.vuejs.org/guide/built-ins/teleport.html) 实现，因此 `:deep()` 深度选择器无法作用于 [Teleport](https://cn.vuejs.org/guide/built-ins/teleport.html) 包裹的元素。\n\n如果必须要进行样式替换，可以采用以下几种方案。\n\n方案一：单独创建一个不使用`scoped`的`style`标签\n```html\n<style>\n.test .t-radio-button__label {\n  color: red;\n}\n</style>\n```\n方案二：使用 `:global` 伪类来实现相同效果，比起单独创建一个`style`更加简洁明了。\n```html\n<style scoped>\n.abc{\n  color: red;\n}\n:global(.test .t-radio-button__label) {\n  color: red;\n}\n</style>\n```\n\n### 为什么使用 attach 属性挂载元素时会失败？\n\n`attach` 属性使用属性使用 `Vue3` 的 [Teleport](https://cn.vuejs.org/guide/built-ins/teleport.html) 实现，因此attach遵守[Teleport](https://cn.vuejs.org/guide/built-ins/teleport.html)的使用规则。\n\n> `Teleport` 挂载时，传送的 `to` 目标必须已经存在于 `DOM` 中。理想情况下，这应该是整个 `Vue` 应用 `DOM` 树外部的一个元素。如果目标元素也是由 `Vue` 渲染的，你需要确保在挂载 `Teleport` 之前先挂载该元素。\n\n如果您不确定问题是否是由该规则引起的，或者确定该规则不是问题的根本原因，请在 `GitHub` 上提出一个 `issue`，并提供可以重现问题的代码。这将有助于我们更好地了解您的问题并提供更好的帮助。\n\n## API\n### Popup Props\n\n名称 | 类型 | 默认值 | 说明 | 必传\n-- | -- | -- | -- | --\nattach | String / Function | 'body' | 制定挂载节点。数据类型为 String 时，会被当作选择器处理，进行节点查询。示例：'body' 或 () => document.body。TS 类型：`AttachNode`。[通用类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/common.ts) | N\ncontent | String / Slot / Function | - | 浮层里面的内容。TS 类型：`string \\| TNode`。[通用类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/common.ts) | N\ndefault | String / Slot / Function | - | 触发元素，同 triggerElement。TS 类型：`string \\| TNode`。[通用类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/common.ts) | N\ndelay | Number / Array | - | 延时显示或隐藏浮层，[延迟显示的时间，延迟隐藏的时间]，单位：毫秒。如果只有一个时间，则表示显示和隐藏的延迟时间相同。示例 `'300'` 或者 `[200, 200]`。默认为：[250, 150]。TS 类型：`number \\| Array<number>` | N\ndestroyOnClose | Boolean | false | 是否在关闭浮层时销毁浮层 | N\ndisabled | Boolean | - | 是否禁用组件 | N\nhideEmptyPopup | Boolean | false | 浮层是否隐藏空内容，默认不隐藏 | N\noverlayClassName | String / Object / Array | - | 浮层类名，示例：'name1 name2 name3' 或 `['name1', 'name2']` 或 `[{ 'name1': true }]`。TS 类型：`ClassName`。[通用类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/common.ts) | N\noverlayInnerClassName | String / Object / Array | - | 浮层内容部分类名，示例：'name1 name2 name3' 或 `['name1', 'name2']` 或 `[{ 'name1': true }]`。TS 类型：`ClassName`。[通用类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/common.ts) | N\noverlayInnerStyle | Boolean / Object / Function | - | 浮层内容部分样式，第一个参数 `triggerElement` 表示触发元素 DOM 节点，第二个参数 `popupElement` 表示浮层元素 DOM 节点。TS 类型：`Styles \\| ((triggerElement: HTMLElement, popupElement: HTMLElement) => Styles)`。[通用类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/common.ts) | N\noverlayStyle | Boolean / Object / Function | - | 浮层样式，第一个参数 `triggerElement` 表示触发元素 DOM 节点，第二个参数 `popupElement` 表示浮层元素 DOM 节点。TS 类型：`Styles \\| ((triggerElement: HTMLElement, popupElement: HTMLElement) => Styles)`。[通用类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/common.ts) | N\nplacement | String | top | 浮层出现位置。TS 类型：`PopupPlacement` `type PopupPlacement = 'top'\\|'left'\\|'right'\\|'bottom'\\|'top-left'\\|'top-right'\\|'bottom-left'\\|'bottom-right'\\|'left-top'\\|'left-bottom'\\|'right-top'\\|'right-bottom'`。[详细类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/popup/type.ts) | N\npopperOptions | Object | - | popper 初始化配置，详情参考 https://popper.js.org/docs/ | N\nshowArrow | Boolean | false | 是否显示浮层箭头 | N\ntrigger | String | hover | 触发浮层出现的方式。可选项：hover/click/focus/mousedown/context-menu | N\ntriggerElement | String / Slot / Function | - | 触发元素。值类型为字符串表示元素选择器。TS 类型：`string \\| TNode`。[通用类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/common.ts) | N\nvisible | Boolean | - | 是否显示浮层。支持语法糖 `v-model` 或 `v-model:visible`。TS 类型：`boolean` | N\nzIndex | Number | - | 组件层级，Web 侧样式默认为 5500，移动端和小程序样式默认为 1500 | N\nonOverlayClick | Function |  | TS 类型：`(context: { e: MouseEvent }) => void`<br/>内容面板点击时触发 | N\nonScroll | Function |  | TS 类型：`(context: { e: WheelEvent }) => void`<br/>下拉选项滚动事件 | N\nonScrollToBottom | Function |  | TS 类型：`(context: { e: WheelEvent }) => void`<br/>下拉滚动触底事件，常用于滚动到底执行具体业务逻辑 | N\nonVisibleChange | Function |  | TS 类型：`(visible: boolean, context: PopupVisibleChangeContext) => void`<br/>当浮层隐藏或显示时触发，`trigger=document` 表示点击非浮层元素触发；`trigger=context-menu` 表示右击触发。[详细类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/popup/type.ts)。<br/>`interface PopupVisibleChangeContext { e?: PopupTriggerEvent; trigger?: PopupTriggerSource }`<br/><br/>`type PopupTriggerEvent = MouseEvent \\| FocusEvent \\| KeyboardEvent`<br/><br/>`type PopupTriggerSource = 'document' \\| 'trigger-element-click' \\| 'trigger-element-hover' \\| 'trigger-element-blur' \\| 'trigger-element-focus' \\| 'trigger-element-mousedown' \\| 'trigger-element-close' \\| 'context-menu' \\| 'keydown-esc'`<br/> | N\n\n### Popup Events\n\n名称 | 参数 | 描述\n-- | -- | --\noverlay-click | `(context: { e: MouseEvent })` | 内容面板点击时触发\nscroll | `(context: { e: WheelEvent })` | 下拉选项滚动事件\nscroll-to-bottom | `(context: { e: WheelEvent })` | 下拉滚动触底事件，常用于滚动到底执行具体业务逻辑\nvisible-change | `(visible: boolean, context: PopupVisibleChangeContext)` | 当浮层隐藏或显示时触发，`trigger=document` 表示点击非浮层元素触发；`trigger=context-menu` 表示右击触发。[详细类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/popup/type.ts)。<br/>`interface PopupVisibleChangeContext { e?: PopupTriggerEvent; trigger?: PopupTriggerSource }`<br/><br/>`type PopupTriggerEvent = MouseEvent \\| FocusEvent \\| KeyboardEvent`<br/><br/>`type PopupTriggerSource = 'document' \\| 'trigger-element-click' \\| 'trigger-element-hover' \\| 'trigger-element-blur' \\| 'trigger-element-focus' \\| 'trigger-element-mousedown' \\| 'trigger-element-close' \\| 'context-menu' \\| 'keydown-esc'`<br/>\n\n### PopupInstanceFunctions 组件实例方法\n\n名称 | 参数 | 返回值 | 描述\n-- | -- | -- | --\ngetOverlay | \\- | `HTMLElement` | 获取浮层元素\ngetOverlayState | \\- | `{ hover: boolean }` | 获取浮层悬浮状态\nupdate | \\- | \\- | 更新浮层内容\n"
  },
  {
    "name": "progress",
    "propsData": ":: BASE_DOC ::\n\n## API\n\n### Progress Props\n\n名称 | 类型 | 默认值 | 描述 | 必传\n-- | -- | -- | -- | --\ncolor | String / Object / Array | '' | 进度条颜色。示例：'#ED7B2F' 或 'orange' 或 `['#f00', '#0ff', '#f0f']` 或 `{ '0%': '#f00', '100%': '#0ff' }` 或  `{ from: '#000', to: '#000' }` 等。TS 类型：`string \\| Array<string> \\| Record<string, string>` | N\nlabel | String / Boolean / Slot / Function | true | 进度百分比，可自定义。TS 类型：`string \\| boolean \\| TNode`。[通用类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/common.ts) | N\npercentage | Number | 0 | 进度条百分比 | N\nsize | String / Number | 'medium' | 进度条尺寸，示例：small/medium/large/240。small 值为 72； medium 值为 112；large 值为 160 | N\nstatus | String | - | 进度条状态。可选项：success/error/warning/active。TS 类型：`ProgressStatus` `type ProgressStatus = 'success' \\| 'error' \\| 'warning' \\| 'active'`。[详细类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/progress/type.ts) | N\nstrokeWidth | String / Number | - | 进度条线宽。宽度数值不能超过 size 的一半，否则不能输出环形进度 | N\ntheme | String | line | 进度条风格。值为 line，标签（label）显示在进度条右侧；值为 plump，标签（label）显示在进度条里面；值为 circle，标签（label）显示在进度条正中间。可选项：line/plump/circle。TS 类型：`ProgressTheme` `type ProgressTheme = 'line' \\| 'plump' \\| 'circle'`。[详细类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/progress/type.ts) | N\ntrackColor | String | '' | 进度条未完成部分颜色 | N\n"
  },
  {
    "name": "qrcode",
    "propsData": ":: BASE_DOC ::\n\n## API\n\n### QRCode Props\n\n名称 | 类型 | 默认值 | 描述 | 必传\n-- | -- | -- | -- | --\nbgColor | String | - | 二维码背景颜色 | N\nborderless | Boolean | false | 是否有边框 | N\ncolor | String | - | 二维码颜色 | N\nicon | String | - | 二维码中图片的地址 | N\niconSize | Number / Object | 40 | 二维码中图片的大小。TS 类型：`number \\| { width: number; height: number }` | N\nlevel | String | M | 二维码纠错等级。可选项：L/M/Q/H | N\nsize | Number | 160 | 二维码大小 | N\nstatus | String | active | 二维码状态。可选项：active/expired/loading/scanned。TS 类型：`QRStatus` `type QRStatus = \"active\" \\| \"expired\" \\| \"loading\" \\| \"scanned\"`。[详细类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/qrcode/type.ts) | N\nstatusRender | Slot / Function | - | 自定义状态渲染器。TS 类型：`(info:StatusRenderInfo) => TNode` `type StatusRenderInfo = {status:QRStatus;onRefresh?: () => void;}`。[通用类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/common.ts)。[详细类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/qrcode/type.ts) | N\ntype | String | canvas | 渲染类型。可选项：canvas/svg | N\nvalue | String | - | 扫描后的文本 | N\nonRefresh | Function |  | TS 类型：`() => void`<br/>点击\"点击刷新\"的回调 | N\n\n### QRCode Events\n\n名称 | 参数 | 描述\n-- | -- | --\nrefresh | \\- | 点击\"点击刷新\"的回调\n"
  },
  {
    "name": "radio",
    "propsData": ":: BASE_DOC ::\n\n## API\n\n### Radio Props\n\n名称 | 类型 | 默认值 | 描述 | 必传\n-- | -- | -- | -- | --\nallowUncheck | Boolean | false | 是否允许取消选中 | N\nchecked | Boolean | false | 是否选中。支持语法糖 `v-model` 或 `v-model:checked` | N\ndefaultChecked | Boolean | false | 是否选中。非受控属性 | N\ndefault | String / Slot / Function | - | 单选按钮内容，同 label。TS 类型：`string \\| TNode`。[通用类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/common.ts) | N\ndisabled | Boolean | undefined | 是否为禁用态。如果存在父组件 RadioGroup，默认值由 RadioGroup.disabled 控制。优先级：Radio.disabled > RadioGroup.disabled > Form.disabled | N\nlabel | String / Slot / Function | - | 主文案。TS 类型：`string \\| TNode`。[通用类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/common.ts) | N\nname | String | - | HTML 元素原生属性 | N\nreadonly | Boolean | undefined | 只读状态 | N\nvalue | String / Number / Boolean | undefined | 单选按钮的值。TS 类型：`T` | N\nonChange | Function |  | TS 类型：`(checked: boolean, context: { e: Event }) => void`<br/>选中状态变化时触发 | N\nonClick | Function |  | TS 类型：`(context: { e: MouseEvent }) => void`<br/>点击时触发，一般用于外层阻止冒泡场景 | N\n\n### Radio Events\n\n名称 | 参数 | 描述\n-- | -- | --\nchange | `(checked: boolean, context: { e: Event })` | 选中状态变化时触发\nclick | `(context: { e: MouseEvent })` | 点击时触发，一般用于外层阻止冒泡场景\n\n\n### RadioGroup Props\n\n名称 | 类型 | 默认值 | 描述 | 必传\n-- | -- | -- | -- | --\nallowUncheck | Boolean | false | 是否允许取消选中 | N\ndisabled | Boolean | undefined | 是否禁用全部子单选框。优先级：Radio.disabled > RadioGroup.disabled > Form.disabled | N\nname | String | - | HTML 元素原生属性 | N\noptions | Array | - | 单选组件按钮形式。RadioOption 数据类型为 string 或 number 时，表示 label 和 value 值相同。TS 类型：`Array<RadioOption>` `type RadioOption = string \\| number \\| RadioOptionObj` `interface RadioOptionObj { label?: string \\| TNode; value?: string \\| number \\| boolean; disabled?: boolean }`。[通用类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/common.ts)。[详细类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/radio/type.ts) | N\nreadonly | Boolean | undefined | 只读状态 | N\nsize | String | medium | 组件尺寸【讨论中】。可选项：small/medium/large。TS 类型：`SizeEnum`。[通用类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/common.ts) | N\ntheme | String | radio | 组件风格。可选项：radio/button | N\nvalue | String / Number / Boolean | - | 选中的值。支持语法糖 `v-model` 或 `v-model:value`。TS 类型：`T` `type RadioValue = string \\| number \\| boolean`。[详细类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/radio/type.ts) | N\ndefaultValue | String / Number / Boolean | - | 选中的值。非受控属性。TS 类型：`T` `type RadioValue = string \\| number \\| boolean`。[详细类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/radio/type.ts) | N\nvariant | String | outline | 单选组件按钮形式。可选项：outline/primary-filled/default-filled | N\nonChange | Function |  | TS 类型：`(value: T, context: { e: Event; name?:string }) => void`<br/>选中值发生变化时触发, `context.name` 指 RadioGroup 的 name 属性 | N\n\n### RadioGroup Events\n\n名称 | 参数 | 描述\n-- | -- | --\nchange | `(value: T, context: { e: Event; name?:string })` | 选中值发生变化时触发, `context.name` 指 RadioGroup 的 name 属性\n"
  },
  {
    "name": "range-input",
    "propsData": ":: BASE_DOC ::\n\n## API\n\n### RangeInput Props\n\n名称 | 类型 | 默认值 | 描述 | 必传\n-- | -- | -- | -- | --\nactiveIndex | Number | - | 输入框高亮状态序号 | N\nborderless | Boolean | false | 无边框模式 | N\nclearable | Boolean | false | 是否可清空 | N\ndisabled | Boolean | undefined | 是否禁用范围输入框 | N\nformat | Array / Function | - | 指定输入框展示值的格式。TS 类型：`InputFormatType \\| Array<InputFormatType>` | N\ninputProps | Object / Array | - | 透传 Input 输入框组件全部属性，数组第一项表示第一个输入框属性，第二项表示第二个输入框属性。示例：`[{ label: 'A', name: 'A-name' }, { label: 'B',  name: 'B-name' }]`。TS 类型：`InputProps \\| Array<InputProps>`，[Input API Documents](./input?tab=api)。[详细类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/range-input/type.ts) | N\nlabel | String / Slot / Function | - | 左侧内容。TS 类型：`string \\| TNode`。[通用类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/common.ts) | N\nplaceholder | String / Array | - | 占位符，示例：'请输入' 或者 ['开始日期', '结束日期']。TS 类型：`string \\| Array<string>` | N\nprefixIcon | Slot / Function | - | 组件前置图标。TS 类型：`TNode`。[通用类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/common.ts) | N\nreadonly | Boolean | undefined | 只读状态 | N\nseparator | String / Slot / Function | '-' | 范围分隔符。TS 类型：`string \\| TNode`。[通用类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/common.ts) | N\nshowClearIconOnEmpty | Boolean | false | 输入框内容为空时，悬浮状态是否显示清空按钮，默认不显示 | N\nsize | String | medium | 输入框尺寸。可选项：small/medium/large | N\nstatus | String | default | 输入框状态。可选项：default/success/warning/error | N\nsuffix | String / Slot / Function | - | 后置图标前的后置内容。TS 类型：`string \\| TNode`。[通用类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/common.ts) | N\nsuffixIcon | Slot / Function | - | 组件后置图标。TS 类型：`TNode`。[通用类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/common.ts) | N\ntips | String / Slot / Function | - | 输入框下方提示文本，会根据不同的 `status` 呈现不同的样式。TS 类型：`string \\| TNode`。[通用类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/common.ts) | N\nvalue | Array | [] | 范围输入框的值。支持语法糖 `v-model` 或 `v-model:value`。TS 类型：`RangeInputValue` `type RangeInputValue = Array<InputValue>`。[详细类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/range-input/type.ts) | N\ndefaultValue | Array | [] | 范围输入框的值。非受控属性。TS 类型：`RangeInputValue` `type RangeInputValue = Array<InputValue>`。[详细类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/range-input/type.ts) | N\nonBlur | Function |  | TS 类型：`(value: RangeInputValue, context?: { e?: FocusEvent; position?: RangeInputPosition }) => void`<br/>范围输入框失去焦点时触发 | N\nonChange | Function |  | TS 类型：`(value: RangeInputValue, context?: { e?: InputEvent \\| MouseEvent \\| CompositionEvent; position?: RangeInputPosition; trigger?: 'input' \\| 'initial' \\| 'clear' })    => void`<br/>范围输入框值发生变化时触发。[详细类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/range-input/type.ts)。<br/>`type RangeInputPosition = 'first' \\| 'second' \\| 'all'`<br/> | N\nonClear | Function |  | TS 类型：`(context: { e: MouseEvent }) => void`<br/>清空按钮点击时触发 | N\nonClick | Function |  | TS 类型：`(context?: { e?: MouseEvent; position?: RangeInputPosition }) => void`<br/>范围输入框点击时触发 | N\nonEnter | Function |  | TS 类型：`(value: RangeInputValue, context?: { e?: InputEvent \\| MouseEvent; position?: RangeInputPosition })  => void`<br/>回车键按下时触发 | N\nonFocus | Function |  | TS 类型：`(value: RangeInputValue, context?: { e?: FocusEvent; position?: RangeInputPosition }) => void`<br/>范围输入框获得焦点时触发 | N\nonMouseenter | Function |  | TS 类型：`(context: { e: MouseEvent }) => void`<br/>进入输入框时触发 | N\nonMouseleave | Function |  | TS 类型：`(context: { e: MouseEvent }) => void`<br/>离开输入框时触发 | N\n\n### RangeInput Events\n\n名称 | 参数 | 描述\n-- | -- | --\nblur | `(value: RangeInputValue, context?: { e?: FocusEvent; position?: RangeInputPosition })` | 范围输入框失去焦点时触发\nchange | `(value: RangeInputValue, context?: { e?: InputEvent \\| MouseEvent \\| CompositionEvent; position?: RangeInputPosition; trigger?: 'input' \\| 'initial' \\| 'clear' })   ` | 范围输入框值发生变化时触发。[详细类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/range-input/type.ts)。<br/>`type RangeInputPosition = 'first' \\| 'second' \\| 'all'`<br/>\nclear | `(context: { e: MouseEvent })` | 清空按钮点击时触发\nclick | `(context?: { e?: MouseEvent; position?: RangeInputPosition })` | 范围输入框点击时触发\nenter | `(value: RangeInputValue, context?: { e?: InputEvent \\| MouseEvent; position?: RangeInputPosition }) ` | 回车键按下时触发\nfocus | `(value: RangeInputValue, context?: { e?: FocusEvent; position?: RangeInputPosition })` | 范围输入框获得焦点时触发\nmouseenter | `(context: { e: MouseEvent })` | 进入输入框时触发\nmouseleave | `(context: { e: MouseEvent })` | 离开输入框时触发\n\n### RangeInputInstanceFunctions 组件实例方法\n\n名称 | 参数 | 返回值 | 描述\n-- | -- | -- | --\nblur | `(options?: {position?: RangeInputPosition})` | \\- | 使其中一个输入框失去焦点\nfocus | `(options?: {position?: RangeInputPosition})` | \\- | 使其中一个输入框获得焦点\nselect | `(options?: {position?: RangeInputPosition})` | \\- | 使其中一个输入框选中内容\n\n\n### RangeInputPopup Props\n\n名称 | 类型 | 默认值 | 描述 | 必传\n-- | -- | -- | -- | --\nautoWidth | Boolean | false | 宽度随内容自适应 | N\ndisabled | Boolean | - | 是否禁用范围输入框，值为数组表示可分别控制某一个输入框是否禁用 | N\ninputValue | Array | - | 输入框的值。支持语法糖 `v-model:inputValue`。TS 类型：`RangeInputValue` | N\ndefaultInputValue | Array | - | 输入框的值。非受控属性。TS 类型：`RangeInputValue` | N\nlabel | String / Slot / Function | - | 左侧文本。TS 类型：`string \\| TNode`。[通用类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/common.ts) | N\npanel | String / Slot / Function | - | 下拉框内容，可完全自定义。TS 类型：`string \\| TNode`。[通用类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/common.ts) | N\npopupProps | Object | - | 透传 Popup 浮层组件全部属性。TS 类型：`PopupProps`，[Popup API Documents](./popup?tab=api)。[详细类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/range-input/type.ts) | N\npopupVisible | Boolean | - | 是否显示下拉框 | N\ndefaultPopupVisible | Boolean | - | 是否显示下拉框。非受控属性 | N\nrangeInputProps | Object | - | 透传 RangeInput 组件全部属性。TS 类型：`RangeInputProps`，[RangeInput API Documents](./range-input?tab=api)。[详细类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/range-input/type.ts) | N\nreadonly | Boolean | undefined | 只读状态，值为真会隐藏输入框，且无法打开下拉框 | N\nstatus | String | default | 输入框状态。可选项：default/success/warning/error | N\ntips | String / Slot / Function | - | 输入框下方提示文本，会根据不同的 `status` 呈现不同的样式。TS 类型：`string \\| TNode`。[通用类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/common.ts) | N\nonInputChange | Function |  | TS 类型：`(value: RangeInputValue, context?: RangeInputValueChangeContext)  => void`<br/>输入框值发生变化时触发，`context.trigger` 表示触发输入框值变化的来源：文本输入触发、清除按钮触发等。[详细类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/range-input/type.ts)。<br/>`type RangeInputValueChangeContext = { e?: InputEvent \\| MouseEvent; trigger?: 'input' \\| 'clear', position?: RangeInputPosition }`<br/> | N\nonPopupVisibleChange | Function |  | TS 类型：`(visible: boolean, context: PopupVisibleChangeContext) => void`<br/>下拉框显示或隐藏时触发。[详细类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/range-input/type.ts)。<br/>`import { PopupVisibleChangeContext } from '@Popup'`<br/> | N\n\n### RangeInputPopup Events\n\n名称 | 参数 | 描述\n-- | -- | --\ninput-change | `(value: RangeInputValue, context?: RangeInputValueChangeContext) ` | 输入框值发生变化时触发，`context.trigger` 表示触发输入框值变化的来源：文本输入触发、清除按钮触发等。[详细类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/range-input/type.ts)。<br/>`type RangeInputValueChangeContext = { e?: InputEvent \\| MouseEvent; trigger?: 'input' \\| 'clear', position?: RangeInputPosition }`<br/>\npopup-visible-change | `(visible: boolean, context: PopupVisibleChangeContext)` | 下拉框显示或隐藏时触发。[详细类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/range-input/type.ts)。<br/>`import { PopupVisibleChangeContext } from '@Popup'`<br/>\n"
  },
  {
    "name": "rate",
    "propsData": ":: BASE_DOC ::\n\n## API\n\n### Rate Props\n\n名称 | 类型 | 默认值 | 描述 | 必传\n-- | -- | -- | -- | --\nallowHalf | Boolean | false | 是否允许半选 | N\nclearable | Boolean | false | 是否允许清除评分，如果允许，重新点击当前评分清除 | N\ncolor | String / Array | '#ED7B2F' | 评分图标的颜色，样式中默认为 #ED7B2F。一个值表示设置选中高亮的五角星颜色，示例：[选中颜色]。数组则表示分别设置 选中高亮的五角星颜色 和 未选中暗灰的五角星颜色，[选中颜色，未选中颜色]。示例：['#ED7B2F', '#E3E6EB']。TS 类型：`string \\| Array<string>` | N\ncount | Number | 5 | 评分的数量 | N\ndisabled | Boolean | undefined | 是否禁用评分 | N\ngap | Number | 4 | 评分图标的间距 | N\nicon | Slot / Function | - | 自定义评分图标。TS 类型：`TNode`。[通用类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/common.ts) | N\nshowText | Boolean | false | 是否显示对应的辅助文字 | N\nsize | String | 24px | 评分图标的大小 | N\ntexts | Array | [] | 评分等级对应的辅助文字。组件内置默认值为：['极差', '失望', '一般', '满意', '惊喜']。自定义值示例：['1分', '2分', '3分', '4分', '5分']。TS 类型：`Array<string>` | N\nvalue | Number | 0 | 选择评分的值。支持语法糖 `v-model` 或 `v-model:value` | N\ndefaultValue | Number | 0 | 选择评分的值。非受控属性 | N\nonChange | Function |  | TS 类型：`(value: number) => void`<br/>评分数改变时触发 | N\n\n### Rate Events\n\n名称 | 参数 | 描述\n-- | -- | --\nchange | `(value: number)` | 评分数改变时触发\n"
  },
  {
    "name": "select",
    "propsData": ":: BASE_DOC ::\n\n## API\n\n### Select Props\n\n名称 | 类型 | 默认值 | 描述 | 必传\n-- | -- | -- | -- | --\nautoWidth | Boolean | false | 宽度随内容自适应 | N\nautofocus | Boolean | false | 自动聚焦 | N\nborderless | Boolean | false | 无边框模式 | N\nclearable | Boolean | false | 是否可以清空选项 | N\ncollapsedItems | Slot / Function | - | 多选情况下，用于设置折叠项内容，默认为 `+N`。如果需要悬浮就显示其他内容，可以使用 collapsedItems 自定义。`value` 表示当前存在的所有标签，`collapsedSelectedItems` 表示折叠的标签，泛型 `T` 继承 `SelectOption`，表示选项数据；`count` 表示折叠的数量, `onClose` 表示移除标签。TS 类型：`TNode<{ value: T[]; collapsedSelectedItems: T[]; count: number; onClose: (context: { index: number, e?: MouseEvent }) => void }>`。[通用类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/common.ts) | N\ncreatable | Boolean | false | 是否允许用户创建新条目，需配合 filterable 使用 | N\ndisabled | Boolean | undefined | 是否禁用组件 | N\nempty | String / Slot / Function | - | 当下拉列表为空时显示的内容。TS 类型：`string \\| TNode`。[通用类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/common.ts) | N\nfilter | Function | - | 自定义搜索规则，用于对现有数据进行搜索，判断是否过滤某一项数据。参数 `filterWords` 表示搜索词，`option`表示单个选项内容，返回值为 `true` 保留该选项，返回值为 `false` 则隐藏该选项。使用该方法时无需设置 `filterable`。TS 类型：`(filterWords: string, option: T) => boolean \\| Promise<boolean>` | N\nfilterable | Boolean | false | 是否可搜索，默认搜索规则不区分大小写，全文本任意位置匹配。如果默认搜索规则不符合业务需求，可以更为使用 `filter` 自定义过滤规则 | N\ninputProps | Object | - | 透传 Input 输入框组件的全部属性。TS 类型：`InputProps`，[Input API Documents](./input?tab=api)。[详细类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/select/type.ts) | N\ninputValue | String / Number | - | 输入框的值。支持语法糖 `v-model:inputValue`。TS 类型：`InputValue`，[Input API Documents](./input?tab=api)。[详细类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/select/type.ts) | N\tinputValue | String / Number | - | 输入框的值。支持语法糖 `v-model:inputValue`。TS 类型：`string` | N\ndefaultInputValue | String / Number | - | 输入框的值。非受控属性。TS 类型：`InputValue`，[Input API Documents](./input?tab=api)。[详细类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/select/type.ts) | N\tdefaultInputValue | String / Number | - | 输入框的值。非受控属性。TS 类型：`string` | N\nkeys | Object | - | 用来定义 value / label / disabled 在 `options` 中对应的字段别名。TS 类型：`KeysType`。[通用类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/common.ts) | N\nlabel | String / Slot / Function | - | 左侧文本。TS 类型：`string \\| TNode`。[通用类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/common.ts) | N\nloading | Boolean | false | 是否为加载状态 | N\nloadingText | String / Slot / Function | - | 远程加载时显示的文字，支持自定义。如加上超链接。TS 类型：`string \\| TNode`。[通用类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/common.ts) | N\nmax | Number | 0 | 用于控制多选数量，值为 0 则不限制 | N\nminCollapsedNum | Number | 0 | 最小折叠数量，用于多选情况下折叠选中项，超出该数值的选中项折叠。值为 0 则表示不折叠 | N\nmultiple | Boolean | false | 是否允许多选 | N\noptions | Array | - | 数据化配置选项内容。TS 类型：`Array<T>` | N\npanelBottomContent | String / Slot / Function | - | 面板内的底部内容。TS 类型：`string \\| TNode`。[通用类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/common.ts) | N\npanelTopContent | String / Slot / Function | - | 面板内的顶部内容。TS 类型：`string \\| TNode`。[通用类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/common.ts) | N\nplaceholder | String | undefined | 占位符 | N\npopupProps | Object | - | 透传给 popup 组件的全部属性。TS 类型：`PopupProps`，[Popup API Documents](./popup?tab=api)。[详细类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/select/type.ts) | N\npopupVisible | Boolean | - | 是否显示下拉框。支持语法糖 `v-model:popupVisible` | N\ndefaultPopupVisible | Boolean | - | 是否显示下拉框。非受控属性 | N\nprefixIcon | Slot / Function | - | 组件前置图标。TS 类型：`TNode`。[通用类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/common.ts) | N\nreadonly | Boolean | undefined | 只读状态，值为真会隐藏输入框，且无法打开下拉框 | N\nreserveKeyword | Boolean | false | 多选且可搜索时，是否在选中一个选项后保留当前的搜索关键词 | N\nscroll | Object | - | 懒加载和虚拟滚动。为保证组件收益最大化，当数据量小于阈值 `scroll.threshold` 时，无论虚拟滚动的配置是否存在，组件内部都不会开启虚拟滚动，`scroll.threshold` 默认为 `100`。TS 类型：`InfinityScroll`。[通用类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/common.ts) | N\nselectInputProps | Object | - | 透传 SelectInput 筛选器输入框组件的全部属性。TS 类型：`SelectInputProps`，[SelectInput API Documents](./select-input?tab=api)。[详细类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/select/type.ts) | N\nshowArrow | Boolean | true | 是否显示右侧箭头，默认显示 | N\nsize | String | medium | 组件尺寸。可选项：small/medium/large。TS 类型：`SizeEnum`。[通用类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/common.ts) | N\nstatus | String | default | 输入框状态。可选项：default/success/warning/error | N\nsuffix | String / Slot / Function | - | 后置图标前的后置内容。TS 类型：`string \\| TNode`。[通用类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/common.ts) | N\nsuffixIcon | Slot / Function | - | 组件后置图标。TS 类型：`TNode`。[通用类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/common.ts) | N\ntagInputProps | Object | - | 透传 TagInput 标签输入框组件的全部属性。TS 类型：`TagInputProps`，[TagInput API Documents](./tag-input?tab=api)。[详细类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/select/type.ts) | N\ntagProps | Object | - | 透传 Tag 标签组件全部属性。TS 类型：`TagProps`，[Tag API Documents](./tag?tab=api)。[详细类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/select/type.ts) | N\ntips | String / Slot / Function | - | 输入框下方提示文本，会根据不同的 `status` 呈现不同的样式。TS 类型：`string \\| TNode`。[通用类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/common.ts) | N\nvalue | String / Number / Boolean / Object / Array | - | 选中值。支持语法糖 `v-model` 或 `v-model:value`。TS 类型：`SelectValue` `type SelectValue<T extends SelectOption = SelectOption> = string \\| number \\| boolean \\| T \\| Array<SelectValue<T>>`。[详细类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/select/type.ts) | N\ndefaultValue | String / Number / Boolean / Object / Array | - | 选中值。非受控属性。TS 类型：`SelectValue` `type SelectValue<T extends SelectOption = SelectOption> = string \\| number \\| boolean \\| T \\| Array<SelectValue<T>>`。[详细类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/select/type.ts) | N\nvalueDisplay | String / Slot / Function | - | 自定义选中项呈现的内容。TS 类型：`string \\| TNode<{ value: SelectValue; onClose: (index: number) => void; displayValue?: SelectValue; } \\| SelectValue>`。[通用类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/common.ts) | N\nvalueType | String | value | 用于控制选中值的类型。假设数据选项为：`[{ label: '姓名', value: 'name' }]`，value 表示值仅返回数据选项中的 value， object 表示值返回全部数据。可选项：value/object | N\nonBlur | Function |  | TS 类型：`(context: { value: SelectValue; e: FocusEvent \\| KeyboardEvent }) => void`<br/>输入框失去焦点时触发 | N\nonChange | Function |  | TS 类型：`(value: SelectValue, context: { option?: T, selectedOptions: T[], trigger: SelectValueChangeTrigger; e?: MouseEvent \\| KeyboardEvent }) => void`<br/>选中值变化时触发。`context.trigger` 表示触发变化的来源；`context.selectedOptions` 表示选中值的完整对象，数组长度一定和 `value` 相同；`context.option` 表示当前操作的选项，不一定存在。[详细类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/select/type.ts)。<br/>`type SelectValueChangeTrigger = 'clear' \\| 'tag-remove' \\| 'backspace' \\| 'check' \\| 'uncheck' \\| 'default'`<br/> | N\nonClear | Function |  | TS 类型：`(context: { e: MouseEvent }) => void`<br/>点击清除按钮时触发 | N\nonCreate | Function |  | TS 类型：`(value: string \\| number \\| boolean) => void`<br/>当选择新创建的条目时触发 | N\nonEnter | Function |  | TS 类型：`(context: { inputValue: string; e: KeyboardEvent; value: SelectValue }) => void`<br/>回车键按下时触发。`inputValue` 表示输入框的值，`value` 表示选中值 | N\nonFocus | Function |  | TS 类型：`(context: { value: SelectValue; e: FocusEvent \\| KeyboardEvent }) => void`<br/>输入框获得焦点时触发 | N\nonInputChange | Function |  | TS 类型：`(value: InputValue, context?: SelectInputValueChangeContext) => void`<br/>输入框值发生变化时触发，`context.trigger` 表示触发输入框值变化的来源：文本输入触发、清除按钮触发、失去焦点等。[详细类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/select/type.ts)。<br/>`import { SelectInputValueChangeContext } from '@SelectInput'`<br/> | N\nonPopupVisibleChange | Function |  | TS 类型：`(visible: boolean, context: PopupVisibleChangeContext) => void`<br/>下拉框显示或隐藏时触发。[详细类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/select/type.ts)。<br/>`import { PopupVisibleChangeContext } from '@Popup'`<br/> | N\nonRemove | Function |  | TS 类型：`(options: SelectRemoveContext<T>) => void`<br/>多选模式下，选中数据被移除时触发。[详细类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/select/type.ts)。<br/>`interface SelectRemoveContext<T> { value: string \\| number; data: T; e: MouseEvent \\| KeyboardEvent }`<br/> | N\nonSearch | Function |  | TS 类型：`(filterWords: string, context: { e: KeyboardEvent }) => void`<br/>输入值变化时，触发搜索事件。主要用于远程搜索新数据 | N\n\n### Select Events\n\n名称 | 参数 | 描述\n-- | -- | --\nblur | `(context: { value: SelectValue; e: FocusEvent \\| KeyboardEvent })` | 输入框失去焦点时触发\nchange | `(value: SelectValue, context: { option?: T, selectedOptions: T[], trigger: SelectValueChangeTrigger; e?: MouseEvent \\| KeyboardEvent })` | 选中值变化时触发。`context.trigger` 表示触发变化的来源；`context.selectedOptions` 表示选中值的完整对象，数组长度一定和 `value` 相同；`context.option` 表示当前操作的选项，不一定存在。[详细类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/select/type.ts)。<br/>`type SelectValueChangeTrigger = 'clear' \\| 'tag-remove' \\| 'backspace' \\| 'check' \\| 'uncheck' \\| 'default'`<br/>\nclear | `(context: { e: MouseEvent })` | 点击清除按钮时触发\ncreate | `(value: string \\| number)` | 当选择新创建的条目时触发\nenter | `(context: { inputValue: string; e: KeyboardEvent; value: SelectValue })` | 回车键按下时触发。`inputValue` 表示输入框的值，`value` 表示选中值\nfocus | `(context: { value: SelectValue; e: FocusEvent \\| KeyboardEvent })` | 输入框获得焦点时触发\ninput-change | `(value: InputValue, context?: SelectInputValueChangeContext)` | 输入框值发生变化时触发，`context.trigger` 表示触发输入框值变化的来源：文本输入触发、清除按钮触发、失去焦点等。[详细类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/select/type.ts)。<br/>`import { SelectInputValueChangeContext } from '@SelectInput'`<br/>\npopup-visible-change | `(visible: boolean, context: PopupVisibleChangeContext)` | 下拉框显示或隐藏时触发。[详细类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/select/type.ts)。<br/>`import { PopupVisibleChangeContext } from '@Popup'`<br/>\nremove | `(options: SelectRemoveContext<T>)` | 多选模式下，选中数据被移除时触发。[详细类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/select/type.ts)。<br/>`interface SelectRemoveContext<T> { value: string \\| number; data: T; e: MouseEvent \\| KeyboardEvent }`<br/>\nsearch | `(filterWords: string, context: { e: KeyboardEvent })` | 输入值变化时，触发搜索事件。主要用于远程搜索新数据\n\n\n### Option Props\n\n名称 | 类型 | 默认值 | 描述 | 必传\n-- | -- | -- | -- | --\ncheckAll | Boolean | false | 当前选项是否为全选，全选可以在顶部，也可以在底部。点击当前选项会选中禁用态除外的全部选项，即使是分组选择器也会选中全部选项 | N\ncontent | String / Slot / Function | - | 用于定义复杂的选项内容。TS 类型：`string \\| TNode`。[通用类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/common.ts) | N\ndefault | String / Slot / Function | - | 用于定义复杂的选项内容。同 content。TS 类型：`string \\| TNode`。[通用类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/common.ts) | N\ndisabled | Boolean | false | 是否禁用该选项 | N\nlabel | String | - | 选项名称 | N\ntitle | String | - | 选项标题，在选项过长时hover选项展示 | N\nvalue | String / Number / Boolean | - | 选项值 | N\n\n\n### OptionGroup Props\n\n名称 | 类型 | 默认值 | 描述 | 必传\n-- | -- | -- | -- | --\ndivider | Boolean | true | 是否显示分隔线 | N\nlabel | String | - | 分组别名 | N\n\n### TScroll\n\n名称 | 类型 | 默认值 | 描述 | 必传\n-- | -- | -- | -- | --\nbufferSize | Number | 20 | 表示除可视区域外，额外渲染的行数，避免快速滚动过程中，新出现的内容来不及渲染从而出现空白 | N\nisFixedRowHeight | Boolean | false | 表示每行内容是否同一个固定高度，仅在 `scroll.type` 为 `virtual` 时有效，该属性设置为 `true` 时，可用于简化虚拟滚动内部计算逻辑，提升性能，此时则需要明确指定 `scroll.rowHeight` 属性的值 | N\nrowHeight | Number | - | 行高，不会给`<tr>`元素添加样式高度，仅作为滚动时的行高参考。一般情况不需要设置该属性。如果设置，可尽量将该属性设置为每行平均高度，从而使得滚动过程更加平滑 | N\nthreshold | Number | 100 | 启动虚拟滚动的阈值。为保证组件收益最大化，当数据量小于阈值 `scroll.threshold` 时，无论虚拟滚动的配置是否存在，组件内部都不会开启虚拟滚动 | N\ntype | String | - | 必需。滚动加载类型，有两种：懒加载和虚拟滚动。<br />值为 `lazy` ，表示滚动时会进行懒加载，非可视区域内的内容将不会默认渲染，直到该内容可见时，才会进行渲染，并且已渲染的内容滚动到不可见时，不会被销毁；<br />值为`virtual`时，表示会进行虚拟滚动，无论滚动条滚动到哪个位置，同一时刻，仅渲染该可视区域内的内容，当需要展示的数据量较大时，建议开启该特性。可选项：lazy/virtual | Y\n"
  },
  {
    "name": "select-input",
    "propsData": ":: BASE_DOC ::\n\n## API\n\n### SelectInput Props\n\n名称 | 类型 | 默认值 | 描述 | 必传\n-- | -- | -- | -- | --\nallowInput | Boolean | false | 是否允许输入 | N\nautoWidth | Boolean | false | 宽度随内容自适应 | N\nautofocus | Boolean | false | 自动聚焦 | N\nborderless | Boolean | false | 无边框模式 | N\nclearable | Boolean | false | 是否可清空 | N\ncollapsedItems | Slot / Function | - | 标签过多的情况下，折叠项内容，默认为 `+N`。如果需要悬浮就显示其他内容，可以使用 `collapsedItems` 自定义。`value` 表示所有标签值，`collapsedSelectedItems` 表示折叠标签值，`count` 表示折叠的数量，`onClose` 表示移除标签的事件回调。TS 类型：`TNode<{ value: SelectInputValue; collapsedSelectedItems: SelectInputValue; count: number; onClose: (context: { index: number, e?: MouseEvent }) => void }>`。[通用类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/common.ts) | N\ndisabled | Boolean | undefined | 是否禁用 | N\ninputProps | Object | - | 透传 Input 输入框组件全部属性。TS 类型：`InputProps`，[Input API Documents](./input?tab=api)。[详细类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/select-input/type.ts) | N\ninputValue | String / Number | - | 输入框的值。支持语法糖 `v-model:inputValue`。TS 类型：`string` | N\ndefaultInputValue | String / Number | - | 输入框的值。非受控属性。TS 类型：`string` | N\nkeys | Object | - | 定义字段别名，示例：`{ label: 'text', value: 'id', children: 'list' }`。TS 类型：`SelectInputKeys` `interface SelectInputKeys { label?: string; value?: string; children?: string }`。[详细类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/select-input/type.ts) | N\nlabel | String / Slot / Function | - | 左侧文本。TS 类型：`string \\| TNode`。[通用类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/common.ts) | N\nloading | Boolean | false | 是否处于加载状态 | N\nminCollapsedNum | Number | 0 | 最小折叠数量，用于标签数量过多的情况下折叠选中项，超出该数值的选中项折叠。值为 0 则表示不折叠 | N\nmultiple | Boolean | false | 是否为多选模式，默认为单选 | N\npanel | String / Slot / Function | - | 下拉框内容，可完全自定义。TS 类型：`string \\| TNode`。[通用类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/common.ts) | N\nplaceholder | String | - | 占位符 | N\npopupProps | Object | - | 透传 Popup 浮层组件全部属性。TS 类型：`PopupProps`，[Popup API Documents](./popup?tab=api)。[详细类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/select-input/type.ts) | N\npopupVisible | Boolean | - | 是否显示下拉框。支持语法糖 `v-model:popupVisible` | N\ndefaultPopupVisible | Boolean | - | 是否显示下拉框。非受控属性 | N\nprefixIcon | Slot / Function | - | 组件前置图标。TS 类型：`TNode`。[通用类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/common.ts) | N\nreadonly | Boolean | undefined | 只读状态，值为真会隐藏输入框，且无法打开下拉框 | N\nreserveKeyword | Boolean | false | 多选且可搜索时，是否在选中一个选项后保留当前的搜索关键词 | N\nsize | String | medium | 组件尺寸。可选项：small/medium/large。TS 类型：`SizeEnum`。[通用类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/common.ts) | N\nstatus | String | default | 输入框状态。可选项：default/success/warning/error | N\nsuffix | String / Slot / Function | - | 后置图标前的后置内容。TS 类型：`string \\| TNode`。[通用类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/common.ts) | N\nsuffixIcon | Slot / Function | - | 组件后置图标。TS 类型：`TNode`。[通用类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/common.ts) | N\ntag | String / Slot / Function | - | 多选场景下，自定义选中标签的内部内容。注意和 `valueDisplay` 区分，`valueDisplay`  是用来定义全部标签内容，而非某一个标签。TS 类型：`string \\| TNode<{ value: string \\| number }>`。[通用类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/common.ts) | N\ntagInputProps | Object | - | 透传 TagInput 组件全部属性。TS 类型：`TagInputProps`，[TagInput API Documents](./tag-input?tab=api)。[详细类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/select-input/type.ts) | N\ntagProps | Object | - | 透传 Tag 标签组件全部属性。TS 类型：`TagProps`，[Tag API Documents](./tag?tab=api)。[详细类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/select-input/type.ts) | N\ntips | String / Slot / Function | - | 输入框下方提示文本，会根据不同的 `status` 呈现不同的样式。TS 类型：`string \\| TNode`。[通用类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/common.ts) | N\nvalue | String / Number / Boolean / Object / Array / Date | undefined | 全部标签值。值为数组表示多个标签，值为非数组表示单个数值。TS 类型：`SelectInputValue` `type SelectInputValue = string \\| number \\| boolean \\| Date \\| Object \\| Array<any> \\| Array<SelectInputValue>`。[详细类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/select-input/type.ts) | N\nvalueDisplay | String / Slot / Function | - | 自定义值呈现的全部内容，参数为所有标签的值。TS 类型：`string \\| TNode<{ value: TagInputValue; onClose: (index: number, item?: any) => void }>`。[通用类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/common.ts) | N\nonBlur | Function |  | TS 类型：`(value: SelectInputValue, context: SelectInputBlurContext) => void`<br/>失去焦点时触发，`context.inputValue` 表示输入框的值；`context.tagInputValue` 表示标签输入框的值。[详细类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/select-input/type.ts)。<br/>`type SelectInputBlurContext = PopupVisibleChangeContext & { inputValue: string; tagInputValue?: TagInputValue; }`<br/> | N\nonClear | Function |  | TS 类型：`(context: { e: MouseEvent }) => void`<br/>清空按钮点击时触发 | N\nonEnter | Function |  | TS 类型：`(value: SelectInputValue, context: { e: KeyboardEvent; inputValue: string; tagInputValue?: TagInputValue }) => void`<br/>按键按下 Enter 时触发 | N\nonFocus | Function |  | TS 类型：`(value: SelectInputValue, context: SelectInputFocusContext) => void`<br/>聚焦时触发。[详细类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/select-input/type.ts)。<br/>`interface SelectInputFocusContext { inputValue: string; tagInputValue?: TagInputValue; e: FocusEvent }`<br/> | N\nonInputChange | Function |  | TS 类型：`(value: string, context?: SelectInputValueChangeContext) => void`<br/>输入框值发生变化时触发，`context.trigger` 表示触发输入框值变化的来源：文本输入触发、清除按钮触发等。[详细类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/select-input/type.ts)。<br/>`interface SelectInputValueChangeContext { e?: Event \\| InputEvent \\| MouseEvent \\| FocusEvent \\| KeyboardEvent \\| CompositionEvent; trigger: 'input' \\| 'clear' \\| 'blur' \\| 'focus' \\| 'initial' \\| 'change' }`<br/> | N\nonMouseenter | Function |  | TS 类型：`(context: { e: MouseEvent }) => void`<br/>进入输入框时触发 | N\nonMouseleave | Function |  | TS 类型：`(context: { e: MouseEvent }) => void`<br/>离开输入框时触发 | N\nonPaste | Function |  | TS 类型：`(context: { e: ClipboardEvent; pasteValue: string }) => void`<br/>粘贴事件，`pasteValue` 表示粘贴板的内容 | N\nonPopupVisibleChange | Function |  | TS 类型：`(visible: boolean, context: PopupVisibleChangeContext) => void`<br/>下拉框显示或隐藏时触发。[详细类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/select-input/type.ts)。<br/>`import { PopupVisibleChangeContext } from '@Popup'`<br/> | N\nonTagChange | Function |  | TS 类型：`(value: TagInputValue, context: SelectInputChangeContext) => void`<br/>值变化时触发，参数 `context.trigger` 表示数据变化的触发来源；`context.index` 指当前变化项的下标；`context.item` 指当前变化项；`context.e` 表示事件参数。[详细类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/select-input/type.ts)。<br/>`type SelectInputChangeContext = TagInputChangeContext`<br/> | N\n\n### SelectInput Events\n\n名称 | 参数 | 描述\n-- | -- | --\nblur | `(value: SelectInputValue, context: SelectInputBlurContext)` | 失去焦点时触发，`context.inputValue` 表示输入框的值；`context.tagInputValue` 表示标签输入框的值。[详细类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/select-input/type.ts)。<br/>`type SelectInputBlurContext = PopupVisibleChangeContext & { inputValue: string; tagInputValue?: TagInputValue; }`<br/>\nclear | `(context: { e: MouseEvent })` | 清空按钮点击时触发\nenter | `(value: SelectInputValue, context: { e: KeyboardEvent; inputValue: string; tagInputValue?: TagInputValue })` | 按键按下 Enter 时触发\nfocus | `(value: SelectInputValue, context: SelectInputFocusContext)` | 聚焦时触发。[详细类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/select-input/type.ts)。<br/>`interface SelectInputFocusContext { inputValue: string; tagInputValue?: TagInputValue; e: FocusEvent }`<br/>\ninput-change | `(value: string, context?: SelectInputValueChangeContext)` | 输入框值发生变化时触发，`context.trigger` 表示触发输入框值变化的来源：文本输入触发、清除按钮触发等。[详细类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/select-input/type.ts)。<br/>`interface SelectInputValueChangeContext { e?: Event \\| InputEvent \\| MouseEvent \\| FocusEvent \\| KeyboardEvent \\| CompositionEvent; trigger: 'input' \\| 'clear' \\| 'blur' \\| 'focus' \\| 'initial' \\| 'change' }`<br/>\nmouseenter | `(context: { e: MouseEvent })` | 进入输入框时触发\nmouseleave | `(context: { e: MouseEvent })` | 离开输入框时触发\npaste | `(context: { e: ClipboardEvent; pasteValue: string })` | 粘贴事件，`pasteValue` 表示粘贴板的内容\npopup-visible-change | `(visible: boolean, context: PopupVisibleChangeContext)` | 下拉框显示或隐藏时触发。[详细类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/select-input/type.ts)。<br/>`import { PopupVisibleChangeContext } from '@Popup'`<br/>\ntag-change | `(value: TagInputValue, context: SelectInputChangeContext)` | 值变化时触发，参数 `context.trigger` 表示数据变化的触发来源；`context.index` 指当前变化项的下标；`context.item` 指当前变化项；`context.e` 表示事件参数。[详细类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/select-input/type.ts)。<br/>`type SelectInputChangeContext = TagInputChangeContext`<br/>\n"
  },
  {
    "name": "skeleton",
    "propsData": ":: BASE_DOC ::\n\n## API\n### Skeleton Props\n\n名称 | 类型 | 默认值 | 说明 | 必传\n-- | -- | -- | -- | --\nanimation | String | none | 动画效果，有「渐变加载动画」和「闪烁加载动画」两种。值为 'none' 则表示没有动画。可选项：gradient/flashed/none | N\ndelay | Number | 0 | 【开发中】延迟显示加载效果的时间，用于防止请求速度过快引起的加载闪烁，单位：毫秒 | N\nloading | Boolean | true | 是否为加载状态，如果是则显示骨架图，如果不是则显示加载完成的内容 | N\nrowCol | Array | - | 高级设置，用于自定义行列数量、宽度高度、间距等。【示例一】，`[1, 1, 2]` 表示输出三行骨架图，第一行一列，第二行一列，第三行两列。【示例二】，`[1, 1, { width: '100px' }]` 表示自定义第三行的宽度为 `100px`。【示例三】，`[1, 2, [{ width, height }, { width, height, marginLeft }]]` 表示第三行有两列，且自定义宽度、高度、尺寸（圆形或方形使用）、间距、内容等。TS 类型：`SkeletonRowCol` `type SkeletonRowCol = Array<Number \\| SkeletonRowColObj \\| Array<SkeletonRowColObj>>` `interface SkeletonRowColObj { width?: string; height?: string; size?: string; marginRight?: string; marginLeft?: string; margin?: string; content?: string \\| TNode; type?: 'rect' \\| 'circle' \\| 'text' }`。[通用类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/common.ts)。[详细类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/skeleton/type.ts) | N\ntheme | String | text | 快捷定义骨架图风格，有基础、头像组合等，具体参看代码示例。可选项：text/avatar/paragraph/avatar-text/tab/article | N\n"
  },
  {
    "name": "slider",
    "propsData": ":: BASE_DOC ::\n\n## API\n### Slider Props\n\n名称 | 类型 | 默认值 | 说明 | 必传\n-- | -- | -- | -- | --\ndisabled | Boolean | false | 是否禁用组件 | N\ninputNumberProps | Boolean / Object | false | 用于控制数字输入框组件，值为 false 表示不显示数字输入框；值为 true 表示呈现默认数字输入框；值类型为 Object 表示透传属性到数字输入框组件。TS 类型：`boolean \\| InputNumberProps`，[InputNumber API Documents](./input-number?tab=api)。[详细类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/slider/type.ts) | N\nlabel | String / Boolean / Slot / Function | true | 滑块当前值文本。<br />值为 true 显示默认文案；值为 false 不显示滑块当前值文本；<br />值为 `${value}%` 则表示组件会根据占位符渲染文案；<br />值类型为函数时，参数 `value` 标识滑块值，参数 `position=start` 表示范围滑块的起始值，参数 `position=end` 表示范围滑块的终点值。TS 类型：`string \\| boolean \\| TNode<{ value: SliderValue; position?: 'start' \\| 'end' }>`。[通用类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/common.ts) | N\nlayout | String | horizontal | 滑块布局方向。可选项：vertical/horizontal | N\nmarks | Object / Array | - | 刻度标记，示例：[0, 10, 40, 200] 或者 `{ 10: (val) => val + '%', 50: (h) => <button>50</button> }`。TS 类型：`Array<number> \\| SliderMarks` `interface SliderMarks { [mark: number]: string \\| TNode<{ value: number }> }`。[通用类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/common.ts)。[详细类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/slider/type.ts) | N\nmax | Number | 100 | 滑块范围最大值 | N\nmin | Number | 0 | 滑块范围最小值 | N\nrange | Boolean | false | 双游标滑块 | N\nshowStep | Boolean | false | 控制步长刻度值显示 | N\nstep | Number | 1 | 步长 | N\ntooltipProps | Object | - | 透传提示组件属性。TS 类型：`TooltipProps`，[Tooltip API Documents](./tooltip?tab=api)。[详细类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/slider/type.ts) | N\nvalue | Number / Array | 0 | 滑块值。支持语法糖 `v-model` 或 `v-model:value`。TS 类型：`SliderValue` `type SliderValue = number \\| Array<number>`。[详细类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/slider/type.ts) | N\ndefaultValue | Number / Array | 0 | 滑块值。非受控属性。TS 类型：`SliderValue` `type SliderValue = number \\| Array<number>`。[详细类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/slider/type.ts) | N\nonChange | Function |  | TS 类型：`(value: SliderValue) => void`<br/>滑块值变化时触发 | N\nonChangeEnd | Function |  | TS 类型：`(value: SliderValue) => void`<br/>松开拖动`mouseup` 或点击滑块条时触发，适合不希望在拖动滑块过程频繁触发回调的场景实用 | N\n\n### Slider Events\n\n名称 | 参数 | 描述\n-- | -- | --\nchange | `(value: SliderValue)` | 滑块值变化时触发\nchange-end | `(value: SliderValue)` | 松开拖动`mouseup` 或点击滑块条时触发，适合不希望在拖动滑块过程频繁触发回调的场景实用\n"
  },
  {
    "name": "space",
    "propsData": ":: BASE_DOC ::\n\n## API\n### Space Props\n\n名称 | 类型 | 默认值 | 说明 | 必传\n-- | -- | -- | -- | --\nalign | String | - | 对齐方式。可选项：start/end/center/baseline | N\nbreakLine | Boolean | false | 是否自动换行，仅在 horizontal 时有效\t | N\ndirection | String | horizontal | 间距方向。可选项：vertical/horizontal | N\nseparator | String / Slot / Function | - | 分隔符。TS 类型：`string \\| TNode`。[通用类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/common.ts) | N\nsize | String / Number / Array | 'medium' | 间距大小。TS 类型：`SpaceSize \\| SpaceSize[]` `type SpaceSize = number \\| string \\| SizeEnum`。[通用类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/common.ts)。[详细类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/space/type.ts) | N\n"
  },
  {
    "name": "statistic",
    "propsData": ":: BASE_DOC ::\n\n## API\n\n### Statistic Props\n\n名称 | 类型 | 默认值 | 描述 | 必传\n-- | -- | -- | -- | --\nanimation | Object | - | 动画效果控制，`duration` 指动画的过渡时间`单位：毫秒`，`valueFrom` 指动画的起始数值。`{ duration, valueFrom }`。TS 类型：`animation` `interface animation { duration: number; valueFrom: number;  }`。[详细类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/statistic/type.ts) | N\nanimationStart | Boolean | false | 是否开始动画 | N\ncolor | String | - | 颜色风格，依次为 TDesign 风格的黑色、蓝色、红色、橙色、绿色。也可以为任何 [CSS color](https://developer.mozilla.org/en-US/docs/Web/CSS/color_value) 支持的 RGB 等值。可选项：black/blue/red/orange/green | N\ndecimalPlaces | Number | - | 小数保留位数 | N\nextra | String / Slot / Function | - | 额外的显示内容。TS 类型：`string \\| TNode`。[通用类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/common.ts) | N\nformat | Function | - | 格式化数值显示值。TS 类型：`(value: number) => number` | N\nloading | Boolean | false | 是否加载中 | N\nprefix | String / Slot / Function | - | 前缀内容，展示优先级高于 trend。TS 类型：`string \\| TNode`。[通用类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/common.ts) | N\nseparator | String | , | 默认展示千位分隔符，可以自定义为其他内容，`separator = ''` 设置为空字符串/null/undefined 时展示默认分隔符 | N\nsuffix | String / Slot / Function | - | 后缀内容，展示优先级高于 trend。TS 类型：`string \\| TNode`。[通用类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/common.ts) | N\ntitle | String / Slot / Function | - | 数值显示的标题。TS 类型：`string \\| TNode`。[通用类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/common.ts) | N\ntrend | String | - | 趋势。可选项：increase/decrease | N\ntrendPlacement | String | left | 趋势展示位置。可选项：left/right | N\nunit | String / Slot / Function | - | 单位内容。TS 类型：`string \\| TNode`。[通用类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/common.ts) | N\nvalue | Number | - | 数值显示的值 | N\n\n### StatisticInstanceFunctions 组件实例方法\n\n名称 | 参数 | 返回值 | 描述\n-- | -- | -- | --\nstart | \\- | \\- | 必需。开始动画\n"
  },
  {
    "name": "steps",
    "propsData": ":: BASE_DOC ::\n\n## API\n\n### Steps Props\n\n名称 | 类型 | 默认值 | 描述 | 必传\n-- | -- | -- | -- | --\ncurrent | String / Number | - | 当前步骤，即整个步骤条进度。默认根据步骤下标判断步骤的完成状态，当前步骤为进行中，当前步骤之前的步骤为已完成，当前步骤之后的步骤为未开始。如果每个步骤没有设置 value，current 值为步骤长度则表示所有步骤已完成。如果每个步骤设置了自定义 value，则 current = 'FINISH' 表示所有状态完成。支持语法糖 `v-model` 或 `v-model:current` | N\ndefaultCurrent | String / Number | - | 当前步骤，即整个步骤条进度。默认根据步骤下标判断步骤的完成状态，当前步骤为进行中，当前步骤之前的步骤为已完成，当前步骤之后的步骤为未开始。如果每个步骤没有设置 value，current 值为步骤长度则表示所有步骤已完成。如果每个步骤设置了自定义 value，则 current = 'FINISH' 表示所有状态完成。非受控属性 | N\nlayout | String | horizontal | 步骤条方向，有两种：横向和纵向。可选项：horizontal/vertical | N\noptions | Array | - | 步骤条数据列表（作用和 StepItem 效果一样）。TS 类型：`Array<TdStepItemProps>` | N\nreadonly | Boolean | undefined | 只读状态 | N\nseparator | String | line | 步骤条分割符。可选项：line/dashed/arrow | N\nsequence | String | positive | 步骤条顺序。可选项：positive/reverse | N\ntheme | String | default | 步骤条风格。可选项：default/dot | N\nonChange | Function |  | TS 类型：`(current: string \\| number, previous: string \\| number, context?: { e?: MouseEvent }) => void`<br/>当前步骤发生变化时触发 | N\n\n### Steps Events\n\n名称 | 参数 | 描述\n-- | -- | --\nchange | `(current: string \\| number, previous: string \\| number, context?: { e?: MouseEvent })` | 当前步骤发生变化时触发\n\n\n### StepItem Props\n\n名称 | 类型 | 默认值 | 描述 | 必传\n-- | -- | -- | -- | --\ncontent | String / Slot / Function | '' | 步骤描述。TS 类型：`string \\| TNode`。[通用类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/common.ts) | N\ndefault | String / Slot / Function | - | 步骤描述，同 content。TS 类型：`string \\| TNode`。[通用类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/common.ts) | N\nextra | String / Slot / Function | - | 显示在步骤描述下方的额外内容，比如：操作项。TS 类型：`string \\| TNode`。[通用类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/common.ts) | N\nicon | Boolean / Slot / Function | true | 图标，默认显示内置图标，也可以自定义图标，值为 false 则不显示图标。优先级大于 `status` 定义的图标。TS 类型：`boolean \\| TNode`。[通用类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/common.ts) | N\nstatus | String | default | 当前步骤的状态：默认状态（未开始）、进行中状态、完成状态、错误状态。可选项：default/process/finish/error。TS 类型：`StepStatus` `type StepStatus = 'default' \\| 'process' \\| 'finish' \\| 'error'`。[详细类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/steps/type.ts) | N\ntitle | String / Slot / Function | '' | 标题。TS 类型：`string \\| TNode`。[通用类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/common.ts) | N\nvalue | String / Number | - | 当前步骤标识 | N\n"
  },
  {
    "name": "sticky-tool",
    "propsData": ":: BASE_DOC ::\n\n## API\n\n### StickyTool Props\n\n名称 | 类型 | 默认值 | 说明 | 必传\n-- | -- | -- | -- | --\nlist | Array | [] | 列表。TS 类型：`Array<TdStickyItemProps>` | N\noffset | Array | - | 相对于 placement 的偏移量，示例：[-10, 20] 或 ['10em', '8rem']。TS 类型：`Array<string \\| number>` | N\nplacement | String | right-bottom | 固定位置。可选项：right-top/right-center/right-bottom/left-top/left-center/left-bottom | N\npopupProps | Object | - | 透传 Popup 组件全部特性，优先级低于 StickyItem.popupProps。TS 类型：`PopupProps`，[Popup API Documents](./popup?tab=api)。[详细类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/sticky-tool/type.ts) | N\nshape | String | square | 侧边栏菜单形状，有 2 种：方形、圆形。可选项：square/round | N\ntype | String | normal | 侧边栏菜单类型，有 2 种：常规型和紧凑型。可选项：normal/compact | N\nwidth | String / Number | - | 宽度 | N\nonClick | Function |  | TS 类型：`(context: { e: MouseEvent; item: TdStickyItemProps }) => void`<br/>点击某一项时触发 | N\nonHover | Function |  | TS 类型：`(context: { e: MouseEvent; item: TdStickyItemProps }) => void`<br/>悬浮到某一项时触发 | N\n\n### StickyTool Events\n\n名称 | 参数 | 描述\n-- | -- | --\nclick | `(context: { e: MouseEvent; item: TdStickyItemProps })` | 点击某一项时触发\nhover | `(context: { e: MouseEvent; item: TdStickyItemProps })` | 悬浮到某一项时触发\n\n### StickyItem Props\n\n名称 | 类型 | 默认值 | 说明 | 必传\n-- | -- | -- | -- | --\nicon | Slot / Function | - | 图标。TS 类型：`TNode`。[通用类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/common.ts) | N\nlabel | String / Slot / Function | - | 名称。TS 类型：`string \\| TNode`。[通用类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/common.ts) | N\npopup | String / Slot / Function | - | 浮层内容。TS 类型：`string \\| TNode`。[通用类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/common.ts) | N\npopupProps | Object | - | 透传浮层组件全部属性。TS 类型：`PopupProps`，[Popup API Documents](./popup?tab=api)。[详细类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/sticky-tool/type.ts) | N\ntrigger | String | hover | 触发浮层显示的方式。可选项：hover/click | N\n"
  },
  {
    "name": "swiper",
    "propsData": ":: BASE_DOC ::\n\n## API\n### Swiper Props\n\n名称 | 类型 | 默认值 | 说明 | 必传\n-- | -- | -- | -- | --\nanimation | String | slide | 轮播切换动画效果类型：滑动、淡入淡出等。可选项：slide/fade | N\nautoplay | Boolean | true | 是否自动播放 | N\ncurrent | Number | 0 | 当前轮播在哪一项（下标）。支持语法糖 `v-model` 或 `v-model:current` | N\ndefaultCurrent | Number | 0 | 当前轮播在哪一项（下标）。非受控属性 | N\ndirection | String | horizontal | 轮播滑动方向，包括横向滑动和纵向滑动两个方向。可选项：horizontal/vertical | N\nduration | Number | 300 | 滑动动画时长 | N\nheight | Number | - | 当使用垂直方向滚动时的高度 | N\ninterval | Number | 5000 | 轮播间隔时间 | N\nloop | Boolean | true | 是否循环播放 | N\nnavigation | Object / Slot / Function | - | 导航器全部配置。TS 类型：`SwiperNavigation \\| TNode`。[通用类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/common.ts) | N\nstopOnHover | Boolean | true | 是否悬浮时停止轮播 | N\ntheme | String | light | 深色模式和浅色模式。可选项：light/dark | N\ntrigger | String | hover | 触发切换的方式：悬浮、点击等。可选项：hover/click | N\ntype | String | default | 样式类型：默认样式、卡片样式。可选项：default/card | N\ncardScale | Number | 210/332 | 卡片模式下的缩放比例 | N\nonChange | Function |  | TS 类型：`(current: number, context: { source: SwiperChangeSource }) => void`<br/>轮播切换时触发。[详细类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/swiper/type.ts)。<br/>`type SwiperChangeSource = 'autoplay' \\| 'click' \\| 'hover'`<br/> | N\n\n### Swiper Events\n\n名称 | 参数 | 描述\n-- | -- | --\nchange | `(current: number, context: { source: SwiperChangeSource })` | 轮播切换时触发。[详细类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/swiper/type.ts)。<br/>`type SwiperChangeSource = 'autoplay' \\| 'click' \\| 'hover'`<br/>\n\n### SwiperNavigation\n\n名称 | 类型 | 默认值 | 说明 | 必传\n-- | -- | -- | -- | --\nplacement | String | inside | 导航器位置，位于主体的内侧或是外侧。可选项：inside/outside | N\nshowSlideBtn | String | always | 何时显示导航器的翻页按钮：始终显示、悬浮显示、永不显示。可选项：always/hover/never | N\nsize | String | medium | 导航器尺寸。可选项：small/medium/large | N\ntype | String | - | 导航器类型，点状(dots)、点条状(dots-bar)、条状(bars)、分式(fraction)等。TS 类型：`SwiperNavigationType` `type SwiperNavigationType = 'dots' \\| 'dots-bar' \\| 'bars' \\| 'fraction'`。[详细类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/swiper/type.ts) | N\n"
  },
  {
    "name": "switch",
    "propsData": ":: BASE_DOC ::\n\n## API\n### Switch Props\n\n名称 | 类型 | 默认值 | 说明 | 必传\n-- | -- | -- | -- | --\nbeforeChange | Function | - | Switch 切换状态前的回调方法，常用于需要发起异步请求的场景，回调返回值支持布尔和 Promise 类型，返回`false`或 Promise reject不继续执行change，否则则继续执行。TS 类型：`() => boolean \\| Promise<boolean>` | N\ncustomValue | Array | - | 用于自定义开关的值，[打开时的值，关闭时的值]。默认为 [true, false]。示例：[1, 0]、['open', 'close']。TS 类型：`Array<SwitchValue>` | N\ndisabled | Boolean | undefined | 是否禁用组件。优先级：Switch.disabled > Form.disabled | N\nlabel | Array / Slot / Function | [] | 开关内容，[开启时内容，关闭时内容]。示例：['开', '关'] 或 (value) => value ? '开' : '关'。TS 类型：`Array<string \\| TNode> \\| TNode<{ value: SwitchValue }>`。[通用类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/common.ts) | N\nloading | Boolean | false | 是否处于加载中状态 | N\nsize | String | medium | 开关尺寸。可选项：small/medium/large | N\nvalue | String / Number / Boolean | - | 开关值。支持语法糖 `v-model` 或 `v-model:value`。TS 类型：`T` `type SwitchValue = string \\| number \\| boolean`。[详细类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/switch/type.ts) | N\ndefaultValue | String / Number / Boolean | - | 开关值。非受控属性。TS 类型：`T` `type SwitchValue = string \\| number \\| boolean`。[详细类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/switch/type.ts) | N\nonChange | Function |  | TS 类型：`(value: T, context: { e: MouseEvent }) => void`<br/>数据发生变化时触发 | N\n\n### Switch Events\n\n名称 | 参数 | 描述\n-- | -- | --\nchange | `(value: T, context: { e: MouseEvent })` | 数据发生变化时触发\n"
  },
  {
    "name": "table",
    "propsData": [
      {
        "type": "PrimaryTable",
        "props": ":: BASE_DOC ::\n\n## API\n\n### BaseTable Props\n\n名称 | 类型 | 默认值 | 描述 | 必传\n-- | -- | -- | -- | --\nactiveRowKeys | Array | [] | 高亮行，支持鼠标键盘操作(Shift)连续高亮行，可用于处理行选中等批量操作，模拟操作系统区域选择行为。支持语法糖 `v-model:activeRowKeys`。TS 类型：`Array<string \\| number>` | N\ndefaultActiveRowKeys | Array | [] | 高亮行，支持鼠标键盘操作(Shift)连续高亮行，可用于处理行选中等批量操作，模拟操作系统区域选择行为。非受控属性。TS 类型：`Array<string \\| number>` | N\nactiveRowType | String | - | 默认不会高亮点击行，`activeRowType=single` 表示鼠标点击仅允许同时高亮一行，Shift 键盘操作加鼠标操作依然可以高亮多行，因为这属于明显的区域选择行为。`activeRowType= multiple ` 表示允许鼠标点击同时高亮多行。TS 类型：`'single' \\| 'multiple'` | N\nallowResizeColumnWidth | Boolean | undefined | 已废弃。是否允许调整列宽。请更为使用 `resizable` | N\nattach | String / Function | - | 超出省略等所有浮层元素统一绑定到 `attach`，可根据实际情况调整挂载元素。TS 类型：`AttachNode`。[通用类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/common.ts) | N\nbordered | Boolean | false | 是否显示表格边框 | N\nbottomContent | String / Slot / Function | - | 表格底部内容，可以用于自定义列设置等。TS 类型：`string \\| TNode`。[通用类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/common.ts) | N\ncellEmptyContent | String / Slot / Function | - | 单元格数据为空时呈现的内容。TS 类型：`string \\| TNode<BaseTableCellParams<T>>`。[通用类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/common.ts) | N\ncolumns | Array | [] | 列配置，泛型 T 指表格数据类型。TS 类型：`Array<BaseTableCol<T>>` | N\ndata | Array | [] | 数据源，泛型 T 指表格数据类型。TS 类型：`Array<T>` | N\ndisableDataPage | Boolean | false | 是否禁用本地数据分页。当 `data` 数据长度超过分页大小时，会自动进行本地数据分页。如果 `disableDataPage` 设置为 true，则无论何时，都不会进行本地数据分页 | N\ndisableSpaceInactiveRow | Boolean | undefined | 默认重复按下 Space 键可取消当前行高亮，是否禁用取消 | N\nempty | String / Slot / Function | '' | 空表格呈现样式，支持全局配置 `GlobalConfigProvider`。TS 类型：`string \\| TNode`。[通用类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/common.ts) | N\nfirstFullRow | String / Slot / Function | - | 首行内容，横跨所有列。TS 类型：`string \\| TNode`。[通用类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/common.ts) | N\nfixedRows | Array | - | 固定行（冻结行），示例：[M, N]，表示冻结表头 M 行和表尾 N 行。M 和 N 值为 0 时，表示不冻结行。TS 类型：`Array<number>` | N\nfootData | Array | [] | 表尾数据源，泛型 T 指表格数据类型。TS 类型：`Array<T>` | N\nfooterAffixProps | Object | - | 已废弃。请更为使用 `footerAffixedBottom`。表尾吸底基于 Affix 组件开发，透传全部 Affix 组件属性。TS 类型：`Partial<AffixProps>` | N\nfooterAffixedBottom | Boolean / Object | false | 表尾吸底。使用该功能，需要非常注意表格是相对于哪一个父元素进行滚动。值为 `true`，则表示相对于整个窗口吸底。如果表格滚动的父元素不是整个窗口，请通过 `footerAffixedBottom.container` 调整固钉的吸顶范围。基于 Affix 组件开发，透传全部 Affix 组件属性。TS 类型：`boolean \\| Partial<AffixProps>` | N\nfooterSummary | String / Slot / Function | - | 表尾总结行。TS 类型：`string \\| TNode`。[通用类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/common.ts) | N\nheaderAffixProps | Object | - | 已废弃。请更为使用 `headerAffixedTop`。表头吸顶基于 Affix 组件开发，透传全部 Affix 组件属性。TS 类型：`Partial<AffixProps>`，[Affix API Documents](./affix?tab=api)。[详细类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/table/type.ts) | N\nheaderAffixedTop | Boolean / Object | false | 表头吸顶。使用该功能，需要非常注意表格是相对于哪一个父元素进行滚动。值为 `true`，表示相对于整个窗口吸顶。如果表格滚动的父元素不是整个窗口，请通过 `headerAffixedTop.container` 调整吸顶的位置。基于 Affix 组件开发，透传全部 Affix 组件属性。TS 类型：`boolean \\| Partial<AffixProps>` | N\nheight | String / Number | - | 表格高度，超出后会出现滚动条。示例：100,  '30%',  '300'。值为数字类型，会自动加上单位 px。如果不是绝对固定表格高度，建议使用 `maxHeight` | N\nhorizontalScrollAffixedBottom | Boolean / Object | - | 滚动条吸底。基于 Affix 组件开发，透传全部 Affix 组件属性。TS 类型：`boolean \\| Partial<AffixProps>` | N\nhover | Boolean | false | 是否显示鼠标悬浮状态 | N\nkeyboardRowHover | Boolean | true | 键盘操作行显示悬浮效果，一般用于键盘操作行选中、行展开、行高亮等功能 | N\nlastFullRow | String / Slot / Function | - | 尾行内容，横跨所有列。TS 类型：`string \\| TNode`。[通用类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/common.ts) | N\nlazyLoad | Boolean | false | 是否启用整个表格元素的懒加载，当页面滚动到可视区域后再渲染表格。注意和表格内部行滚动懒加载的区别，内部行滚动无论表格是否在可视区域都会默认渲染第一屏的行元素 | N\nloading | Boolean / Slot / Function | undefined | 加载中状态。值为 `true` 会显示默认加载中样式，可以通过 Function 和 插槽 自定义加载状态呈现内容和样式。值为 `false` 则会取消加载状态。TS 类型：`boolean \\| TNode`。[通用类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/common.ts) | N\nloadingProps | Object | - | 透传加载组件全部属性。TS 类型：`Partial<LoadingProps>`，[Loading API Documents](./loading?tab=api)。[详细类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/table/type.ts) | N\nlocale | Object | - | 语言配置。TS 类型：`TableConfig`，[ConfigProvider API Documents](./config-provider?tab=api)。[详细类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/table/type.ts) | N\nmaxHeight | String / Number | - | 表格最大高度，超出后会出现滚动条。示例：100, '30%', '300'。值为数字类型，会自动加上单位 px | N\npagination | Object | - | 分页配置，值为空则不显示。具体 API 参考分页组件。当 `data` 数据长度超过分页大小时，会自动对本地数据 `data` 进行排序，如果不希望对于 `data` 进行排序，可以设置 `disableDataPage = true`。TS 类型：`PaginationProps`，[Pagination API Documents](./pagination?tab=api)。[详细类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/table/type.ts) | N\npaginationAffixedBottom | Boolean / Object | - | 分页吸底。基于 Affix 组件开发，透传全部 Affix 组件属性。TS 类型：`boolean \\| Partial<AffixProps>` | N\nresizable | Boolean | false | 是否允许调整列宽，设置 `tableLayout=fixed` 效果更友好，此时不允许通过 CSS 设置 `table`元素宽度，也不允许设置 `tableContentWidth`。一般不建议在列宽调整场景使用 `tableLayout: auto`。如果想要配置宽度可调整的最小值和最大值，请使用 `column.resize`，示例：`columns: [{ resize: { minWidth: 120, maxWidth: 300 } }]`。<br/> 默认规则：因列宽超出存在横向滚动条时，列宽调整仅影响当前列宽和总列宽；表格列较少没有横向滚动条时，列宽调整表现为自身宽度和相邻宽度变化 | N\nrowAttributes | Object / Array / Function | - | HTML 标签 `tr` 的属性。类型为 Function 时，参数说明：`params.row` 表示行数据；`params.rowIndex` 表示行下标；`params.type=body` 表示属性作用于 `tbody` 中的元素；`params.type=foot` 表示属性作用于 `tfoot` 中的元素。<br />示例一：{ draggable: true }，<br />示例二：[{ draggable: true }, { title: '超出省略显示' }]。<br /> 示例三：() => [{ draggable: true }]。TS 类型：`TableRowAttributes<T>` `type TableRowAttributes<T> = HTMLElementAttributes \\| ((params: { row: T; rowIndex: number; type: 'body' \\| 'foot' }) => HTMLElementAttributes) \\| Array<TableRowAttributes<T>>`。[通用类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/common.ts)。[详细类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/table/type.ts) | N\nrowClassName | String / Object / Array / Function | - | 行类名，泛型 T 指表格数据类型。`params.row` 表示行数据；`params.rowIndex` 表示行下标；`params.type=body`  表示类名作用于 `tbody` 中的元素；`params.type= tfoot` 表示类名作用于 `tfoot` 中的元素。TS 类型：`ClassName \\| ((params: RowClassNameParams<T>) => ClassName)` `interface RowClassNameParams<T> { row: T; rowIndex: number; type?: 'body' \\| 'foot' }`。[通用类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/common.ts)。[详细类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/table/type.ts) | N\nrowKey | String | 'id' | 必需。唯一标识一行数据的字段名，来源于 `data` 中的字段。如果是字段嵌套多层，可以设置形如 `item.a.id` 的方法 | Y\nrowspanAndColspan | Function | - | 用于自定义合并单元格，泛型 T 指表格数据类型。示例：`({ row, col, rowIndex, colIndex }) => { rowspan: 2, colspan: 3 }`。TS 类型：`TableRowspanAndColspanFunc<T>` `type TableRowspanAndColspanFunc<T> = (params: BaseTableCellParams<T>) => RowspanColspan` `interface RowspanColspan { colspan?: number; rowspan?: number }`。[详细类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/table/type.ts) | N\nrowspanAndColspanInFooter | Function | - | 用于自定义表尾的合并单元格，泛型 T 指表格数据类型。示例：`({ row, col, rowIndex, colIndex }) => { rowspan: 2, colspan: 3 }`。TS 类型：`TableRowspanAndColspanFunc<T>` | N\nscroll | Object | - | 懒加载和虚拟滚动。为保证组件收益最大化，当数据量小于阈值 `scroll.threshold` 时，无论虚拟滚动的配置是否存在，组件内部都不会开启虚拟滚动，`scroll.threshold` 默认为 `100`。TS 类型：`TScroll`。[通用类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/common.ts) | N\nshowHeader | Boolean | true | 是否显示表头 | N\nsize | String | - | 表格尺寸，支持全局配置 `GlobalConfigProvider`，默认全局配置值为 `medium`。可选项：small/medium/large。TS 类型：`SizeEnum`。[通用类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/common.ts) | N\nstripe | Boolean | false | 是否显示斑马纹 | N\ntableContentWidth | String | - | 表格内容的总宽度，注意不是表格可见宽度。主要应用于 `table-layout: auto` 模式下的固定列显示。`tableContentWidth` 内容宽度的值必须大于表格可见宽度 | N\ntableLayout | String | fixed | 表格布局方式，`<table>` 元素原生属性。[MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/table-layout)。注意，在列宽调整下场景只能使用 `fixed` 模式。可选项：auto/fixed | N\ntopContent | String / Slot / Function | - | 表格顶部内容，可以用于自定义列设置、顶部查询条件等。TS 类型：`string \\| TNode`。[通用类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/common.ts) | N\nverticalAlign | String | middle | 行内容上下方向对齐。可选项：top/middle/bottom | N\nonActiveChange | Function |  | TS 类型：`(activeRowKeys: Array<string \\| number>, context: ActiveChangeContext<T>) => void`<br/>高亮行发生变化时触发，泛型 T 指表格数据类型。参数 `activeRowList` 表示所有高亮行数据， `currentRowData` 表示当前操作行数据。[详细类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/table/type.ts)。<br/>`interface ActiveChangeContext<T> { activeRowList: Array<{ row: T, rowIndex: number }>; currentRowData?: T; type: 'active' \\| 'inactive' }`<br/> | N\nonActiveRowAction | Function |  | TS 类型：`(context: ActiveRowActionContext<T>) => void`<br/>键盘操作事件。开启行高亮功能后，会自动开启键盘操作功能，如：通过键盘(Shift)或鼠标操作连续选中高亮行时触发，一般用于处理行选中等批量操作，模拟操作系统区域选择行为。[详细类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/table/type.ts)。<br/>`interface ActiveRowActionContext<T> { action: ActiveRowActionType,  activeRowList: Array<{ row: T, rowIndex: number }> }`<br/><br/>`type ActiveRowActionType ='shift-area-selection' \\| 'space-one-selection' \\| 'clear' \\| 'select-all'`<br/> | N\nonCellClick | Function |  | TS 类型：`(context: BaseTableCellEventContext<T>) => void`<br/>单元格点击时触发。[详细类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/table/type.ts)。<br/>`interface BaseTableCellEventContext<T> { row: T; col: BaseTableCol; rowIndex: number; colIndex: number; e: MouseEvent }`<br/> | N\nonColumnResizeChange | Function |  | TS 类型：`(context: { columnsWidth: { [colKey: string]: number }; }) => void`<br/>列调整大小之后触发。`context.columnsWidth` 表示操作后各个列的宽度； | N\nonPageChange | Function |  | TS 类型：`(pageInfo: PageInfo, newDataSource: Array<T>) => void`<br/>分页发生变化时触发。参数 newDataSource 表示分页后的数据。本地数据进行分页时，newDataSource 和源数据 data 会不一样。泛型 T 指表格数据类型 | N\nonRowClick | Function |  | TS 类型：`(context: RowEventContext<T>) => void`<br/>行点击时触发，泛型 T 指表格数据类型。[详细类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/table/type.ts)。<br/>`interface RowEventContext<T> { row: T; index: number; e: MouseEvent \\| KeyboardEvent }`<br/> | N\nonRowDblclick | Function |  | TS 类型：`(context: RowEventContext<T>) => void`<br/>行双击时触发，泛型 T 指表格数据类型 | N\nonRowMousedown | Function |  | TS 类型：`(context: RowEventContext<T>) => void`<br/>鼠标在表格行按下时触发，泛型 T 指表格数据类型 | N\nonRowMouseenter | Function |  | TS 类型：`(context: RowEventContext<T>) => void`<br/>鼠标在表格行进入时触发，泛型 T 指表格数据类型 | N\nonRowMouseleave | Function |  | TS 类型：`(context: RowEventContext<T>) => void`<br/>鼠标在表格行离开时触发，泛型 T 指表格数据类型 | N\nonRowMouseover | Function |  | TS 类型：`(context: RowEventContext<T>) => void`<br/>鼠标悬浮到行时触发，泛型 T 指表格数据类型 | N\nonRowMouseup | Function |  | TS 类型：`(context: RowEventContext<T>) => void`<br/>鼠标在表格行按下又弹起时触发，泛型 T 指表格数据类型 | N\nonScroll | Function |  | TS 类型：`(params: { e: WheelEvent }) => void`<br/>表格内容滚动时触发 | N\nonScrollX | Function |  | TS 类型：`(params: { e: WheelEvent }) => void`<br/>已废弃。表格内容横向滚动时触发。请更为使用 `onScroll` 事件 | N\nonScrollY | Function |  | TS 类型：`(params: { e: WheelEvent }) => void`<br/>已废弃。表格内容纵向滚动时触发。当内容超出高度(height)或最大高度(max-height)时，会出现纵向滚动条。请更为使用 `onScroll` 事件 | N\n\n### BaseTable Events\n\n名称 | 参数 | 描述\n-- | -- | --\nactive-change | `(activeRowKeys: Array<string \\| number>, context: ActiveChangeContext<T>)` | 高亮行发生变化时触发，泛型 T 指表格数据类型。参数 `activeRowList` 表示所有高亮行数据， `currentRowData` 表示当前操作行数据。[详细类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/table/type.ts)。<br/>`interface ActiveChangeContext<T> { activeRowList: Array<{ row: T, rowIndex: number }>; currentRowData?: T; type: 'active' \\| 'inactive' }`<br/>\nactive-row-action | `(context: ActiveRowActionContext<T>)` | 键盘操作事件。开启行高亮功能后，会自动开启键盘操作功能，如：通过键盘(Shift)或鼠标操作连续选中高亮行时触发，一般用于处理行选中等批量操作，模拟操作系统区域选择行为。[详细类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/table/type.ts)。<br/>`interface ActiveRowActionContext<T> { action: ActiveRowActionType,  activeRowList: Array<{ row: T, rowIndex: number }> }`<br/><br/>`type ActiveRowActionType ='shift-area-selection' \\| 'space-one-selection' \\| 'clear' \\| 'select-all'`<br/>\ncell-click | `(context: BaseTableCellEventContext<T>)` | 单元格点击时触发。[详细类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/table/type.ts)。<br/>`interface BaseTableCellEventContext<T> { row: T; col: BaseTableCol; rowIndex: number; colIndex: number; e: MouseEvent }`<br/>\ncolumn-resize-change | `(context: { columnsWidth: { [colKey: string]: number }; })` | 列调整大小之后触发。`context.columnsWidth` 表示操作后各个列的宽度；\npage-change | `(pageInfo: PageInfo, newDataSource: Array<T>)` | 分页发生变化时触发。参数 newDataSource 表示分页后的数据。本地数据进行分页时，newDataSource 和源数据 data 会不一样。泛型 T 指表格数据类型\nrow-click | `(context: RowEventContext<T>)` | 行点击时触发，泛型 T 指表格数据类型。[详细类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/table/type.ts)。<br/>`interface RowEventContext<T> { row: T; index: number; e: MouseEvent \\| KeyboardEvent }`<br/>\nrow-dblclick | `(context: RowEventContext<T>)` | 行双击时触发，泛型 T 指表格数据类型\nrow-mousedown | `(context: RowEventContext<T>)` | 鼠标在表格行按下时触发，泛型 T 指表格数据类型\nrow-mouseenter | `(context: RowEventContext<T>)` | 鼠标在表格行进入时触发，泛型 T 指表格数据类型\nrow-mouseleave | `(context: RowEventContext<T>)` | 鼠标在表格行离开时触发，泛型 T 指表格数据类型\nrow-mouseover | `(context: RowEventContext<T>)` | 鼠标悬浮到行时触发，泛型 T 指表格数据类型\nrow-mouseup | `(context: RowEventContext<T>)` | 鼠标在表格行按下又弹起时触发，泛型 T 指表格数据类型\nscroll | `(params: { e: WheelEvent })` | 表格内容滚动时触发\nscroll-x | `(params: { e: WheelEvent })` | 已废弃。表格内容横向滚动时触发。请更为使用 `onScroll` 事件\nscroll-y | `(params: { e: WheelEvent })` | 已废弃。表格内容纵向滚动时触发。当内容超出高度(height)或最大高度(max-height)时，会出现纵向滚动条。请更为使用 `onScroll` 事件\n\n### BaseTableInstanceFunctions 组件实例方法\n\n名称 | 参数 | 返回值 | 描述\n-- | -- | -- | --\nrefreshTable | \\- | \\- | 必需。全部重新渲染表格\nscrollColumnIntoView | `(colKey: string)` | \\- | 必需。横向滚动到指定列，呈现在可视范围内\nscrollToElement | `(params: ComponentScrollToElementParams)` | \\- | 必需。纵向滚动到指定行。示例：`scrollToElement({ index: 100, top: 80, time: 200, behavior: 'smooth' })`\n\n### BaseTableCol\n\n名称 | 类型 | 默认值 | 描述 | 必传\n-- | -- | -- | -- | --\nalign | String | left | 列横向对齐方式。可选项：left/right/center | N\nattrs | Object / Function | - | 透传 HTML 属性到列元素。TS 类型：`BaseTableColumnAttributes<T>` `type BaseTableColumnAttributes<T> = { [key: string]: any } \\| ((context: CellData<T>) => { [key: string]: any })`。[详细类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/table/type.ts) | N\ncell | String / Function | - | 自定义单元格渲染。默认使用 `colKey` 的值作为自定义当前列的插槽名称。<br/>如果 `cell` 值类型为 Function 表示以函数形式渲染单元格。值类型为 string 表示使用插槽渲染，插槽名称为 cell 的值。优先级高于 `render`。泛型 T 指表格数据类型。TS 类型：`string \\| TNode<BaseTableCellParams<T>>` `interface BaseTableCellParams<T> { row: T; rowIndex: number; col: BaseTableCol<T>; colIndex: number }`。[通用类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/common.ts)。[详细类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/table/type.ts) | N\nchildren | Array | - | 用于多级表头，泛型 T 指表格数据类型。TS 类型：`Array<BaseTableCol<T>>` | N\nclassName | String / Object / Array / Function | - | 列类名，值类型是 Function 使用返回值作为列类名；值类型不为 Function 时，值用于整列类名（含表头）。泛型 T 指表格数据类型。TS 类型：`TableColumnClassName<T> \\| TableColumnClassName<T>[]` `type TableColumnClassName<T> = ClassName \\| ((context: CellData<T>) => ClassName)` `interface CellData<T> extends BaseTableCellParams<T> { type: 'th' \\| 'td' }`。[通用类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/common.ts)。[详细类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/table/type.ts) | N\ncolKey | String | - | 渲染列所需字段，值为 `serial-number` 表示当前列为「序号」列 | N\ncolspan | Number | - | 单行表头合并列。多行表头请参考「多级表头」文档示例 | N\nellipsis | Boolean / Object / Slot / Function | false | 单元格和表头内容超出时，是否显示省略号。如果仅希望单元格超出省略，可设置 `ellipsisTitle = false`。<br/> 值为 `true`，则超出省略浮层默认显示单元格内容；<br/>值类型为 `Function` 则自定义超出省略浮中层显示的内容；<br/>值类型为 `Object`，则自动透传属性到 Tooltip 组件，可用于调整浮层背景色和方向等特性。<br/> 同时透传 Tooltip 属性和自定义浮层内容，请使用 `{ props: { theme: 'light' }, content: () => 'something' }`。<br /> 请注意单元格超出省略的两个基本点：1. 内容元素是内联元素或样式（自定义单元格内容时需特别注意）；2. 内容超出父元素。TS 类型：`boolean \\| TNode<BaseTableCellParams<T>> \\| TooltipProps \\| { props: TooltipProps; content: TNode<BaseTableCellParams<T>> }`，[Tooltip API Documents](./tooltip?tab=api)。[通用类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/common.ts)。[详细类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/table/type.ts) | N\nellipsisTitle | Boolean / Object / Slot / Function | undefined | 表头内容超出时，是否显示省略号。优先级高于 `ellipsis`。<br/>值为 `true`，则超出省略的浮层默认显示表头全部内容；<br/>值类型为 `Function` 用于自定义超出省略浮层显示的表头内容；<br/>值类型为 `Object`，则自动透传属性到 Tooltip 组件，则自动透传属性到 Tooltip 组件，可用于调整浮层背景色和方向等特性。<br/> 同时透传 Tooltip 属性和自定义浮层内容，请使用 `{ props: { theme: 'light' }, content: () => 'something' }`。TS 类型：`boolean \\| TNode<BaseTableColParams<T>> \\| TooltipProps \\| { props: TooltipProps; content: TNode<BaseTableColParams<T>> }` `interface BaseTableColParams<T> { col: BaseTableCol<T>; colIndex: number }`。[通用类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/common.ts)。[详细类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/table/type.ts) | N\nfixed | String | left | 固定列显示位置。可选项：left/right | N\nfoot | String / Function | - | 自定义表尾表尾。值类型为 Function 表示以函数形式渲染表尾内容。值类型为 string 表示使用插槽渲染，插槽名称为 `foot` 值。TS 类型：`string \\| TNode<{ col: BaseTableCol; colIndex: number }>`。[通用类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/common.ts) | N\nminWidth | String / Number | - | 透传 CSS 属性 `min-width` 到 `<col>` 元素。⚠️ 仅少部分浏览器支持，如：使用 [TablesNG](https://docs.google.com/document/d/16PFD1GtMI9Zgwu0jtPaKZJ75Q2wyZ9EZnVbBacOfiNA/preview) 渲染的 Chrome 浏览器支持 `minWidth` | N\nrender | Function | - | 自定义表头或单元格，泛型 T 指表格数据类型。TS 类型：`TNode<BaseTableRenderParams<T>>` `interface BaseTableRenderParams<T> extends BaseTableCellParams<T> { type: RenderType }` `type RenderType = 'cell' \\| 'title'`。[通用类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/common.ts)。[详细类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/table/type.ts) | N\nresizable | Boolean | true | 是否允许调整当前列列宽，一般用于设置为 `false` 禁止调整某一列列宽。如果是允许列宽调整，需要先设置 `BaseTable.resizable` 为 `true` 打开所有列宽调整 | N\nresize | Object | - | 限制拖拽调整的最小宽度和最大宽度。`resize.minWidth` 默认为 `80`，`resize.maxWidth` 默认为 `600`。TS 类型：`TableColumnResizeConfig` `interface TableColumnResizeConfig { minWidth: number; maxWidth: number }`。[详细类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/table/type.ts) | N\nstopPropagation | Boolean | - | 是否阻止当列单元格点击事件冒泡 | N\nthClassName | String / Object / Array / Function | - | 列表头类名，值类型是函数时使用返回值作为列类名。泛型 T 指表格数据类型。TS 类型：`TableColumnClassName<T> \\| TableColumnClassName<T>[]`。[通用类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/common.ts) | N\ntitle | String / Function | - | 自定义表头渲染。值类型为 Function 表示以函数形式渲染表头。值类型为 string 表示使用插槽渲染，插槽名称为 title 的值。优先级高于 render。TS 类型：`string \\| TNode<{ col: BaseTableCol; colIndex: number }>`。[通用类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/common.ts) | N\nwidth | String / Number | - | 列宽，可以作为最小宽度使用。当列宽总和小于 `table` 元素时，浏览器根据宽度设置情况自动分配宽度；当列宽总和大于 `table` 元素，表现为定宽。可以同时调整 `table` 元素的宽度来达到自己想要的效果 | N\n\n\n### PrimaryTable Props\n\n名称 | 类型 | 默认值 | 描述 | 必传\n-- | -- | -- | -- | --\nasyncLoading | String / Slot / Function | - | 异步加载状态。值为 `loading` 显示默认文字 “正在加载中，请稍后”，值为 `loading-more` 显示“点击加载更多”，值为其他，表示完全自定义异步加载区域内容。TS 类型：`'loading' \\| 'load-more' \\| TNode`。[通用类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/common.ts) | N\ncolumnController | Object | - | 自定义显示列控制器，值为空不会显示。具体属性请看下方 `TableColumnController` 文档。TS 类型：`TableColumnController` | N\ncolumnControllerVisible | Boolean | undefined | 是否显示列配置弹框控制器，只要该属性值不为 `undefined`，弹框的显示/隐藏完全由该属性控制。支持语法糖 `v-model:columnControllerVisible` | N\ncolumns | Array | [] | 列配置，泛型 T 指表格数据类型。TS 类型：`Array<PrimaryTableCol<T>>` | N\ndisplayColumns | Array | - | 列配置功能中，当前显示的列。支持语法糖 `v-model:displayColumns`。TS 类型：`CheckboxGroupValue` | N\ndefaultDisplayColumns | Array | - | 列配置功能中，当前显示的列。非受控属性。TS 类型：`CheckboxGroupValue` | N\ndragSort | String | - | 拖拽排序方式，值为 `row` 表示行拖拽排序，这种方式无法进行文本复制，慎用。值为`row-handler` 表示通过拖拽手柄进行行拖拽排序。值为 `col` 表示列顺序拖拽。值为 `row-handler-col` 表示同时支持行拖拽和列拖拽。⚠️`drag-col` 已废弃，请勿使用。可选项：row/row-handler/col/row-handler-col/drag-col | N\ndragSortOptions | Object | - | 拖拽排序扩展参数，具体参数见 [Sortable](https://github.com/SortableJS/Sortable)。TS 类型：`SortableOptions` | N\neditableCellState | Function | - | 单元格是否允许编辑。返回值为 `true` 则表示可编辑；返回值为 `false` 则表示不可编辑，只读状态。TS 类型：`EditableCellType<T>` `type EditableCellType<T> = (params: PrimaryTableCellParams<T>) => boolean`。[详细类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/table/type.ts) | N\neditableRowKeys | Array | - | 处于编辑状态的行。TS 类型：`Array<string \\| number>` | N\nexpandIcon | Boolean / Slot / Function | true | 用于控制是否显示「展开图标列」，值为 `false` 则不会显示。可以精确到某一行是否显示，还可以自定义展开图标内容。`expandedRow` 存在时，该参数有效。支持全局配置 `GlobalConfigProvider`。TS 类型：`boolean \\| TNode<ExpandArrowRenderParams<T>>` `interface ExpandArrowRenderParams<T> { row: T; index: number }`。[通用类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/common.ts)。[详细类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/table/type.ts) | N\nexpandOnRowClick | Boolean | - | 是否允许点击行展开 | N\nexpandedRow | String / Slot / Function | - | 展开行内容，泛型 T 指表格数据类型。TS 类型：`TNode<TableExpandedRowParams<T>>` `interface TableExpandedRowParams<T> { row: T; index: number; columns: PrimaryTableCol<T>[] \\| BaseTableCol<T>[] }`。[通用类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/common.ts)。[详细类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/table/type.ts) | N\nexpandedRowKeys | Array | [] | 展开行。支持语法糖 `v-model:expandedRowKeys`。TS 类型：`Array<string \\| number>` | N\ndefaultExpandedRowKeys | Array | [] | 展开行。非受控属性。TS 类型：`Array<string \\| number>` | N\nfilterIcon | Slot / Function | - | 自定义过滤图标，支持全局配置 `GlobalConfigProvider`。TS 类型：`TNode<{ col: PrimaryTableCol<T>; colIndex: number }>`。[通用类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/common.ts) | N\nfilterRow | String / Slot / Function | - | 自定义过滤状态行及清空筛选等。TS 类型：`string \\| TNode`。[通用类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/common.ts) | N\nfilterValue | Object | - | 过滤数据的值。支持语法糖 `v-model:filterValue`。TS 类型：`FilterValue` `type FilterValue = { [key: string]: any }`。[详细类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/table/type.ts) | N\ndefaultFilterValue | Object | - | 过滤数据的值。非受控属性。TS 类型：`FilterValue` `type FilterValue = { [key: string]: any }`。[详细类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/table/type.ts) | N\nhideSortTips | Boolean | - | 隐藏排序文本提示，支持全局配置 `GlobalConfigProvider`，默认全局配置值为 `false` | N\nindeterminateSelectedRowKeys | Array | - | 半选状态行。选中行请更为使用 `selectedRowKeys` 控制。TS 类型：`Array<string \\| number>` | N\nmultipleSort | Boolean | false | 是否支持多列排序 | N\nreserveSelectedRowOnPaginate | Boolean | true | 行选中功能，是否在分页时保留上一页选中结果不清空，本地数据分页场景下，会全选所有页数据。值为 `false` 则表示全部选中操作停留在当前页，不跨分页；本地数据分页场景下，全选仅选中当前页 | N\nrowSelectionAllowUncheck | Boolean | - | 行选中单选场景，是否允许取消选中 | N\nrowSelectionType | String | - | 行选中类型，单选或多选。效果和 `columns` 中配置的 `{ colKey: 'row-select', type: 'single' }` 一样。可选项：single/multiple | N\nselectOnRowClick | Boolean | - | 是否在点击整行时选中 | N\nselectedRowKeys | Array | [] | 选中行。半选状态行请更为使用 `indeterminateSelectedRowKeys` 控制。支持语法糖 `v-model:selectedRowKeys`。TS 类型：`Array<string \\| number>` | N\ndefaultSelectedRowKeys | Array | [] | 选中行。半选状态行请更为使用 `indeterminateSelectedRowKeys` 控制。非受控属性。TS 类型：`Array<string \\| number>` | N\nshowSortColumnBgColor | Boolean | false | 当前排序列是否显示背景色 | N\nsort | Object / Array | - | 排序控制。sortBy 排序字段；descending 是否进行降序排列。值为数组时，表示正进行多字段排序。支持语法糖 `v-model:sort`。TS 类型：`TableSort` `type TableSort = SortInfo \\| Array<SortInfo>` `interface SortInfo { sortBy: string; descending: boolean }`。[详细类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/table/type.ts) | N\ndefaultSort | Object / Array | - | 排序控制。sortBy 排序字段；descending 是否进行降序排列。值为数组时，表示正进行多字段排序。非受控属性。TS 类型：`TableSort` `type TableSort = SortInfo \\| Array<SortInfo>` `interface SortInfo { sortBy: string; descending: boolean }`。[详细类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/table/type.ts) | N\nsortIcon | Slot / Function | - | 自定义排序图标，支持全局配置 `GlobalConfigProvider`。TS 类型：`TNode`。[通用类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/common.ts) | N\nsortOnRowDraggable | Boolean | false | 已废弃。允许表格行拖拽时排序。请更为使用 `dragSort=\\\"row\\\"` | N\n`Omit<BaseTableProps<T>, 'columns' \\| 'onCellClick'>` | \\- | - | 继承 `Omit<BaseTableProps<T>, 'columns' \\| 'onCellClick'>` 中的全部属性 | N\nonAsyncLoadingClick | Function |  | TS 类型：`(context: { status: 'loading' \\| 'load-more' }) => void`<br/>异步加载区域被点击时触发 | N\nonCellClick | Function |  | TS 类型：`(context: PrimaryTableCellEventContext<T>) => void`<br/>单元格点击时触发。[详细类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/table/type.ts)。<br/>`interface PrimaryTableCellEventContext<T> { row: T; col: PrimaryTableCol; rowIndex: number; colIndex: number; e: MouseEvent }`<br/> | N\nonChange | Function |  | TS 类型：`(data: TableChangeData, context: TableChangeContext<T>) => void`<br/>分页、排序、过滤等内容变化时触发，泛型 T 指表格数据类型，`currentData` 表示变化后的数据。[详细类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/table/type.ts)。<br/>`interface TableChangeData { sorter?: TableSort; filter?: FilterValue; pagination?: PaginationProps }`<br/><br/>`interface TableChangeContext<T> { trigger: TableChangeTrigger; currentData?: T[] }`<br/><br/>`type TableChangeTrigger = 'filter' \\| 'sorter' \\| 'pagination'`<br/> | N\nonColumnChange | Function |  | TS 类型：`(context: PrimaryTableColumnChange<T>) => void`<br/>确认操作之前列配置发生变化时触发。`context.columns` 表示已选中的列；`context.currentColumn` 表示本次变化操作的列，值不存在表示全选操作；`context.type` 表示当前操作属于选中列或是取消列。[详细类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/table/type.ts)。<br/>`interface PrimaryTableColumnChange<T> { columns?: CheckboxGroupValue; currentColumn?: PrimaryTableCol<T>; type?: 'check' \\| 'uncheck'; e?: Event }`<br/> | N\nonColumnControllerVisibleChange | Function |  | TS 类型：`(visible: boolean, context: { trigger: 'cancel' \\| 'confirm' }) => void`<br/>列配置弹窗显示或隐藏变化时触发 | N\nonDataChange | Function |  | TS 类型：`(data: Array<T>, context: TableDataChangeContext) => void`<br/>本地数据排序导致 `data` 变化时触发，第一个参数指变化后的数据，第二个参数 `context.trigger` 表示触发本次变化的来源。[详细类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/table/type.ts)。<br/>`interface TableDataChangeContext { trigger: 'sort' }`<br/> | N\nonDisplayColumnsChange | Function |  | TS 类型：`(value: CheckboxGroupValue) => void`<br/>确认列配置时触发。[详细类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/table/type.ts)。<br/>`import { CheckboxGroupValue } from '@Checkbox'`<br/> | N\nonDragSort | Function |  | TS 类型：`(context: DragSortContext<T>) => void`<br/>拖拽排序时触发，`data` 表示排序前的数据，`newData` 表示拖拽排序结束后的新数据，`sort=row` 表示行拖拽事件触发，`sort=col` 表示列拖拽事件触发。[详细类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/table/type.ts)。<br/>`interface DragSortContext<T> { currentIndex: number; current: T; targetIndex: number; target: T; data: T[]; newData: T[]; currentData?: T[]; e: SortableEvent; sort: 'row' \\| 'col' }`<br/><br/>`import { SortableEvent, SortableOptions } from 'sortablejs'`<br/> | N\nonExpandChange | Function |  | TS 类型：`(expandedRowKeys: Array<string \\| number>, options: ExpandOptions<T>) => void`<br/>展开行发生变化时触发，泛型 T 指表格数据类型。[详细类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/table/type.ts)。<br/>`interface ExpandOptions<T> { expandedRowData: Array<T>; currentRowData: T }`<br/> | N\nonFilterChange | Function |  | TS 类型：`(filterValue: FilterValue, context: TableFilterChangeContext<T>) => void`<br/>过滤参数发生变化时触发，泛型 T 指表格数据类型。[详细类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/table/type.ts)。<br/>`interface TableFilterChangeContext<T> { col?: PrimaryTableCol<T>; trigger: 'filter-change' \\| 'confirm' \\| 'reset' \\| 'clear' }`<br/> | N\nonRowEdit | Function |  | TS 类型：`(context: PrimaryTableRowEditContext<T>) => void`<br/>行编辑时触发。[详细类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/table/type.ts)。<br/>`type PrimaryTableRowEditContext<T> = PrimaryTableCellParams<T> & { value: any; editedRow: T }`<br/> | N\nonRowValidate | Function |  | TS 类型：`(context: PrimaryTableRowValidateContext<T>) => void`<br/>行编辑校验完成后触发，即组件实例方法 `validateRowData` 执行结束后触发。`result` 表示校验结果，`trigger=self` 表示编辑组件内部触发的校验，`trigger='parent'` 表示表格父组件触发的校验。[详细类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/table/type.ts)。<br/>`type PrimaryTableRowValidateContext<T> = { result: TableRowValidateResult<T>[]; trigger: TableValidateTrigger }`<br/><br/>`type TableValidateTrigger = 'self' \\| 'parent'`<br/><br/>`export type TableRowValidateResult<T> = PrimaryTableCellParams<T> & { errorList: AllValidateResult[]; value: any }`<br/> | N\nonSelectChange | Function |  | TS 类型：`(selectedRowKeys: Array<string \\| number>, options: SelectOptions<T>) => void`<br/>选中行发生变化时触发，泛型 T 指表格数据类型。两个参数，第一个参数为选中行 keys，第二个参数为更多参数，具体如下：`type = uncheck` 表示当前行操作为「取消行选中」；`type = check` 表示当前行操作为「行选中」； `currentRowKey` 表示当前操作行的 rowKey 值； `currentRowData` 表示当前操作行的行数据。[详细类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/table/type.ts)。<br/>`interface SelectOptions<T> { selectedRowData: Array<T>; type: 'uncheck' \\| 'check'; currentRowKey?: string; currentRowData?: T }`<br/> | N\nonSortChange | Function |  | TS 类型：`(sort: TableSort, options: SortOptions<T>) => void`<br/>排序发生变化时触发。其中 sortBy 表示当前排序的字段，sortType 表示排序的方式，currentDataSource 表示 sorter 排序后的结果，col 表示列配置。sort 值类型为数组时表示多字段排序。[详细类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/table/type.ts)。<br/>`interface SortOptions<T> { currentDataSource?: Array<T>; col: PrimaryTableCol }`<br/> | N\nonValidate | Function |  | TS 类型：`(context: PrimaryTableValidateContext) => void`<br/>可编辑行表格，全部数据校验完成后触发。即组件实例方法 `validateTableData` 或 `validateTableCellData` 执行结束后触发。[详细类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/table/type.ts)。<br/>`interface PrimaryTableValidateContext { result: TableErrorListMap }`<br/><br/>`type TableErrorListMap = { [key: string]: AllValidateResult[] }`<br/> | N\n\n### PrimaryTable Events\n\n名称 | 参数 | 描述\n-- | -- | --\nasync-loading-click | `(context: { status: 'loading' \\| 'load-more' })` | 异步加载区域被点击时触发\ncell-click | `(context: PrimaryTableCellEventContext<T>)` | 单元格点击时触发。[详细类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/table/type.ts)。<br/>`interface PrimaryTableCellEventContext<T> { row: T; col: PrimaryTableCol; rowIndex: number; colIndex: number; e: MouseEvent }`<br/>\nchange | `(data: TableChangeData, context: TableChangeContext<T>)` | 分页、排序、过滤等内容变化时触发，泛型 T 指表格数据类型，`currentData` 表示变化后的数据。[详细类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/table/type.ts)。<br/>`interface TableChangeData { sorter?: TableSort; filter?: FilterValue; pagination?: PaginationProps }`<br/><br/>`interface TableChangeContext<T> { trigger: TableChangeTrigger; currentData?: T[] }`<br/><br/>`type TableChangeTrigger = 'filter' \\| 'sorter' \\| 'pagination'`<br/>\ncolumn-change | `(context: PrimaryTableColumnChange<T>)` | 确认操作之前列配置发生变化时触发。`context.columns` 表示已选中的列；`context.currentColumn` 表示本次变化操作的列，值不存在表示全选操作；`context.type` 表示当前操作属于选中列或是取消列。[详细类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/table/type.ts)。<br/>`interface PrimaryTableColumnChange<T> { columns?: CheckboxGroupValue; currentColumn?: PrimaryTableCol<T>; type?: 'check' \\| 'uncheck'; e?: Event }`<br/>\ncolumn-controller-visible-change | `(visible: boolean, context: { trigger: 'cancel' \\| 'confirm' })` | 列配置弹窗显示或隐藏变化时触发\ndata-change | `(data: Array<T>, context: TableDataChangeContext)` | 本地数据排序导致 `data` 变化时触发，第一个参数指变化后的数据，第二个参数 `context.trigger` 表示触发本次变化的来源。[详细类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/table/type.ts)。<br/>`interface TableDataChangeContext { trigger: 'sort' }`<br/>\ndisplay-columns-change | `(value: CheckboxGroupValue)` | 确认列配置时触发。[详细类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/table/type.ts)。<br/>`import { CheckboxGroupValue } from '@Checkbox'`<br/>\ndrag-sort | `(context: DragSortContext<T>)` | 拖拽排序时触发，`data` 表示排序前的数据，`newData` 表示拖拽排序结束后的新数据，`sort=row` 表示行拖拽事件触发，`sort=col` 表示列拖拽事件触发。[详细类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/table/type.ts)。<br/>`interface DragSortContext<T> { currentIndex: number; current: T; targetIndex: number; target: T; data: T[]; newData: T[]; currentData?: T[]; e: SortableEvent; sort: 'row' \\| 'col' }`<br/><br/>`import { SortableEvent, SortableOptions } from 'sortablejs'`<br/>\nexpand-change | `(expandedRowKeys: Array<string \\| number>, options: ExpandOptions<T>)` | 展开行发生变化时触发，泛型 T 指表格数据类型。[详细类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/table/type.ts)。<br/>`interface ExpandOptions<T> { expandedRowData: Array<T>; currentRowData: T }`<br/>\nfilter-change | `(filterValue: FilterValue, context: TableFilterChangeContext<T>)` | 过滤参数发生变化时触发，泛型 T 指表格数据类型。[详细类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/table/type.ts)。<br/>`interface TableFilterChangeContext<T> { col?: PrimaryTableCol<T>; trigger: 'filter-change' \\| 'confirm' \\| 'reset' \\| 'clear' }`<br/>\nrow-edit | `(context: PrimaryTableRowEditContext<T>)` | 行编辑时触发。[详细类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/table/type.ts)。<br/>`type PrimaryTableRowEditContext<T> = PrimaryTableCellParams<T> & { value: any; editedRow: T }`<br/>\nrow-validate | `(context: PrimaryTableRowValidateContext<T>)` | 行编辑校验完成后触发，即组件实例方法 `validateRowData` 执行结束后触发。`result` 表示校验结果，`trigger=self` 表示编辑组件内部触发的校验，`trigger='parent'` 表示表格父组件触发的校验。[详细类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/table/type.ts)。<br/>`type PrimaryTableRowValidateContext<T> = { result: TableRowValidateResult<T>[]; trigger: TableValidateTrigger }`<br/><br/>`type TableValidateTrigger = 'self' \\| 'parent'`<br/><br/>`export type TableRowValidateResult<T> = PrimaryTableCellParams<T> & { errorList: AllValidateResult[]; value: any }`<br/>\nselect-change | `(selectedRowKeys: Array<string \\| number>, options: SelectOptions<T>)` | 选中行发生变化时触发，泛型 T 指表格数据类型。两个参数，第一个参数为选中行 keys，第二个参数为更多参数，具体如下：`type = uncheck` 表示当前行操作为「取消行选中」；`type = check` 表示当前行操作为「行选中」； `currentRowKey` 表示当前操作行的 rowKey 值； `currentRowData` 表示当前操作行的行数据。[详细类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/table/type.ts)。<br/>`interface SelectOptions<T> { selectedRowData: Array<T>; type: 'uncheck' \\| 'check'; currentRowKey?: string; currentRowData?: T }`<br/>\nsort-change | `(sort: TableSort, options: SortOptions<T>)` | 排序发生变化时触发。其中 sortBy 表示当前排序的字段，sortType 表示排序的方式，currentDataSource 表示 sorter 排序后的结果，col 表示列配置。sort 值类型为数组时表示多字段排序。[详细类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/table/type.ts)。<br/>`interface SortOptions<T> { currentDataSource?: Array<T>; col: PrimaryTableCol }`<br/>\nvalidate | `(context: PrimaryTableValidateContext)` | 可编辑行表格，全部数据校验完成后触发。即组件实例方法 `validateTableData` 执行结束后触发。[详细类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/table/type.ts)。<br/>`interface PrimaryTableValidateContext { result: TableErrorListMap }`<br/><br/>`type TableErrorListMap = { [key: string]: AllValidateResult[] }`<br/>\n\n### PrimaryTableInstanceFunctions 组件实例方法\n\n名称 | 参数 | 返回值 | 描述\n-- | -- | -- | --\nclearValidateData | \\- | \\- | 必需。清空所有校验结果\nvalidateRowData | `(rowValue: any)` | `Promise<{ trigger: TableValidateTrigger, result: ErrorListObjectType<T>[] }>` | 必需。校验行信息，校验完成后，会触发事件 `onRowValidate`。参数 `rowValue` 表示行唯一标识的值。[详细类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/table/type.ts)。<br/>`type ErrorListObjectType<T> = PrimaryTableRowEditContext<T> & { errorList: AllValidateResult[] }`<br/>\nvalidateTableCellData | \\- | `Promise<{ result: TableErrorListMap }>` | 必需。校验表格可编辑单元格数据，校验完成后，会触发事件 `onValidate`\nvalidateTableData | \\- | `Promise<{ result: TableErrorListMap }>` | 必需。校验表格全部数据，校验完成后，会触发事件 `onValidate`\n\n### PrimaryTableCol\n\n名称 | 类型 | 默认值 | 描述 | 必传\n-- | -- | -- | -- | --\ncell | String / Function | - | 自定义单元格渲染。值类型为 Function 表示以函数形式渲染单元格。值类型为 string 表示使用插槽渲染，插槽名称为 cell 的值。默认使用 colKey 作为插槽名称。优先级高于 render。泛型 T 指表格数据类型。TS 类型：`string \\| TNode<PrimaryTableCellParams<T>>` `interface PrimaryTableCellParams<T> { row: T; rowIndex: number; col: PrimaryTableCol<T>; colIndex: number }`。[通用类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/common.ts)。[详细类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/table/type.ts) | N\ncheckProps | Object / Function | - | 透传参数，`colKey` 值为 `row-select` 时，配置有效。具体定义参考 Checkbox 组件 和 Radio 组件。泛型 T 指表格数据类型。TS 类型：`CheckProps<T>` `type CheckProps<T> = CheckboxProps \\| RadioProps \\| ((options: { row: T; rowIndex: number }) => CheckboxProps \\| RadioProps)` `import { CheckboxProps } from '@Checkbox'`，[Radio API Documents](./radio?tab=api)。[详细类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/table/type.ts) | N\nchildren | Array | - | 用于多级表头，泛型 T 指表格数据类型。TS 类型：`Array<PrimaryTableCol<T>>` | N\ncolKey | String | - | 渲染列所需字段，必须唯一。值为 `row-select` 表示当前列为行选中操作列。值为 `drag` 表示当前列为拖拽排序操作列。值为 `serial-number` 表示当前列为「序号」列 | N\ndisabled | Function | - | 是否禁用行选中，`colKey` 值为 `row-select` 时，配置有效。TS 类型：`(options: {row: T; rowIndex: number }) => boolean` | N\nedit | Object | - | 可编辑单元格配置项，具体属性参考文档 `TableEditableCellConfig` 描述。TS 类型：`TableEditableCellConfig<T>` | N\nfilter | Object | - | 过滤规则，支持多选(multiple)、单选(single)、输入框(input) 等三种形式。想要自定义过滤组件，可通过 `filter.component` 实现，自定义过滤组件需要包含参数 value 和事件 change。更多信息请查看当前页面中 `TableColumnFilter` 的详细文档。TS 类型：`TableColumnFilter` | N\nrender | Function | - | 自定义表头或单元格，泛型 T 指表格数据类型。TS 类型：`TNode<PrimaryTableRenderParams<T>>` `interface PrimaryTableRenderParams<T> extends PrimaryTableCellParams<T> { type: RenderType }`。[通用类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/common.ts)。[详细类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/table/type.ts) | N\nsortType | String | all | 当前列支持排序的方式，desc 表示当前列只能进行降序排列；asc 表示当前列只能进行升序排列；all 表示当前列既可升序排列，又可以降序排列。可选项：desc/asc/all。TS 类型：`SortType` `type SortType = 'desc' \\| 'asc' \\| 'all'`。[详细类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/table/type.ts) | N\nsorter | Boolean / Function | false | 该列是否支持排序。值为 true 表示该列支持排序；值类型为函数，表示对本地数据 `data` 进行排序，返回值参考 [MDN Array.sort](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/sort)。泛型 T 指表格数据类型。TS 类型：`boolean \\| SorterFun<T>` `type SorterFun<T> = (a: T, b: T) => number`。[详细类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/table/type.ts) | N\ntitle | String / Function | - | 自定义表头渲染。值类型为 Function 表示以函数形式渲染表头。值类型为 string 表示使用插槽渲染，插槽名称为 title 的值。优先级高于 render。TS 类型：`string \\| TNode<{ col: PrimaryTableCol; colIndex: number }>`。[通用类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/common.ts) | N\ntype | String | single | `colKey` 值为 `row-select` 时表示行选中列，有两种模式：单选和多选。 `type=single` 表示单选，`type=multiple` 表示多选。可选项：single/multiple | N\n`Omit<BaseTableCol, 'cell' \\| 'title' \\| 'render' \\| 'children'>` | \\- | - | 继承 `Omit<BaseTableCol, 'cell' \\| 'title' \\| 'render' \\| 'children'>` 中的全部属性 | N\n\n\n### TableRowState\n\n名称 | 类型 | 默认值 | 描述 | 必传\n-- | -- | -- | -- | --\ndisabled | Boolean | false | 表格行是否禁用选中 | N\nexpandChildrenLength | Number | - | 当前节点展开的子节点数量 | N\nexpanded | Boolean | false | 必需。表格行是否展开 | Y\nid | String / Number | - | 必需。唯一标识 | Y\nlevel | Number | - | 当前节点层级。TS 类型：`number` | N\nparent | \\- | - | 父节点。TS 类型：`TableRowState<T>` | N\npath | Array | - | 当前节点路径。TS 类型：`TableRowState<T>[]` | N\nrow | \\- | - | 必需。原始表格行数据。TS 类型：`T` | Y\nrowIndex | Number | - | 必需。表格行下标，值为 `-1` 标识当前行未展开显示 | Y\n\n### TableColumnFilter\n\n名称 | 类型 | 默认值 | 描述 | 必传\n-- | -- | -- | -- | --\nattrs | Object | - | 用于透传筛选器属性到自定义组件 `component`，HTML 原生属性。TS 类型：`HTMLElementAttributes`。[通用类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/common.ts) | N\nclassNames | String | - | 透传类名到自定义组件 `component`。TS 类型：`ClassName`。[通用类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/common.ts) | N\ncomponent | Slot / Function | - | 用于自定义筛选器，只要保证自定义筛选器包含 value 属性 和 change 事件，即可像内置筛选器一样正常使用。示例：`component: DatePicker`。TS 类型：`ComponentType`。[通用类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/common.ts) | N\nconfirmEvents | Array | - | 哪些事件触发后会进行过滤搜索（确认按钮无需配置，会默认触发搜索）。输入框组件示例：`confirmEvents: ['onEnter']`。TS 类型：`string[]` | N\nlabel | String / Function | - | 过滤项标题文本，显示在“过滤结果行”中的列标题描述。一般用于表头标题和过滤文本行中的列标题不一样的场景。TS 类型：`string \\| TNode`。[通用类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/common.ts) | N\nlist | Array | - | 用于配置当前筛选器可选值有哪些，仅当 `filter.type` 等于 `single` 或 `multiple` 时有效。TS 类型：`Array<OptionData>`。[通用类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/common.ts) | N\npopupProps | Object | - | 透传 Popup 组件全部属性到筛选器浮层。TS 类型：`PopupProps`，[Popup API Documents](./popup?tab=api)。[详细类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/table/type.ts) | N\nprops | Object | - | 用于透传筛选器属性到自定义组件 `component`，可以对筛选器进行任何原组件支持的属性配置。TS 类型：`FilterProps` `type FilterProps = RadioProps \\| CheckboxProps \\| InputProps \\| { [key: string]: any }`，[Input API Documents](./input?tab=api)。[详细类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/table/type.ts) | N\nresetValue | \\- | - | 重置时设置的值，示例：'' 或 []。TS 类型：`any` | N\nshowConfirmAndReset | Boolean | false | 是否显示重置和确认。值为真，过滤事件（filter-change）会在确定时触发；值为假，则数据变化时会立即触发过滤事件 | N\nstyle | Object | - | 透传内联样式到自定义组件 `component`。TS 类型：`Styles`。[通用类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/common.ts) | N\ntype | String | - | 用于设置筛选器类型：单选按钮筛选器、复选框筛选器、输入框筛选器。更多复杂组件，请更为使用 `component` 自定义任意组件。TS 类型：`FilterType` `type FilterType = 'input' \\| 'single' \\| 'multiple'`。[详细类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/table/type.ts) | N\n\n### TableColumnController\n\n名称 | 类型 | 默认值 | 描述 | 必传\n-- | -- | -- | -- | --\nbuttonProps | Object | - | 自定义列配置按钮，包括 Button 组件的全部属性。比如：按钮颜色和文本。TS 类型：`ButtonProps`，[Button API Documents](./button?tab=api)。[详细类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/table/type.ts) | N\ncheckboxProps | Object | - | 透传复选框组件全部特性。TS 类型：`CheckboxGroupProps`，[Checkbox API Documents](./checkbox?tab=api)。[详细类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/table/type.ts) | N\ncolumnControllerBottomContent | Slot / Function | - | 列配置控制器底部内容。TS 类型：`TNode`。[通用类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/common.ts) | N\ncolumnControllerTopContent | Slot / Function | - | 列配置控制器顶部内容。TS 类型：`TNode`。[通用类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/common.ts) | N\ndialogProps | Object | - | 透传弹框组件全部特性，如：防止滚动穿透。TS 类型：`DialogProps`，[Dialog API Documents](./dialog?tab=api)。[详细类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/table/type.ts) | N\ndisplayType | String | auto-width | 指列配置弹框中，各列的字段平铺方式：`fixed-width` 表示固定宽度，每行固定数量，横向和纵向均对齐，`auto-width` 表示宽度随列标题数量自由显示，横向铺满，纵向不要求对齐。可选项：fixed-width/auto-width | N\nfields | Array | - | 用于设置允许用户对哪些列进行显示或隐藏的控制，默认为全部字段。TS 类型：`string[]` | N\ngroupColumns | Array | - | 列分组功能配置，当列数量过多的时候，为了方便阅读，一般需要进行列分组设置。TS 类型：`TableColumnGroup[]` `interface TableColumnGroup { label: string; value?: string \\| number; columns: string[] }`。[详细类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/table/type.ts) | N\nhideTriggerButton | Boolean | false | 是否隐藏表格组件内置的“列配置”按钮 | N\nplacement | String | top-right | 列配置按钮基于表格的放置位置：左上角、右上角、左下角、右下角等。可选项：top-left/top-right/bottom-left/bottom-right | N\n\n### TableEditableCellConfig\n\n名称 | 类型 | 默认值 | 描述 | 必传\n-- | -- | -- | -- | --\nabortEditOnEvent | Array | - | 除了点击非自身元素退出编辑态之外，还有哪些事件退出编辑态。示例：`abortEditOnEvent: ['onChange']`。TS 类型：`string[]` | N\ncomponent | \\- | - | 组件定义，如：`Input` `Select`。对于完全自定义的组件（非组件库内的组件），组件需要支持 `value` 和 `onChange` ；如果还需要支持校验规则，则组件还需实现 `tips` 和 `status` 两个 API，实现规则可参考 `Input` 组件。TS 类型：`ComponentType`。[通用类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/common.ts) | N\ndefaultEditable | Boolean | false | 单元格默认状态是否为编辑态 | N\nkeepEditMode | Boolean | false | 设置当前列的单元格始终保持为编辑态 | N\non | Function | - | 透传给编辑组件的事件，参数有({ row, rowIndex, col, colIndex, editedRow, updateEditedCellValue })。可以使用参数 `updateEditedCellValue` 更新当前单元格（或当前行任意编辑状态单元格）的值。<br/>更新当前单元格数据示例：`updateEditedCellValue(value)`；<br/>更新当前行编辑态数据示例：`updateEditedCellValue({ isUpdateCurrentRow: true, column_key: 'test'  })`；<br/>更新其他行编辑态数据示例：`updateEditedCellValue({ rowValue: '124', column_key: 'test' })`。TS 类型：`(context: TableEditableCellPropsParams<T>) => { [eventName: string]: Function }` | N\nonEdited | Function | - | 编辑完成后，退出编辑模式时触发。TS 类型：`(context: PrimaryTableOnEditedContext<T>) => void` `type PrimaryTableOnEditedContext<T> = PrimaryTableCellParams<T> & { trigger: string; newRowData: T; }`。[详细类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/table/type.ts) | N\nprops | Object / Function | - | 透传给组件 `edit.component` 的属性，可以使用 `updateEditedCellValue` 更新当前行任意编辑状态单元格的值。TS 类型：`TableEditableCellProps<T>` `type TableEditableCellProps<T> = TablePlainObject \\| ((params: TableEditableCellPropsParams<T>) => TablePlainObject)` `interface TableEditableCellPropsParams<T> extends PrimaryTableCellParams<T> { editedRow: T; updateEditedCellValue: (val: any \\| { rowValue?: string \\| number; isUpdateCurrentRow?: boolean; [key: string]: any }) => void }` `interface TablePlainObject{ [key: string]: any }`。[通用类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/common.ts)。[详细类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/table/type.ts) | N\nrules | Array | - | 校验规则。TS 类型：`TableEditableCellRules<T>` `type TableEditableCellRules<T> = FormRule[] \\| ((params: PrimaryTableCellParams<T>) => FormRule[])`，[Form API Documents](./form?tab=api)。[详细类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/table/type.ts) | N\nshowEditIcon | Boolean | true | 是否显示编辑图标 | N\nvalidateTrigger | String | 'exit' | 触发校验的时机，有 2 种：退出编辑时和数据变化时。TS 类型：`'exit' \\| 'change'` | N\n\n### TableTreeConfig\n\n名称 | 类型 | 默认值 | 描述 | 必传\n-- | -- | -- | -- | --\ncheckStrictly | Boolean | false | 表示树形结构的行选中（多选），父子行选中是否独立 | N\nchildrenKey | String | children | 树形结构子节点字段，示例：`childrenKey='list'`。一般应用在数据 `data` 的子节点字段不是 `children` 的场景 | N\ndefaultExpandAll | Boolean | false | 是否默认展开全部，仅默认情况有效。如果希望自由控制树形结构的展开或收起，可使用实例方法 `expandAll` 和 `foldAll` | N\nexpandTreeNodeOnClick | Boolean | false | 是否在点击行时展开树形结构节点 | N\nindent | Number | 24 | 树结点缩进距离，单位：px | N\ntreeNodeColumnIndex | Number | 0 | 树结点在第几列渲染，默认为第一列 | N\n\n### TScroll\n\n名称 | 类型 | 默认值 | 描述 | 必传\n-- | -- | -- | -- | --\nbufferSize | Number | 20 | 表示除可视区域外，额外渲染的行数，避免快速滚动过程中，新出现的内容来不及渲染从而出现空白 | N\nisFixedRowHeight | Boolean | false | 表示每行内容是否同一个固定高度，仅在 `scroll.type` 为 `virtual` 时有效，该属性设置为 `true` 时，可用于简化虚拟滚动内部计算逻辑，提升性能，此时则需要明确指定 `scroll.rowHeight` 属性的值 | N\nrowHeight | Number | - | 行高，不会给`<tr>`元素添加样式高度，仅作为滚动时的行高参考。一般情况不需要设置该属性。如果设置，可尽量将该属性设置为每行平均高度，从而使得滚动过程更加平滑 | N\nthreshold | Number | 100 | 启动虚拟滚动的阈值。为保证组件收益最大化，当数据量小于阈值 `scroll.threshold` 时，无论虚拟滚动的配置是否存在，组件内部都不会开启虚拟滚动 | N\ntype | String | - | 必需。滚动加载类型，有两种：懒加载和虚拟滚动。<br />值为 `lazy` ，表示滚动时会进行懒加载，非可视区域内的内容将不会默认渲染，直到该内容可见时，才会进行渲染，并且已渲染的内容滚动到不可见时，不会被销毁；<br />值为`virtual`时，表示会进行虚拟滚动，无论滚动条滚动到哪个位置，同一时刻，仅渲染该可视区域内的内容，当需要展示的数据量较大时，建议开启该特性。可选项：lazy/virtual | Y\n"
      },
      {
        "type": "EnhancedTable",
        "props": ":: BASE_DOC ::\n\n## API\n\n### BaseTable Props\n\n名称 | 类型 | 默认值 | 描述 | 必传\n-- | -- | -- | -- | --\nactiveRowKeys | Array | [] | 高亮行，支持鼠标键盘操作(Shift)连续高亮行，可用于处理行选中等批量操作，模拟操作系统区域选择行为。支持语法糖 `v-model:activeRowKeys`。TS 类型：`Array<string \\| number>` | N\ndefaultActiveRowKeys | Array | [] | 高亮行，支持鼠标键盘操作(Shift)连续高亮行，可用于处理行选中等批量操作，模拟操作系统区域选择行为。非受控属性。TS 类型：`Array<string \\| number>` | N\nactiveRowType | String | - | 默认不会高亮点击行，`activeRowType=single` 表示鼠标点击仅允许同时高亮一行，Shift 键盘操作加鼠标操作依然可以高亮多行，因为这属于明显的区域选择行为。`activeRowType= multiple ` 表示允许鼠标点击同时高亮多行。TS 类型：`'single' \\| 'multiple'` | N\nallowResizeColumnWidth | Boolean | undefined | 已废弃。是否允许调整列宽。请更为使用 `resizable` | N\nattach | String / Function | - | 超出省略等所有浮层元素统一绑定到 `attach`，可根据实际情况调整挂载元素。TS 类型：`AttachNode`。[通用类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/common.ts) | N\nbordered | Boolean | false | 是否显示表格边框 | N\nbottomContent | String / Slot / Function | - | 表格底部内容，可以用于自定义列设置等。TS 类型：`string \\| TNode`。[通用类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/common.ts) | N\ncellEmptyContent | String / Slot / Function | - | 单元格数据为空时呈现的内容。TS 类型：`string \\| TNode<BaseTableCellParams<T>>`。[通用类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/common.ts) | N\ncolumns | Array | [] | 列配置，泛型 T 指表格数据类型。TS 类型：`Array<BaseTableCol<T>>` | N\ndata | Array | [] | 数据源，泛型 T 指表格数据类型。TS 类型：`Array<T>` | N\ndisableDataPage | Boolean | false | 是否禁用本地数据分页。当 `data` 数据长度超过分页大小时，会自动进行本地数据分页。如果 `disableDataPage` 设置为 true，则无论何时，都不会进行本地数据分页 | N\ndisableSpaceInactiveRow | Boolean | undefined | 默认重复按下 Space 键可取消当前行高亮，是否禁用取消 | N\nempty | String / Slot / Function | '' | 空表格呈现样式，支持全局配置 `GlobalConfigProvider`。TS 类型：`string \\| TNode`。[通用类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/common.ts) | N\nfirstFullRow | String / Slot / Function | - | 首行内容，横跨所有列。TS 类型：`string \\| TNode`。[通用类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/common.ts) | N\nfixedRows | Array | - | 固定行（冻结行），示例：[M, N]，表示冻结表头 M 行和表尾 N 行。M 和 N 值为 0 时，表示不冻结行。TS 类型：`Array<number>` | N\nfootData | Array | [] | 表尾数据源，泛型 T 指表格数据类型。TS 类型：`Array<T>` | N\nfooterAffixProps | Object | - | 已废弃。请更为使用 `footerAffixedBottom`。表尾吸底基于 Affix 组件开发，透传全部 Affix 组件属性。TS 类型：`Partial<AffixProps>` | N\nfooterAffixedBottom | Boolean / Object | false | 表尾吸底。使用该功能，需要非常注意表格是相对于哪一个父元素进行滚动。值为 `true`，则表示相对于整个窗口吸底。如果表格滚动的父元素不是整个窗口，请通过 `footerAffixedBottom.container` 调整固钉的吸顶范围。基于 Affix 组件开发，透传全部 Affix 组件属性。TS 类型：`boolean \\| Partial<AffixProps>` | N\nfooterSummary | String / Slot / Function | - | 表尾总结行。TS 类型：`string \\| TNode`。[通用类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/common.ts) | N\nheaderAffixProps | Object | - | 已废弃。请更为使用 `headerAffixedTop`。表头吸顶基于 Affix 组件开发，透传全部 Affix 组件属性。TS 类型：`Partial<AffixProps>`，[Affix API Documents](./affix?tab=api)。[详细类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/table/type.ts) | N\nheaderAffixedTop | Boolean / Object | false | 表头吸顶。使用该功能，需要非常注意表格是相对于哪一个父元素进行滚动。值为 `true`，表示相对于整个窗口吸顶。如果表格滚动的父元素不是整个窗口，请通过 `headerAffixedTop.container` 调整吸顶的位置。基于 Affix 组件开发，透传全部 Affix 组件属性。TS 类型：`boolean \\| Partial<AffixProps>` | N\nheight | String / Number | - | 表格高度，超出后会出现滚动条。示例：100,  '30%',  '300'。值为数字类型，会自动加上单位 px。如果不是绝对固定表格高度，建议使用 `maxHeight` | N\nhorizontalScrollAffixedBottom | Boolean / Object | - | 滚动条吸底。基于 Affix 组件开发，透传全部 Affix 组件属性。TS 类型：`boolean \\| Partial<AffixProps>` | N\nhover | Boolean | false | 是否显示鼠标悬浮状态 | N\nkeyboardRowHover | Boolean | true | 键盘操作行显示悬浮效果，一般用于键盘操作行选中、行展开、行高亮等功能 | N\nlastFullRow | String / Slot / Function | - | 尾行内容，横跨所有列。TS 类型：`string \\| TNode`。[通用类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/common.ts) | N\nlazyLoad | Boolean | false | 是否启用整个表格元素的懒加载，当页面滚动到可视区域后再渲染表格。注意和表格内部行滚动懒加载的区别，内部行滚动无论表格是否在可视区域都会默认渲染第一屏的行元素 | N\nloading | Boolean / Slot / Function | undefined | 加载中状态。值为 `true` 会显示默认加载中样式，可以通过 Function 和 插槽 自定义加载状态呈现内容和样式。值为 `false` 则会取消加载状态。TS 类型：`boolean \\| TNode`。[通用类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/common.ts) | N\nloadingProps | Object | - | 透传加载组件全部属性。TS 类型：`Partial<LoadingProps>`，[Loading API Documents](./loading?tab=api)。[详细类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/table/type.ts) | N\nlocale | Object | - | 语言配置。TS 类型：`TableConfig`，[ConfigProvider API Documents](./config-provider?tab=api)。[详细类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/table/type.ts) | N\nmaxHeight | String / Number | - | 表格最大高度，超出后会出现滚动条。示例：100, '30%', '300'。值为数字类型，会自动加上单位 px | N\npagination | Object | - | 分页配置，值为空则不显示。具体 API 参考分页组件。当 `data` 数据长度超过分页大小时，会自动对本地数据 `data` 进行排序，如果不希望对于 `data` 进行排序，可以设置 `disableDataPage = true`。TS 类型：`PaginationProps`，[Pagination API Documents](./pagination?tab=api)。[详细类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/table/type.ts) | N\npaginationAffixedBottom | Boolean / Object | - | 分页吸底。基于 Affix 组件开发，透传全部 Affix 组件属性。TS 类型：`boolean \\| Partial<AffixProps>` | N\nresizable | Boolean | false | 是否允许调整列宽，设置 `tableLayout=fixed` 效果更友好，此时不允许通过 CSS 设置 `table`元素宽度，也不允许设置 `tableContentWidth`。一般不建议在列宽调整场景使用 `tableLayout: auto`。如果想要配置宽度可调整的最小值和最大值，请使用 `column.resize`，示例：`columns: [{ resize: { minWidth: 120, maxWidth: 300 } }]`。<br/> 默认规则：因列宽超出存在横向滚动条时，列宽调整仅影响当前列宽和总列宽；表格列较少没有横向滚动条时，列宽调整表现为自身宽度和相邻宽度变化 | N\nrowAttributes | Object / Array / Function | - | HTML 标签 `tr` 的属性。类型为 Function 时，参数说明：`params.row` 表示行数据；`params.rowIndex` 表示行下标；`params.type=body` 表示属性作用于 `tbody` 中的元素；`params.type=foot` 表示属性作用于 `tfoot` 中的元素。<br />示例一：{ draggable: true }，<br />示例二：[{ draggable: true }, { title: '超出省略显示' }]。<br /> 示例三：() => [{ draggable: true }]。TS 类型：`TableRowAttributes<T>` `type TableRowAttributes<T> = HTMLElementAttributes \\| ((params: { row: T; rowIndex: number; type: 'body' \\| 'foot' }) => HTMLElementAttributes) \\| Array<TableRowAttributes<T>>`。[通用类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/common.ts)。[详细类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/table/type.ts) | N\nrowClassName | String / Object / Array / Function | - | 行类名，泛型 T 指表格数据类型。`params.row` 表示行数据；`params.rowIndex` 表示行下标；`params.type=body`  表示类名作用于 `tbody` 中的元素；`params.type= tfoot` 表示类名作用于 `tfoot` 中的元素。TS 类型：`ClassName \\| ((params: RowClassNameParams<T>) => ClassName)` `interface RowClassNameParams<T> { row: T; rowIndex: number; type?: 'body' \\| 'foot' }`。[通用类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/common.ts)。[详细类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/table/type.ts) | N\nrowKey | String | 'id' | 必需。唯一标识一行数据的字段名，来源于 `data` 中的字段。如果是字段嵌套多层，可以设置形如 `item.a.id` 的方法 | Y\nrowspanAndColspan | Function | - | 用于自定义合并单元格，泛型 T 指表格数据类型。示例：`({ row, col, rowIndex, colIndex }) => { rowspan: 2, colspan: 3 }`。TS 类型：`TableRowspanAndColspanFunc<T>` `type TableRowspanAndColspanFunc<T> = (params: BaseTableCellParams<T>) => RowspanColspan` `interface RowspanColspan { colspan?: number; rowspan?: number }`。[详细类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/table/type.ts) | N\nrowspanAndColspanInFooter | Function | - | 用于自定义表尾的合并单元格，泛型 T 指表格数据类型。示例：`({ row, col, rowIndex, colIndex }) => { rowspan: 2, colspan: 3 }`。TS 类型：`TableRowspanAndColspanFunc<T>` | N\nscroll | Object | - | 懒加载和虚拟滚动。为保证组件收益最大化，当数据量小于阈值 `scroll.threshold` 时，无论虚拟滚动的配置是否存在，组件内部都不会开启虚拟滚动，`scroll.threshold` 默认为 `100`。TS 类型：`TScroll`。[通用类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/common.ts) | N\nshowHeader | Boolean | true | 是否显示表头 | N\nsize | String | - | 表格尺寸，支持全局配置 `GlobalConfigProvider`，默认全局配置值为 `medium`。可选项：small/medium/large。TS 类型：`SizeEnum`。[通用类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/common.ts) | N\nstripe | Boolean | false | 是否显示斑马纹 | N\ntableContentWidth | String | - | 表格内容的总宽度，注意不是表格可见宽度。主要应用于 `table-layout: auto` 模式下的固定列显示。`tableContentWidth` 内容宽度的值必须大于表格可见宽度 | N\ntableLayout | String | fixed | 表格布局方式，`<table>` 元素原生属性。[MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/table-layout)。注意，在列宽调整下场景只能使用 `fixed` 模式。可选项：auto/fixed | N\ntopContent | String / Slot / Function | - | 表格顶部内容，可以用于自定义列设置、顶部查询条件等。TS 类型：`string \\| TNode`。[通用类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/common.ts) | N\nverticalAlign | String | middle | 行内容上下方向对齐。可选项：top/middle/bottom | N\nonActiveChange | Function |  | TS 类型：`(activeRowKeys: Array<string \\| number>, context: ActiveChangeContext<T>) => void`<br/>高亮行发生变化时触发，泛型 T 指表格数据类型。参数 `activeRowList` 表示所有高亮行数据， `currentRowData` 表示当前操作行数据。[详细类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/table/type.ts)。<br/>`interface ActiveChangeContext<T> { activeRowList: Array<{ row: T, rowIndex: number }>; currentRowData?: T; type: 'active' \\| 'inactive' }`<br/> | N\nonActiveRowAction | Function |  | TS 类型：`(context: ActiveRowActionContext<T>) => void`<br/>键盘操作事件。开启行高亮功能后，会自动开启键盘操作功能，如：通过键盘(Shift)或鼠标操作连续选中高亮行时触发，一般用于处理行选中等批量操作，模拟操作系统区域选择行为。[详细类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/table/type.ts)。<br/>`interface ActiveRowActionContext<T> { action: ActiveRowActionType,  activeRowList: Array<{ row: T, rowIndex: number }> }`<br/><br/>`type ActiveRowActionType ='shift-area-selection' \\| 'space-one-selection' \\| 'clear' \\| 'select-all'`<br/> | N\nonCellClick | Function |  | TS 类型：`(context: BaseTableCellEventContext<T>) => void`<br/>单元格点击时触发。[详细类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/table/type.ts)。<br/>`interface BaseTableCellEventContext<T> { row: T; col: BaseTableCol; rowIndex: number; colIndex: number; e: MouseEvent }`<br/> | N\nonColumnResizeChange | Function |  | TS 类型：`(context: { columnsWidth: { [colKey: string]: number }; }) => void`<br/>列调整大小之后触发。`context.columnsWidth` 表示操作后各个列的宽度； | N\nonPageChange | Function |  | TS 类型：`(pageInfo: PageInfo, newDataSource: Array<T>) => void`<br/>分页发生变化时触发。参数 newDataSource 表示分页后的数据。本地数据进行分页时，newDataSource 和源数据 data 会不一样。泛型 T 指表格数据类型 | N\nonRowClick | Function |  | TS 类型：`(context: RowEventContext<T>) => void`<br/>行点击时触发，泛型 T 指表格数据类型。[详细类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/table/type.ts)。<br/>`interface RowEventContext<T> { row: T; index: number; e: MouseEvent \\| KeyboardEvent }`<br/> | N\nonRowDblclick | Function |  | TS 类型：`(context: RowEventContext<T>) => void`<br/>行双击时触发，泛型 T 指表格数据类型 | N\nonRowMousedown | Function |  | TS 类型：`(context: RowEventContext<T>) => void`<br/>鼠标在表格行按下时触发，泛型 T 指表格数据类型 | N\nonRowMouseenter | Function |  | TS 类型：`(context: RowEventContext<T>) => void`<br/>鼠标在表格行进入时触发，泛型 T 指表格数据类型 | N\nonRowMouseleave | Function |  | TS 类型：`(context: RowEventContext<T>) => void`<br/>鼠标在表格行离开时触发，泛型 T 指表格数据类型 | N\nonRowMouseover | Function |  | TS 类型：`(context: RowEventContext<T>) => void`<br/>鼠标悬浮到行时触发，泛型 T 指表格数据类型 | N\nonRowMouseup | Function |  | TS 类型：`(context: RowEventContext<T>) => void`<br/>鼠标在表格行按下又弹起时触发，泛型 T 指表格数据类型 | N\nonScroll | Function |  | TS 类型：`(params: { e: WheelEvent }) => void`<br/>表格内容滚动时触发 | N\nonScrollX | Function |  | TS 类型：`(params: { e: WheelEvent }) => void`<br/>已废弃。表格内容横向滚动时触发。请更为使用 `onScroll` 事件 | N\nonScrollY | Function |  | TS 类型：`(params: { e: WheelEvent }) => void`<br/>已废弃。表格内容纵向滚动时触发。当内容超出高度(height)或最大高度(max-height)时，会出现纵向滚动条。请更为使用 `onScroll` 事件 | N\n\n### BaseTable Events\n\n名称 | 参数 | 描述\n-- | -- | --\nactive-change | `(activeRowKeys: Array<string \\| number>, context: ActiveChangeContext<T>)` | 高亮行发生变化时触发，泛型 T 指表格数据类型。参数 `activeRowList` 表示所有高亮行数据， `currentRowData` 表示当前操作行数据。[详细类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/table/type.ts)。<br/>`interface ActiveChangeContext<T> { activeRowList: Array<{ row: T, rowIndex: number }>; currentRowData?: T; type: 'active' \\| 'inactive' }`<br/>\nactive-row-action | `(context: ActiveRowActionContext<T>)` | 键盘操作事件。开启行高亮功能后，会自动开启键盘操作功能，如：通过键盘(Shift)或鼠标操作连续选中高亮行时触发，一般用于处理行选中等批量操作，模拟操作系统区域选择行为。[详细类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/table/type.ts)。<br/>`interface ActiveRowActionContext<T> { action: ActiveRowActionType,  activeRowList: Array<{ row: T, rowIndex: number }> }`<br/><br/>`type ActiveRowActionType ='shift-area-selection' \\| 'space-one-selection' \\| 'clear' \\| 'select-all'`<br/>\ncell-click | `(context: BaseTableCellEventContext<T>)` | 单元格点击时触发。[详细类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/table/type.ts)。<br/>`interface BaseTableCellEventContext<T> { row: T; col: BaseTableCol; rowIndex: number; colIndex: number; e: MouseEvent }`<br/>\ncolumn-resize-change | `(context: { columnsWidth: { [colKey: string]: number }; })` | 列调整大小之后触发。`context.columnsWidth` 表示操作后各个列的宽度；\npage-change | `(pageInfo: PageInfo, newDataSource: Array<T>)` | 分页发生变化时触发。参数 newDataSource 表示分页后的数据。本地数据进行分页时，newDataSource 和源数据 data 会不一样。泛型 T 指表格数据类型\nrow-click | `(context: RowEventContext<T>)` | 行点击时触发，泛型 T 指表格数据类型。[详细类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/table/type.ts)。<br/>`interface RowEventContext<T> { row: T; index: number; e: MouseEvent \\| KeyboardEvent }`<br/>\nrow-dblclick | `(context: RowEventContext<T>)` | 行双击时触发，泛型 T 指表格数据类型\nrow-mousedown | `(context: RowEventContext<T>)` | 鼠标在表格行按下时触发，泛型 T 指表格数据类型\nrow-mouseenter | `(context: RowEventContext<T>)` | 鼠标在表格行进入时触发，泛型 T 指表格数据类型\nrow-mouseleave | `(context: RowEventContext<T>)` | 鼠标在表格行离开时触发，泛型 T 指表格数据类型\nrow-mouseover | `(context: RowEventContext<T>)` | 鼠标悬浮到行时触发，泛型 T 指表格数据类型\nrow-mouseup | `(context: RowEventContext<T>)` | 鼠标在表格行按下又弹起时触发，泛型 T 指表格数据类型\nscroll | `(params: { e: WheelEvent })` | 表格内容滚动时触发\nscroll-x | `(params: { e: WheelEvent })` | 已废弃。表格内容横向滚动时触发。请更为使用 `onScroll` 事件\nscroll-y | `(params: { e: WheelEvent })` | 已废弃。表格内容纵向滚动时触发。当内容超出高度(height)或最大高度(max-height)时，会出现纵向滚动条。请更为使用 `onScroll` 事件\n\n### BaseTableInstanceFunctions 组件实例方法\n\n名称 | 参数 | 返回值 | 描述\n-- | -- | -- | --\nrefreshTable | \\- | \\- | 必需。全部重新渲染表格\nscrollColumnIntoView | `(colKey: string)` | \\- | 必需。横向滚动到指定列，呈现在可视范围内\nscrollToElement | `(params: ComponentScrollToElementParams)` | \\- | 必需。纵向滚动到指定行。示例：`scrollToElement({ index: 100, top: 80, time: 200, behavior: 'smooth' })`\n\n### BaseTableCol\n\n名称 | 类型 | 默认值 | 描述 | 必传\n-- | -- | -- | -- | --\nalign | String | left | 列横向对齐方式。可选项：left/right/center | N\nattrs | Object / Function | - | 透传 HTML 属性到列元素。TS 类型：`BaseTableColumnAttributes<T>` `type BaseTableColumnAttributes<T> = { [key: string]: any } \\| ((context: CellData<T>) => { [key: string]: any })`。[详细类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/table/type.ts) | N\ncell | String / Function | - | 自定义单元格渲染。默认使用 `colKey` 的值作为自定义当前列的插槽名称。<br/>如果 `cell` 值类型为 Function 表示以函数形式渲染单元格。值类型为 string 表示使用插槽渲染，插槽名称为 cell 的值。优先级高于 `render`。泛型 T 指表格数据类型。TS 类型：`string \\| TNode<BaseTableCellParams<T>>` `interface BaseTableCellParams<T> { row: T; rowIndex: number; col: BaseTableCol<T>; colIndex: number }`。[通用类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/common.ts)。[详细类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/table/type.ts) | N\nchildren | Array | - | 用于多级表头，泛型 T 指表格数据类型。TS 类型：`Array<BaseTableCol<T>>` | N\nclassName | String / Object / Array / Function | - | 列类名，值类型是 Function 使用返回值作为列类名；值类型不为 Function 时，值用于整列类名（含表头）。泛型 T 指表格数据类型。TS 类型：`TableColumnClassName<T> \\| TableColumnClassName<T>[]` `type TableColumnClassName<T> = ClassName \\| ((context: CellData<T>) => ClassName)` `interface CellData<T> extends BaseTableCellParams<T> { type: 'th' \\| 'td' }`。[通用类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/common.ts)。[详细类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/table/type.ts) | N\ncolKey | String | - | 渲染列所需字段，值为 `serial-number` 表示当前列为「序号」列 | N\ncolspan | Number | - | 单行表头合并列。多行表头请参考「多级表头」文档示例 | N\nellipsis | Boolean / Object / Slot / Function | false | 单元格和表头内容超出时，是否显示省略号。如果仅希望单元格超出省略，可设置 `ellipsisTitle = false`。<br/> 值为 `true`，则超出省略浮层默认显示单元格内容；<br/>值类型为 `Function` 则自定义超出省略浮中层显示的内容；<br/>值类型为 `Object`，则自动透传属性到 Tooltip 组件，可用于调整浮层背景色和方向等特性。<br/> 同时透传 Tooltip 属性和自定义浮层内容，请使用 `{ props: { theme: 'light' }, content: () => 'something' }`。<br /> 请注意单元格超出省略的两个基本点：1. 内容元素是内联元素或样式（自定义单元格内容时需特别注意）；2. 内容超出父元素。TS 类型：`boolean \\| TNode<BaseTableCellParams<T>> \\| TooltipProps \\| { props: TooltipProps; content: TNode<BaseTableCellParams<T>> }`，[Tooltip API Documents](./tooltip?tab=api)。[通用类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/common.ts)。[详细类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/table/type.ts) | N\nellipsisTitle | Boolean / Object / Slot / Function | undefined | 表头内容超出时，是否显示省略号。优先级高于 `ellipsis`。<br/>值为 `true`，则超出省略的浮层默认显示表头全部内容；<br/>值类型为 `Function` 用于自定义超出省略浮层显示的表头内容；<br/>值类型为 `Object`，则自动透传属性到 Tooltip 组件，则自动透传属性到 Tooltip 组件，可用于调整浮层背景色和方向等特性。<br/> 同时透传 Tooltip 属性和自定义浮层内容，请使用 `{ props: { theme: 'light' }, content: () => 'something' }`。TS 类型：`boolean \\| TNode<BaseTableColParams<T>> \\| TooltipProps \\| { props: TooltipProps; content: TNode<BaseTableColParams<T>> }` `interface BaseTableColParams<T> { col: BaseTableCol<T>; colIndex: number }`。[通用类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/common.ts)。[详细类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/table/type.ts) | N\nfixed | String | left | 固定列显示位置。可选项：left/right | N\nfoot | String / Function | - | 自定义表尾表尾。值类型为 Function 表示以函数形式渲染表尾内容。值类型为 string 表示使用插槽渲染，插槽名称为 `foot` 值。TS 类型：`string \\| TNode<{ col: BaseTableCol; colIndex: number }>`。[通用类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/common.ts) | N\nminWidth | String / Number | - | 透传 CSS 属性 `min-width` 到 `<col>` 元素。⚠️ 仅少部分浏览器支持，如：使用 [TablesNG](https://docs.google.com/document/d/16PFD1GtMI9Zgwu0jtPaKZJ75Q2wyZ9EZnVbBacOfiNA/preview) 渲染的 Chrome 浏览器支持 `minWidth` | N\nrender | Function | - | 自定义表头或单元格，泛型 T 指表格数据类型。TS 类型：`TNode<BaseTableRenderParams<T>>` `interface BaseTableRenderParams<T> extends BaseTableCellParams<T> { type: RenderType }` `type RenderType = 'cell' \\| 'title'`。[通用类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/common.ts)。[详细类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/table/type.ts) | N\nresizable | Boolean | true | 是否允许调整当前列列宽，一般用于设置为 `false` 禁止调整某一列列宽。如果是允许列宽调整，需要先设置 `BaseTable.resizable` 为 `true` 打开所有列宽调整 | N\nresize | Object | - | 限制拖拽调整的最小宽度和最大宽度。`resize.minWidth` 默认为 `80`，`resize.maxWidth` 默认为 `600`。TS 类型：`TableColumnResizeConfig` `interface TableColumnResizeConfig { minWidth: number; maxWidth: number }`。[详细类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/table/type.ts) | N\nstopPropagation | Boolean | - | 是否阻止当列单元格点击事件冒泡 | N\nthClassName | String / Object / Array / Function | - | 列表头类名，值类型是函数时使用返回值作为列类名。泛型 T 指表格数据类型。TS 类型：`TableColumnClassName<T> \\| TableColumnClassName<T>[]`。[通用类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/common.ts) | N\ntitle | String / Function | - | 自定义表头渲染。值类型为 Function 表示以函数形式渲染表头。值类型为 string 表示使用插槽渲染，插槽名称为 title 的值。优先级高于 render。TS 类型：`string \\| TNode<{ col: BaseTableCol; colIndex: number }>`。[通用类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/common.ts) | N\nwidth | String / Number | - | 列宽，可以作为最小宽度使用。当列宽总和小于 `table` 元素时，浏览器根据宽度设置情况自动分配宽度；当列宽总和大于 `table` 元素，表现为定宽。可以同时调整 `table` 元素的宽度来达到自己想要的效果 | N\n\n\n### PrimaryTable Props\n\n名称 | 类型 | 默认值 | 描述 | 必传\n-- | -- | -- | -- | --\nasyncLoading | String / Slot / Function | - | 异步加载状态。值为 `loading` 显示默认文字 “正在加载中，请稍后”，值为 `loading-more` 显示“点击加载更多”，值为其他，表示完全自定义异步加载区域内容。TS 类型：`'loading' \\| 'load-more' \\| TNode`。[通用类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/common.ts) | N\ncolumnController | Object | - | 自定义显示列控制器，值为空不会显示。具体属性请看下方 `TableColumnController` 文档。TS 类型：`TableColumnController` | N\ncolumnControllerVisible | Boolean | undefined | 是否显示列配置弹框控制器，只要该属性值不为 `undefined`，弹框的显示/隐藏完全由该属性控制。支持语法糖 `v-model:columnControllerVisible` | N\ncolumns | Array | [] | 列配置，泛型 T 指表格数据类型。TS 类型：`Array<PrimaryTableCol<T>>` | N\ndisplayColumns | Array | - | 列配置功能中，当前显示的列。支持语法糖 `v-model:displayColumns`。TS 类型：`CheckboxGroupValue` | N\ndefaultDisplayColumns | Array | - | 列配置功能中，当前显示的列。非受控属性。TS 类型：`CheckboxGroupValue` | N\ndragSort | String | - | 拖拽排序方式，值为 `row` 表示行拖拽排序，这种方式无法进行文本复制，慎用。值为`row-handler` 表示通过拖拽手柄进行行拖拽排序。值为 `col` 表示列顺序拖拽。值为 `row-handler-col` 表示同时支持行拖拽和列拖拽。⚠️`drag-col` 已废弃，请勿使用。可选项：row/row-handler/col/row-handler-col/drag-col | N\ndragSortOptions | Object | - | 拖拽排序扩展参数，具体参数见 [Sortable](https://github.com/SortableJS/Sortable)。TS 类型：`SortableOptions` | N\neditableCellState | Function | - | 单元格是否允许编辑。返回值为 `true` 则表示可编辑；返回值为 `false` 则表示不可编辑，只读状态。TS 类型：`EditableCellType<T>` `type EditableCellType<T> = (params: PrimaryTableCellParams<T>) => boolean`。[详细类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/table/type.ts) | N\neditableRowKeys | Array | - | 处于编辑状态的行。TS 类型：`Array<string \\| number>` | N\nexpandIcon | Boolean / Slot / Function | true | 用于控制是否显示「展开图标列」，值为 `false` 则不会显示。可以精确到某一行是否显示，还可以自定义展开图标内容。`expandedRow` 存在时，该参数有效。支持全局配置 `GlobalConfigProvider`。TS 类型：`boolean \\| TNode<ExpandArrowRenderParams<T>>` `interface ExpandArrowRenderParams<T> { row: T; index: number }`。[通用类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/common.ts)。[详细类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/table/type.ts) | N\nexpandOnRowClick | Boolean | - | 是否允许点击行展开 | N\nexpandedRow | String / Slot / Function | - | 展开行内容，泛型 T 指表格数据类型。TS 类型：`TNode<TableExpandedRowParams<T>>` `interface TableExpandedRowParams<T> { row: T; index: number; columns: PrimaryTableCol<T>[] \\| BaseTableCol<T>[] }`。[通用类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/common.ts)。[详细类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/table/type.ts) | N\nexpandedRowKeys | Array | [] | 展开行。支持语法糖 `v-model:expandedRowKeys`。TS 类型：`Array<string \\| number>` | N\ndefaultExpandedRowKeys | Array | [] | 展开行。非受控属性。TS 类型：`Array<string \\| number>` | N\nfilterIcon | Slot / Function | - | 自定义过滤图标，支持全局配置 `GlobalConfigProvider`。TS 类型：`TNode<{ col: PrimaryTableCol<T>; colIndex: number }>`。[通用类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/common.ts) | N\nfilterRow | String / Slot / Function | - | 自定义过滤状态行及清空筛选等。TS 类型：`string \\| TNode`。[通用类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/common.ts) | N\nfilterValue | Object | - | 过滤数据的值。支持语法糖 `v-model:filterValue`。TS 类型：`FilterValue` `type FilterValue = { [key: string]: any }`。[详细类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/table/type.ts) | N\ndefaultFilterValue | Object | - | 过滤数据的值。非受控属性。TS 类型：`FilterValue` `type FilterValue = { [key: string]: any }`。[详细类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/table/type.ts) | N\nhideSortTips | Boolean | - | 隐藏排序文本提示，支持全局配置 `GlobalConfigProvider`，默认全局配置值为 `false` | N\nindeterminateSelectedRowKeys | Array | - | 半选状态行。选中行请更为使用 `selectedRowKeys` 控制。TS 类型：`Array<string \\| number>` | N\nmultipleSort | Boolean | false | 是否支持多列排序 | N\nreserveSelectedRowOnPaginate | Boolean | true | 行选中功能，是否在分页时保留上一页选中结果不清空，本地数据分页场景下，会全选所有页数据。值为 `false` 则表示全部选中操作停留在当前页，不跨分页；本地数据分页场景下，全选仅选中当前页 | N\nrowSelectionAllowUncheck | Boolean | - | 行选中单选场景，是否允许取消选中 | N\nrowSelectionType | String | - | 行选中类型，单选或多选。效果和 `columns` 中配置的 `{ colKey: 'row-select', type: 'single' }` 一样。可选项：single/multiple | N\nselectOnRowClick | Boolean | - | 是否在点击整行时选中 | N\nselectedRowKeys | Array | [] | 选中行。半选状态行请更为使用 `indeterminateSelectedRowKeys` 控制。支持语法糖 `v-model:selectedRowKeys`。TS 类型：`Array<string \\| number>` | N\ndefaultSelectedRowKeys | Array | [] | 选中行。半选状态行请更为使用 `indeterminateSelectedRowKeys` 控制。非受控属性。TS 类型：`Array<string \\| number>` | N\nshowSortColumnBgColor | Boolean | false | 当前排序列是否显示背景色 | N\nsort | Object / Array | - | 排序控制。sortBy 排序字段；descending 是否进行降序排列。值为数组时，表示正进行多字段排序。支持语法糖 `v-model:sort`。TS 类型：`TableSort` `type TableSort = SortInfo \\| Array<SortInfo>` `interface SortInfo { sortBy: string; descending: boolean }`。[详细类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/table/type.ts) | N\ndefaultSort | Object / Array | - | 排序控制。sortBy 排序字段；descending 是否进行降序排列。值为数组时，表示正进行多字段排序。非受控属性。TS 类型：`TableSort` `type TableSort = SortInfo \\| Array<SortInfo>` `interface SortInfo { sortBy: string; descending: boolean }`。[详细类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/table/type.ts) | N\nsortIcon | Slot / Function | - | 自定义排序图标，支持全局配置 `GlobalConfigProvider`。TS 类型：`TNode`。[通用类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/common.ts) | N\nsortOnRowDraggable | Boolean | false | 已废弃。允许表格行拖拽时排序。请更为使用 `dragSort=\\\"row\\\"` | N\n`Omit<BaseTableProps<T>, 'columns' \\| 'onCellClick'>` | \\- | - | 继承 `Omit<BaseTableProps<T>, 'columns' \\| 'onCellClick'>` 中的全部属性 | N\nonAsyncLoadingClick | Function |  | TS 类型：`(context: { status: 'loading' \\| 'load-more' }) => void`<br/>异步加载区域被点击时触发 | N\nonCellClick | Function |  | TS 类型：`(context: PrimaryTableCellEventContext<T>) => void`<br/>单元格点击时触发。[详细类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/table/type.ts)。<br/>`interface PrimaryTableCellEventContext<T> { row: T; col: PrimaryTableCol; rowIndex: number; colIndex: number; e: MouseEvent }`<br/> | N\nonChange | Function |  | TS 类型：`(data: TableChangeData, context: TableChangeContext<T>) => void`<br/>分页、排序、过滤等内容变化时触发，泛型 T 指表格数据类型，`currentData` 表示变化后的数据。[详细类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/table/type.ts)。<br/>`interface TableChangeData { sorter?: TableSort; filter?: FilterValue; pagination?: PaginationProps }`<br/><br/>`interface TableChangeContext<T> { trigger: TableChangeTrigger; currentData?: T[] }`<br/><br/>`type TableChangeTrigger = 'filter' \\| 'sorter' \\| 'pagination'`<br/> | N\nonColumnChange | Function |  | TS 类型：`(context: PrimaryTableColumnChange<T>) => void`<br/>确认操作之前列配置发生变化时触发。`context.columns` 表示已选中的列；`context.currentColumn` 表示本次变化操作的列，值不存在表示全选操作；`context.type` 表示当前操作属于选中列或是取消列。[详细类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/table/type.ts)。<br/>`interface PrimaryTableColumnChange<T> { columns?: CheckboxGroupValue; currentColumn?: PrimaryTableCol<T>; type?: 'check' \\| 'uncheck'; e?: Event }`<br/> | N\nonColumnControllerVisibleChange | Function |  | TS 类型：`(visible: boolean, context: { trigger: 'cancel' \\| 'confirm' }) => void`<br/>列配置弹窗显示或隐藏变化时触发 | N\nonDataChange | Function |  | TS 类型：`(data: Array<T>, context: TableDataChangeContext) => void`<br/>本地数据排序导致 `data` 变化时触发，第一个参数指变化后的数据，第二个参数 `context.trigger` 表示触发本次变化的来源。[详细类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/table/type.ts)。<br/>`interface TableDataChangeContext { trigger: 'sort' }`<br/> | N\nonDisplayColumnsChange | Function |  | TS 类型：`(value: CheckboxGroupValue) => void`<br/>确认列配置时触发。[详细类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/table/type.ts)。<br/>`import { CheckboxGroupValue } from '@Checkbox'`<br/> | N\nonDragSort | Function |  | TS 类型：`(context: DragSortContext<T>) => void`<br/>拖拽排序时触发，`data` 表示排序前的数据，`newData` 表示拖拽排序结束后的新数据，`sort=row` 表示行拖拽事件触发，`sort=col` 表示列拖拽事件触发。[详细类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/table/type.ts)。<br/>`interface DragSortContext<T> { currentIndex: number; current: T; targetIndex: number; target: T; data: T[]; newData: T[]; currentData?: T[]; e: SortableEvent; sort: 'row' \\| 'col' }`<br/><br/>`import { SortableEvent, SortableOptions } from 'sortablejs'`<br/> | N\nonExpandChange | Function |  | TS 类型：`(expandedRowKeys: Array<string \\| number>, options: ExpandOptions<T>) => void`<br/>展开行发生变化时触发，泛型 T 指表格数据类型。[详细类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/table/type.ts)。<br/>`interface ExpandOptions<T> { expandedRowData: Array<T>; currentRowData: T }`<br/> | N\nonFilterChange | Function |  | TS 类型：`(filterValue: FilterValue, context: TableFilterChangeContext<T>) => void`<br/>过滤参数发生变化时触发，泛型 T 指表格数据类型。[详细类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/table/type.ts)。<br/>`interface TableFilterChangeContext<T> { col?: PrimaryTableCol<T>; trigger: 'filter-change' \\| 'confirm' \\| 'reset' \\| 'clear' }`<br/> | N\nonRowEdit | Function |  | TS 类型：`(context: PrimaryTableRowEditContext<T>) => void`<br/>行编辑时触发。[详细类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/table/type.ts)。<br/>`type PrimaryTableRowEditContext<T> = PrimaryTableCellParams<T> & { value: any; editedRow: T }`<br/> | N\nonRowValidate | Function |  | TS 类型：`(context: PrimaryTableRowValidateContext<T>) => void`<br/>行编辑校验完成后触发，即组件实例方法 `validateRowData` 执行结束后触发。`result` 表示校验结果，`trigger=self` 表示编辑组件内部触发的校验，`trigger='parent'` 表示表格父组件触发的校验。[详细类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/table/type.ts)。<br/>`type PrimaryTableRowValidateContext<T> = { result: TableRowValidateResult<T>[]; trigger: TableValidateTrigger }`<br/><br/>`type TableValidateTrigger = 'self' \\| 'parent'`<br/><br/>`export type TableRowValidateResult<T> = PrimaryTableCellParams<T> & { errorList: AllValidateResult[]; value: any }`<br/> | N\nonSelectChange | Function |  | TS 类型：`(selectedRowKeys: Array<string \\| number>, options: SelectOptions<T>) => void`<br/>选中行发生变化时触发，泛型 T 指表格数据类型。两个参数，第一个参数为选中行 keys，第二个参数为更多参数，具体如下：`type = uncheck` 表示当前行操作为「取消行选中」；`type = check` 表示当前行操作为「行选中」； `currentRowKey` 表示当前操作行的 rowKey 值； `currentRowData` 表示当前操作行的行数据。[详细类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/table/type.ts)。<br/>`interface SelectOptions<T> { selectedRowData: Array<T>; type: 'uncheck' \\| 'check'; currentRowKey?: string; currentRowData?: T }`<br/> | N\nonSortChange | Function |  | TS 类型：`(sort: TableSort, options: SortOptions<T>) => void`<br/>排序发生变化时触发。其中 sortBy 表示当前排序的字段，sortType 表示排序的方式，currentDataSource 表示 sorter 排序后的结果，col 表示列配置。sort 值类型为数组时表示多字段排序。[详细类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/table/type.ts)。<br/>`interface SortOptions<T> { currentDataSource?: Array<T>; col: PrimaryTableCol }`<br/> | N\nonValidate | Function |  | TS 类型：`(context: PrimaryTableValidateContext) => void`<br/>可编辑行表格，全部数据校验完成后触发。即组件实例方法 `validateTableData` 或 `validateTableCellData` 执行结束后触发。[详细类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/table/type.ts)。<br/>`interface PrimaryTableValidateContext { result: TableErrorListMap }`<br/><br/>`type TableErrorListMap = { [key: string]: AllValidateResult[] }`<br/> | N\n\n### PrimaryTable Events\n\n名称 | 参数 | 描述\n-- | -- | --\nasync-loading-click | `(context: { status: 'loading' \\| 'load-more' })` | 异步加载区域被点击时触发\ncell-click | `(context: PrimaryTableCellEventContext<T>)` | 单元格点击时触发。[详细类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/table/type.ts)。<br/>`interface PrimaryTableCellEventContext<T> { row: T; col: PrimaryTableCol; rowIndex: number; colIndex: number; e: MouseEvent }`<br/>\nchange | `(data: TableChangeData, context: TableChangeContext<T>)` | 分页、排序、过滤等内容变化时触发，泛型 T 指表格数据类型，`currentData` 表示变化后的数据。[详细类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/table/type.ts)。<br/>`interface TableChangeData { sorter?: TableSort; filter?: FilterValue; pagination?: PaginationProps }`<br/><br/>`interface TableChangeContext<T> { trigger: TableChangeTrigger; currentData?: T[] }`<br/><br/>`type TableChangeTrigger = 'filter' \\| 'sorter' \\| 'pagination'`<br/>\ncolumn-change | `(context: PrimaryTableColumnChange<T>)` | 确认操作之前列配置发生变化时触发。`context.columns` 表示已选中的列；`context.currentColumn` 表示本次变化操作的列，值不存在表示全选操作；`context.type` 表示当前操作属于选中列或是取消列。[详细类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/table/type.ts)。<br/>`interface PrimaryTableColumnChange<T> { columns?: CheckboxGroupValue; currentColumn?: PrimaryTableCol<T>; type?: 'check' \\| 'uncheck'; e?: Event }`<br/>\ncolumn-controller-visible-change | `(visible: boolean, context: { trigger: 'cancel' \\| 'confirm' })` | 列配置弹窗显示或隐藏变化时触发\ndata-change | `(data: Array<T>, context: TableDataChangeContext)` | 本地数据排序导致 `data` 变化时触发，第一个参数指变化后的数据，第二个参数 `context.trigger` 表示触发本次变化的来源。[详细类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/table/type.ts)。<br/>`interface TableDataChangeContext { trigger: 'sort' }`<br/>\ndisplay-columns-change | `(value: CheckboxGroupValue)` | 确认列配置时触发。[详细类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/table/type.ts)。<br/>`import { CheckboxGroupValue } from '@Checkbox'`<br/>\ndrag-sort | `(context: DragSortContext<T>)` | 拖拽排序时触发，`data` 表示排序前的数据，`newData` 表示拖拽排序结束后的新数据，`sort=row` 表示行拖拽事件触发，`sort=col` 表示列拖拽事件触发。[详细类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/table/type.ts)。<br/>`interface DragSortContext<T> { currentIndex: number; current: T; targetIndex: number; target: T; data: T[]; newData: T[]; currentData?: T[]; e: SortableEvent; sort: 'row' \\| 'col' }`<br/><br/>`import { SortableEvent, SortableOptions } from 'sortablejs'`<br/>\nexpand-change | `(expandedRowKeys: Array<string \\| number>, options: ExpandOptions<T>)` | 展开行发生变化时触发，泛型 T 指表格数据类型。[详细类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/table/type.ts)。<br/>`interface ExpandOptions<T> { expandedRowData: Array<T>; currentRowData: T }`<br/>\nfilter-change | `(filterValue: FilterValue, context: TableFilterChangeContext<T>)` | 过滤参数发生变化时触发，泛型 T 指表格数据类型。[详细类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/table/type.ts)。<br/>`interface TableFilterChangeContext<T> { col?: PrimaryTableCol<T>; trigger: 'filter-change' \\| 'confirm' \\| 'reset' \\| 'clear' }`<br/>\nrow-edit | `(context: PrimaryTableRowEditContext<T>)` | 行编辑时触发。[详细类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/table/type.ts)。<br/>`type PrimaryTableRowEditContext<T> = PrimaryTableCellParams<T> & { value: any; editedRow: T }`<br/>\nrow-validate | `(context: PrimaryTableRowValidateContext<T>)` | 行编辑校验完成后触发，即组件实例方法 `validateRowData` 执行结束后触发。`result` 表示校验结果，`trigger=self` 表示编辑组件内部触发的校验，`trigger='parent'` 表示表格父组件触发的校验。[详细类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/table/type.ts)。<br/>`type PrimaryTableRowValidateContext<T> = { result: TableRowValidateResult<T>[]; trigger: TableValidateTrigger }`<br/><br/>`type TableValidateTrigger = 'self' \\| 'parent'`<br/><br/>`export type TableRowValidateResult<T> = PrimaryTableCellParams<T> & { errorList: AllValidateResult[]; value: any }`<br/>\nselect-change | `(selectedRowKeys: Array<string \\| number>, options: SelectOptions<T>)` | 选中行发生变化时触发，泛型 T 指表格数据类型。两个参数，第一个参数为选中行 keys，第二个参数为更多参数，具体如下：`type = uncheck` 表示当前行操作为「取消行选中」；`type = check` 表示当前行操作为「行选中」； `currentRowKey` 表示当前操作行的 rowKey 值； `currentRowData` 表示当前操作行的行数据。[详细类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/table/type.ts)。<br/>`interface SelectOptions<T> { selectedRowData: Array<T>; type: 'uncheck' \\| 'check'; currentRowKey?: string; currentRowData?: T }`<br/>\nsort-change | `(sort: TableSort, options: SortOptions<T>)` | 排序发生变化时触发。其中 sortBy 表示当前排序的字段，sortType 表示排序的方式，currentDataSource 表示 sorter 排序后的结果，col 表示列配置。sort 值类型为数组时表示多字段排序。[详细类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/table/type.ts)。<br/>`interface SortOptions<T> { currentDataSource?: Array<T>; col: PrimaryTableCol }`<br/>\nvalidate | `(context: PrimaryTableValidateContext)` | 可编辑行表格，全部数据校验完成后触发。即组件实例方法 `validateTableData` 执行结束后触发。[详细类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/table/type.ts)。<br/>`interface PrimaryTableValidateContext { result: TableErrorListMap }`<br/><br/>`type TableErrorListMap = { [key: string]: AllValidateResult[] }`<br/>\n\n### PrimaryTableInstanceFunctions 组件实例方法\n\n名称 | 参数 | 返回值 | 描述\n-- | -- | -- | --\nclearValidateData | \\- | \\- | 必需。清空所有校验结果\nvalidateRowData | `(rowValue: any)` | `Promise<{ trigger: TableValidateTrigger, result: ErrorListObjectType<T>[] }>` | 必需。校验行信息，校验完成后，会触发事件 `onRowValidate`。参数 `rowValue` 表示行唯一标识的值。[详细类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/table/type.ts)。<br/>`type ErrorListObjectType<T> = PrimaryTableRowEditContext<T> & { errorList: AllValidateResult[] }`<br/>\nvalidateTableCellData | \\- | `Promise<{ result: TableErrorListMap }>` | 必需。校验表格可编辑单元格数据，校验完成后，会触发事件 `onValidate`\nvalidateTableData | \\- | `Promise<{ result: TableErrorListMap }>` | 必需。校验表格全部数据，校验完成后，会触发事件 `onValidate`\n\n### PrimaryTableCol\n\n名称 | 类型 | 默认值 | 描述 | 必传\n-- | -- | -- | -- | --\ncell | String / Function | - | 自定义单元格渲染。值类型为 Function 表示以函数形式渲染单元格。值类型为 string 表示使用插槽渲染，插槽名称为 cell 的值。默认使用 colKey 作为插槽名称。优先级高于 render。泛型 T 指表格数据类型。TS 类型：`string \\| TNode<PrimaryTableCellParams<T>>` `interface PrimaryTableCellParams<T> { row: T; rowIndex: number; col: PrimaryTableCol<T>; colIndex: number }`。[通用类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/common.ts)。[详细类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/table/type.ts) | N\ncheckProps | Object / Function | - | 透传参数，`colKey` 值为 `row-select` 时，配置有效。具体定义参考 Checkbox 组件 和 Radio 组件。泛型 T 指表格数据类型。TS 类型：`CheckProps<T>` `type CheckProps<T> = CheckboxProps \\| RadioProps \\| ((options: { row: T; rowIndex: number }) => CheckboxProps \\| RadioProps)` `import { CheckboxProps } from '@Checkbox'`，[Radio API Documents](./radio?tab=api)。[详细类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/table/type.ts) | N\nchildren | Array | - | 用于多级表头，泛型 T 指表格数据类型。TS 类型：`Array<PrimaryTableCol<T>>` | N\ncolKey | String | - | 渲染列所需字段，必须唯一。值为 `row-select` 表示当前列为行选中操作列。值为 `drag` 表示当前列为拖拽排序操作列。值为 `serial-number` 表示当前列为「序号」列 | N\ndisabled | Function | - | 是否禁用行选中，`colKey` 值为 `row-select` 时，配置有效。TS 类型：`(options: {row: T; rowIndex: number }) => boolean` | N\nedit | Object | - | 可编辑单元格配置项，具体属性参考文档 `TableEditableCellConfig` 描述。TS 类型：`TableEditableCellConfig<T>` | N\nfilter | Object | - | 过滤规则，支持多选(multiple)、单选(single)、输入框(input) 等三种形式。想要自定义过滤组件，可通过 `filter.component` 实现，自定义过滤组件需要包含参数 value 和事件 change。更多信息请查看当前页面中 `TableColumnFilter` 的详细文档。TS 类型：`TableColumnFilter` | N\nrender | Function | - | 自定义表头或单元格，泛型 T 指表格数据类型。TS 类型：`TNode<PrimaryTableRenderParams<T>>` `interface PrimaryTableRenderParams<T> extends PrimaryTableCellParams<T> { type: RenderType }`。[通用类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/common.ts)。[详细类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/table/type.ts) | N\nsortType | String | all | 当前列支持排序的方式，desc 表示当前列只能进行降序排列；asc 表示当前列只能进行升序排列；all 表示当前列既可升序排列，又可以降序排列。可选项：desc/asc/all。TS 类型：`SortType` `type SortType = 'desc' \\| 'asc' \\| 'all'`。[详细类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/table/type.ts) | N\nsorter | Boolean / Function | false | 该列是否支持排序。值为 true 表示该列支持排序；值类型为函数，表示对本地数据 `data` 进行排序，返回值参考 [MDN Array.sort](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/sort)。泛型 T 指表格数据类型。TS 类型：`boolean \\| SorterFun<T>` `type SorterFun<T> = (a: T, b: T) => number`。[详细类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/table/type.ts) | N\ntitle | String / Function | - | 自定义表头渲染。值类型为 Function 表示以函数形式渲染表头。值类型为 string 表示使用插槽渲染，插槽名称为 title 的值。优先级高于 render。TS 类型：`string \\| TNode<{ col: PrimaryTableCol; colIndex: number }>`。[通用类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/common.ts) | N\ntype | String | single | `colKey` 值为 `row-select` 时表示行选中列，有两种模式：单选和多选。 `type=single` 表示单选，`type=multiple` 表示多选。可选项：single/multiple | N\n`Omit<BaseTableCol, 'cell' \\| 'title' \\| 'render' \\| 'children'>` | \\- | - | 继承 `Omit<BaseTableCol, 'cell' \\| 'title' \\| 'render' \\| 'children'>` 中的全部属性 | N\n\n\n### EnhancedTable Props\n\n名称 | 类型 | 默认值 | 描述 | 必传\n-- | -- | -- | -- | --\nbeforeDragSort | Function | - | 树形结构中，拖拽排序前控制，返回值为 `true` 则继续排序；返回值为 `false` 则中止排序还原数据。TS 类型：`(context: DragSortContext<T>) => boolean` | N\nexpandedTreeNodes | Array | [] | 展开的树形节点。非必须。在需要自由控制展开的树形节点时使用。其他场景无需设置，表格组件有内置展开逻辑。支持语法糖 `v-model:expandedTreeNodes`。TS 类型：`Array<string \\| number>` | N\ndefaultExpandedTreeNodes | Array | [] | 展开的树形节点。非必须。在需要自由控制展开的树形节点时使用。其他场景无需设置，表格组件有内置展开逻辑。非受控属性。TS 类型：`Array<string \\| number>` | N\ntree | Object | - | 树形结构相关配置。具体属性文档查看 `TableTreeConfig` 相关描述。TS 类型：`TableTreeConfig` | N\ntreeExpandAndFoldIcon | Function | - | 自定义树形结构展开图标，支持全局配置 `GlobalConfigProvider`。TS 类型：`TNode<{ type: 'expand' \\| 'fold', row: T }>`。[通用类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/common.ts) | N\n`PrimaryTableProps<T>` | \\- | - | 继承 `PrimaryTableProps<T>` 中的全部属性 | N\nonAbnormalDragSort | Function |  | TS 类型：`(context: TableAbnormalDragSortContext<T>) => void`<br/>异常拖拽排序时触发，如：树形结构中，非同层级之间的交换。`context.code` 指交换异常错误码，固定值；`context.reason` 指交换异常的原因。[详细类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/table/type.ts)。<br/>`interface TableAbnormalDragSortContext<T> { code: number; reason: string }`<br/> | N\nonExpandedTreeNodesChange | Function |  | TS 类型：`(expandedTreeNodes: Array<string \\| number>, options: TableTreeNodeExpandOptions <T>) => void`<br/>树形结构，展开的树节点发生变化时触发，泛型 T 指表格数据类型。[详细类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/table/type.ts)。<br/>`interface TableTreeNodeExpandOptions<T> { row: T; rowIndex: number; rowState: TableRowState<T>; type: 'fold' \\| 'expand'; trigger?: 'expand-fold-icon' \\| 'row-click' \\| 'default-expand-all' \\| 'expand-all' \\| 'fold-all' }`<br/> | N\nonTreeExpandChange | Function |  | TS 类型：`(context: TableTreeExpandChangeContext<T>) => void`<br/>已废弃。树形结构，用户操作引起节点展开或收起时触发。请更为使用 `onExpandedTreeNodesChange`。[详细类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/table/type.ts)。<br/>`interface TableTreeExpandChangeContext<T> { row: T; rowIndex: number; rowState: TableRowState<T>; trigger?: 'expand-fold-icon' \\| 'row-click' }`<br/> | N\n\n### EnhancedTable Events\n\n名称 | 参数 | 描述\n-- | -- | --\nabnormal-drag-sort | `(context: TableAbnormalDragSortContext<T>)` | 异常拖拽排序时触发，如：树形结构中，非同层级之间的交换。`context.code` 指交换异常错误码，固定值；`context.reason` 指交换异常的原因。[详细类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/table/type.ts)。<br/>`interface TableAbnormalDragSortContext<T> { code: number; reason: string }`<br/>\nexpanded-tree-nodes-change | `(expandedTreeNodes: Array<string \\| number>, options: TableTreeNodeExpandOptions <T>)` | 树形结构，展开的树节点发生变化时触发，泛型 T 指表格数据类型。[详细类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/table/type.ts)。<br/>`interface TableTreeNodeExpandOptions<T> { row: T; rowIndex: number; rowState: TableRowState<T>; type: 'fold' \\| 'expand'; trigger?: 'expand-fold-icon' \\| 'row-click' \\| 'default-expand-all' \\| 'expand-all' \\| 'fold-all' }`<br/>\ntree-expand-change | `(context: TableTreeExpandChangeContext<T>)` | 已废弃。树形结构，用户操作引起节点展开或收起时触发。请更为使用 `onExpandedTreeNodesChange`。[详细类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/table/type.ts)。<br/>`interface TableTreeExpandChangeContext<T> { row: T; rowIndex: number; rowState: TableRowState<T>; trigger?: 'expand-fold-icon' \\| 'row-click' }`<br/>\n\n### EnhancedTableInstanceFunctions 组件实例方法\n\n名称 | 参数 | 返回值 | 描述\n-- | -- | -- | --\nappendTo | `(key: TableRowValue, newData: T)` | \\- | 必需。树形结构中，为当前节点添加子节点。如果 `key` 为空，则表示为根节点添加子节点\nexpandAll | \\- | \\- | 必需。展开全部行\nfoldAll | \\- | \\- | 必需。折叠全部行\ngetData | `(key: TableRowValue)` | `TableRowState<T>` | 必需。树形结构中，用于获取行数据所有信息。泛型 `T` 表示行数据类型。[详细类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/table/type.ts)。<br/>`type TableRowValue = string \\| number`<br/>\ngetTreeExpandedRow | `(type: 'unique' \\| 'data' \\| 'all')` | \\- | 必需。获取展开的树形节点。`type=unique` 标识获取展开节点的行唯一标识值，`type=data` 表示获取展开节点的数据，`type=all` 表示获取行节点包含展开状态的全部数据\ngetTreeNode | \\- | `T[]` | 必需。树形结构中，获取完整的树形结构\ninsertAfter | `(key: TableRowValue, newData: T)` | \\- | 必需。树形结构中，在当前节点之后添加子节点\ninsertBefore | `(key: TableRowValue, newData: T)` | \\- | 必需。树形结构中，在当前节点之前添加子节点\nremove | `(key: TableRowValue)` | \\- | 必需。树形结构中，移除指定节点\nremoveChildren | `(key: TableRowValue)` | \\- | 必需。树形结构中，移除指定节点的所有子节点\nresetData | `(newData: T[])` | \\- | 必需。重置或更新整个表格数据\nsetData | `(key: TableRowValue, newRowData: T)` | \\- | 必需。树形结构中，用于更新行数据。泛型 `T` 表示行数据类型\nswapData | `(params: SwapParams<T>)` | \\- | 必需。树形结构中，交换两个节点的顺序。[详细类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/table/type.ts)。<br/>`interface SwapParams<T> { current: T; target: T; currentIndex: number; targetIndex: number }`<br/>\ntoggleExpandData | `(p: { row: T,  rowIndex: number})` | \\- | 必需。展开或收起树形行\n\n### TableRowState\n\n名称 | 类型 | 默认值 | 描述 | 必传\n-- | -- | -- | -- | --\ndisabled | Boolean | false | 表格行是否禁用选中 | N\nexpandChildrenLength | Number | - | 当前节点展开的子节点数量 | N\nexpanded | Boolean | false | 必需。表格行是否展开 | Y\nid | String / Number | - | 必需。唯一标识 | Y\nlevel | Number | - | 当前节点层级。TS 类型：`number` | N\nparent | \\- | - | 父节点。TS 类型：`TableRowState<T>` | N\npath | Array | - | 当前节点路径。TS 类型：`TableRowState<T>[]` | N\nrow | \\- | - | 必需。原始表格行数据。TS 类型：`T` | Y\nrowIndex | Number | - | 必需。表格行下标，值为 `-1` 标识当前行未展开显示 | Y\n\n### TableColumnFilter\n\n名称 | 类型 | 默认值 | 描述 | 必传\n-- | -- | -- | -- | --\nattrs | Object | - | 用于透传筛选器属性到自定义组件 `component`，HTML 原生属性。TS 类型：`HTMLElementAttributes`。[通用类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/common.ts) | N\nclassNames | String | - | 透传类名到自定义组件 `component`。TS 类型：`ClassName`。[通用类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/common.ts) | N\ncomponent | Slot / Function | - | 用于自定义筛选器，只要保证自定义筛选器包含 value 属性 和 change 事件，即可像内置筛选器一样正常使用。示例：`component: DatePicker`。TS 类型：`ComponentType`。[通用类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/common.ts) | N\nconfirmEvents | Array | - | 哪些事件触发后会进行过滤搜索（确认按钮无需配置，会默认触发搜索）。输入框组件示例：`confirmEvents: ['onEnter']`。TS 类型：`string[]` | N\nlabel | String / Function | - | 过滤项标题文本，显示在“过滤结果行”中的列标题描述。一般用于表头标题和过滤文本行中的列标题不一样的场景。TS 类型：`string \\| TNode`。[通用类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/common.ts) | N\nlist | Array | - | 用于配置当前筛选器可选值有哪些，仅当 `filter.type` 等于 `single` 或 `multiple` 时有效。TS 类型：`Array<OptionData>`。[通用类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/common.ts) | N\npopupProps | Object | - | 透传 Popup 组件全部属性到筛选器浮层。TS 类型：`PopupProps`，[Popup API Documents](./popup?tab=api)。[详细类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/table/type.ts) | N\nprops | Object | - | 用于透传筛选器属性到自定义组件 `component`，可以对筛选器进行任何原组件支持的属性配置。TS 类型：`FilterProps` `type FilterProps = RadioProps \\| CheckboxProps \\| InputProps \\| { [key: string]: any }`，[Input API Documents](./input?tab=api)。[详细类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/table/type.ts) | N\nresetValue | \\- | - | 重置时设置的值，示例：'' 或 []。TS 类型：`any` | N\nshowConfirmAndReset | Boolean | false | 是否显示重置和确认。值为真，过滤事件（filter-change）会在确定时触发；值为假，则数据变化时会立即触发过滤事件 | N\nstyle | Object | - | 透传内联样式到自定义组件 `component`。TS 类型：`Styles`。[通用类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/common.ts) | N\ntype | String | - | 用于设置筛选器类型：单选按钮筛选器、复选框筛选器、输入框筛选器。更多复杂组件，请更为使用 `component` 自定义任意组件。TS 类型：`FilterType` `type FilterType = 'input' \\| 'single' \\| 'multiple'`。[详细类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/table/type.ts) | N\n\n### TableColumnController\n\n名称 | 类型 | 默认值 | 描述 | 必传\n-- | -- | -- | -- | --\nbuttonProps | Object | - | 自定义列配置按钮，包括 Button 组件的全部属性。比如：按钮颜色和文本。TS 类型：`ButtonProps`，[Button API Documents](./button?tab=api)。[详细类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/table/type.ts) | N\ncheckboxProps | Object | - | 透传复选框组件全部特性。TS 类型：`CheckboxGroupProps`，[Checkbox API Documents](./checkbox?tab=api)。[详细类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/table/type.ts) | N\ncolumnControllerBottomContent | Slot / Function | - | 列配置控制器底部内容。TS 类型：`TNode`。[通用类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/common.ts) | N\ncolumnControllerTopContent | Slot / Function | - | 列配置控制器顶部内容。TS 类型：`TNode`。[通用类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/common.ts) | N\ndialogProps | Object | - | 透传弹框组件全部特性，如：防止滚动穿透。TS 类型：`DialogProps`，[Dialog API Documents](./dialog?tab=api)。[详细类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/table/type.ts) | N\ndisplayType | String | auto-width | 指列配置弹框中，各列的字段平铺方式：`fixed-width` 表示固定宽度，每行固定数量，横向和纵向均对齐，`auto-width` 表示宽度随列标题数量自由显示，横向铺满，纵向不要求对齐。可选项：fixed-width/auto-width | N\nfields | Array | - | 用于设置允许用户对哪些列进行显示或隐藏的控制，默认为全部字段。TS 类型：`string[]` | N\ngroupColumns | Array | - | 列分组功能配置，当列数量过多的时候，为了方便阅读，一般需要进行列分组设置。TS 类型：`TableColumnGroup[]` `interface TableColumnGroup { label: string; value?: string \\| number; columns: string[] }`。[详细类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/table/type.ts) | N\nhideTriggerButton | Boolean | false | 是否隐藏表格组件内置的“列配置”按钮 | N\nplacement | String | top-right | 列配置按钮基于表格的放置位置：左上角、右上角、左下角、右下角等。可选项：top-left/top-right/bottom-left/bottom-right | N\n\n### TableEditableCellConfig\n\n名称 | 类型 | 默认值 | 描述 | 必传\n-- | -- | -- | -- | --\nabortEditOnEvent | Array | - | 除了点击非自身元素退出编辑态之外，还有哪些事件退出编辑态。示例：`abortEditOnEvent: ['onChange']`。TS 类型：`string[]` | N\ncomponent | \\- | - | 组件定义，如：`Input` `Select`。对于完全自定义的组件（非组件库内的组件），组件需要支持 `value` 和 `onChange` ；如果还需要支持校验规则，则组件还需实现 `tips` 和 `status` 两个 API，实现规则可参考 `Input` 组件。TS 类型：`ComponentType`。[通用类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/common.ts) | N\ndefaultEditable | Boolean | false | 单元格默认状态是否为编辑态 | N\nkeepEditMode | Boolean | false | 设置当前列的单元格始终保持为编辑态 | N\non | Function | - | 透传给编辑组件的事件，参数有({ row, rowIndex, col, colIndex, editedRow, updateEditedCellValue })。可以使用参数 `updateEditedCellValue` 更新当前单元格（或当前行任意编辑状态单元格）的值。<br/>更新当前单元格数据示例：`updateEditedCellValue(value)`；<br/>更新当前行编辑态数据示例：`updateEditedCellValue({ isUpdateCurrentRow: true, column_key: 'test'  })`；<br/>更新其他行编辑态数据示例：`updateEditedCellValue({ rowValue: '124', column_key: 'test' })`。TS 类型：`(context: TableEditableCellPropsParams<T>) => { [eventName: string]: Function }` | N\nonEdited | Function | - | 编辑完成后，退出编辑模式时触发。TS 类型：`(context: PrimaryTableOnEditedContext<T>) => void` `type PrimaryTableOnEditedContext<T> = PrimaryTableCellParams<T> & { trigger: string; newRowData: T; }`。[详细类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/table/type.ts) | N\nprops | Object / Function | - | 透传给组件 `edit.component` 的属性，可以使用 `updateEditedCellValue` 更新当前行任意编辑状态单元格的值。TS 类型：`TableEditableCellProps<T>` `type TableEditableCellProps<T> = TablePlainObject \\| ((params: TableEditableCellPropsParams<T>) => TablePlainObject)` `interface TableEditableCellPropsParams<T> extends PrimaryTableCellParams<T> { editedRow: T; updateEditedCellValue: (val: any \\| { rowValue?: string \\| number; isUpdateCurrentRow?: boolean; [key: string]: any }) => void }` `interface TablePlainObject{ [key: string]: any }`。[通用类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/common.ts)。[详细类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/table/type.ts) | N\nrules | Array | - | 校验规则。TS 类型：`TableEditableCellRules<T>` `type TableEditableCellRules<T> = FormRule[] \\| ((params: PrimaryTableCellParams<T>) => FormRule[])`，[Form API Documents](./form?tab=api)。[详细类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/table/type.ts) | N\nshowEditIcon | Boolean | true | 是否显示编辑图标 | N\nvalidateTrigger | String | 'exit' | 触发校验的时机，有 2 种：退出编辑时和数据变化时。TS 类型：`'exit' \\| 'change'` | N\n\n### TableTreeConfig\n\n名称 | 类型 | 默认值 | 描述 | 必传\n-- | -- | -- | -- | --\ncheckStrictly | Boolean | false | 表示树形结构的行选中（多选），父子行选中是否独立 | N\nchildrenKey | String | children | 树形结构子节点字段，示例：`childrenKey='list'`。一般应用在数据 `data` 的子节点字段不是 `children` 的场景 | N\ndefaultExpandAll | Boolean | false | 是否默认展开全部，仅默认情况有效。如果希望自由控制树形结构的展开或收起，可使用实例方法 `expandAll` 和 `foldAll` | N\nexpandTreeNodeOnClick | Boolean | false | 是否在点击行时展开树形结构节点 | N\nindent | Number | 24 | 树结点缩进距离，单位：px | N\ntreeNodeColumnIndex | Number | 0 | 树结点在第几列渲染，默认为第一列 | N\n\n### TScroll\n\n名称 | 类型 | 默认值 | 描述 | 必传\n-- | -- | -- | -- | --\nbufferSize | Number | 20 | 表示除可视区域外，额外渲染的行数，避免快速滚动过程中，新出现的内容来不及渲染从而出现空白 | N\nisFixedRowHeight | Boolean | false | 表示每行内容是否同一个固定高度，仅在 `scroll.type` 为 `virtual` 时有效，该属性设置为 `true` 时，可用于简化虚拟滚动内部计算逻辑，提升性能，此时则需要明确指定 `scroll.rowHeight` 属性的值 | N\nrowHeight | Number | - | 行高，不会给`<tr>`元素添加样式高度，仅作为滚动时的行高参考。一般情况不需要设置该属性。如果设置，可尽量将该属性设置为每行平均高度，从而使得滚动过程更加平滑 | N\nthreshold | Number | 100 | 启动虚拟滚动的阈值。为保证组件收益最大化，当数据量小于阈值 `scroll.threshold` 时，无论虚拟滚动的配置是否存在，组件内部都不会开启虚拟滚动 | N\ntype | String | - | 必需。滚动加载类型，有两种：懒加载和虚拟滚动。<br />值为 `lazy` ，表示滚动时会进行懒加载，非可视区域内的内容将不会默认渲染，直到该内容可见时，才会进行渲染，并且已渲染的内容滚动到不可见时，不会被销毁；<br />值为`virtual`时，表示会进行虚拟滚动，无论滚动条滚动到哪个位置，同一时刻，仅渲染该可视区域内的内容，当需要展示的数据量较大时，建议开启该特性。可选项：lazy/virtual | Y\n"
      }
    ]
  },
  {
    "name": "tabs",
    "propsData": ":: BASE_DOC ::\n\n## API\n\n### Tabs Props\n\n名称 | 类型 | 默认值 | 描述 | 必传\n-- | -- | -- | -- | --\naction | String / Slot / Function | - | 选项卡右侧的操作区域。`placement`为`top`或`bottom`时有效。TS 类型：`string \\| TNode`。[通用类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/common.ts) | N\naddable | Boolean | false | 选项卡是否可增加 | N\ndisabled | Boolean | false | 是否禁用选项卡 | N\ndragSort | Boolean | false | 是否开启拖拽调整顺序 | N\nlist | Array | - | 选项卡列表。TS 类型：`Array<TdTabPanelProps>` | N\nplacement | String | top | 选项卡位置。可选项：left/top/bottom/right | N\nscrollPosition | String | auto | Tab较多的时候，选中滑块滚动最终停留的位置。可选项：auto/start/center/end | N\nsize | String | medium | 组件尺寸。可选项：medium/large | N\ntheme | String | normal | 选项卡风格，包含 默认风格 和 卡片风格两种。可选项：normal/card | N\nvalue | String / Number | - | 激活的选项卡值。支持语法糖 `v-model` 或 `v-model:value`。TS 类型：`TabValue` `type TabValue = string \\| number`。[详细类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/tabs/type.ts) | N\ndefaultValue | String / Number | - | 激活的选项卡值。非受控属性。TS 类型：`TabValue` `type TabValue = string \\| number`。[详细类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/tabs/type.ts) | N\nonAdd | Function |  | TS 类型：`(context: { e: MouseEvent }) => void`<br/>添加选项卡时触发 | N\nonChange | Function |  | TS 类型：`(value: TabValue) => void`<br/>激活的选项卡发生变化时触发 | N\nonDragSort | Function |  | TS 类型：`(context: TabsDragSortContext) => void`<br/>拖拽排序时触发。[详细类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/tabs/type.ts)。<br/>`interface TabsDragSortContext { currentIndex: number; current: TabValue; targetIndex: number; target: TabValue }`<br/> | N\nonRemove | Function |  | TS 类型：`(options: { value: TabValue; index: number; e: MouseEvent }) => void`<br/>删除选项卡时触发 | N\n\n### Tabs Events\n\n名称 | 参数 | 描述\n-- | -- | --\nadd | `(context: { e: MouseEvent })` | 添加选项卡时触发\nchange | `(value: TabValue)` | 激活的选项卡发生变化时触发\ndrag-sort | `(context: TabsDragSortContext)` | 拖拽排序时触发。[详细类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/tabs/type.ts)。<br/>`interface TabsDragSortContext { currentIndex: number; current: TabValue; targetIndex: number; target: TabValue }`<br/>\nremove | `(options: { value: TabValue; index: number; e: MouseEvent })` | 删除选项卡时触发\n\n\n### TabPanel Props\n\n名称 | 类型 | 默认值 | 描述 | 必传\n-- | -- | -- | -- | --\ndefault | Slot / Function | - | 用于自定义选项卡导航，同 panel。TS 类型：`TNode`。[通用类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/common.ts) | N\ndestroyOnHide | Boolean | true | 选项卡内容隐藏时是否销毁 | N\ndisabled | Boolean | false | 是否禁用当前选项卡 | N\ndraggable | Boolean | true | 选项卡组件开启允许拖动排序时，当前选项卡是否允许拖动 | N\nlabel | String / Slot / Function | - | 选项卡名称，可自定义选项卡导航内容。TS 类型：`string \\| TNode`。[通用类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/common.ts) | N\nlazy | Boolean | false | 是否启用选项卡懒加载 | N\npanel | String / Slot / Function | - | 用于自定义选项卡面板内容。TS 类型：`string \\| TNode`。[通用类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/common.ts) | N\nremovable | Boolean | false | 当前选项卡是否允许移除 | N\nvalue | String / Number | - | 选项卡的值，唯一标识。TS 类型：`TabValue` | N\nonRemove | Function |  | TS 类型：`(options: { value: TabValue; e: MouseEvent }) => void`<br/>点击删除按钮时触发 | N\n\n### TabPanel Events\n\n名称 | 参数 | 描述\n-- | -- | --\nremove | `(options: { value: TabValue; e: MouseEvent })` | 点击删除按钮时触发\n"
  },
  {
    "name": "tag",
    "propsData": ":: BASE_DOC ::\n\n## API\n\n### Tag Props\n\n名称 | 类型 | 默认值 | 描述 | 必传\n-- | -- | -- | -- | --\nclosable | Boolean | false | 标签是否可关闭 | N\ncolor | String | - | 自定义标签颜色 | N\ncontent | String / Slot / Function | - | 组件子元素。TS 类型：`string \\| TNode`。[通用类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/common.ts) | N\ndefault | String / Slot / Function | - | 组件子元素，同 `content`。TS 类型：`string \\| TNode`。[通用类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/common.ts) | N\ndisabled | Boolean | false | 标签禁用态，失效标签不能触发事件。默认风格（theme=default）才有禁用态 | N\nicon | Slot / Function | undefined | 标签中的图标，可自定义图标呈现。TS 类型：`TNode`。[通用类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/common.ts) | N\nmaxWidth | String / Number | - | 标签最大宽度，宽度超出后会出现省略号。示例：'50px' / 80 | N\nshape | String | square | 标签类型，有三种：方形、圆角方形、标记型。可选项：square/round/mark | N\nsize | String | medium | 标签尺寸。可选项：small/medium/large。TS 类型：`SizeEnum`。[通用类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/common.ts) | N\ntheme | String | default | 组件风格，用于描述组件不同的应用场景。可选项：default/primary/warning/danger/success | N\ntitle | String | - | 标签标题，在标签hover时展示，默认为标签内容 | N\nvariant | String | dark | 标签风格变体。可选项：dark/light/outline/light-outline | N\nonClick | Function |  | TS 类型：`(context: { e: MouseEvent }) => void`<br/>点击时触发 | N\nonClose | Function |  | TS 类型：`(context: { e: MouseEvent }) => void`<br/>如果关闭按钮存在，点击关闭按钮时触发 | N\n\n### Tag Events\n\n名称 | 参数 | 描述\n-- | -- | --\nclick | `(context: { e: MouseEvent })` | 点击时触发\nclose | `(context: { e: MouseEvent })` | 如果关闭按钮存在，点击关闭按钮时触发\n\n\n### CheckTag Props\n\n名称 | 类型 | 默认值 | 描述 | 必传\n-- | -- | -- | -- | --\nchecked | Boolean | - | 标签选中的状态，默认风格（theme=default）才有选中态。支持语法糖 `v-model` 或 `v-model:checked` | N\ndefaultChecked | Boolean | - | 标签选中的状态，默认风格（theme=default）才有选中态。非受控属性 | N\ncheckedProps | Object | - | 透传标签选中态属性。TS 类型：`TdTagProps` | N\ncontent | String / Number / Array / Slot / Function | - | 组件子元素；传入数组时：[选中内容，非选中内容]。TS 类型：`string \\| number \\| string[] \\| TNode`。[通用类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/common.ts) | N\ndefault | String / Slot / Function | - | 组件子元素，默认插槽。TS 类型：`string \\| TNode`。[通用类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/common.ts) | N\ndisabled | Boolean | false | 标签禁用态，失效标签不能触发事件。默认风格（theme=default）才有禁用态 | N\nsize | String | medium | 标签尺寸。可选项：small/medium/large。TS 类型：`SizeEnum`。[通用类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/common.ts) | N\nuncheckedProps | Object | - | 透传标签未选态属性。TS 类型：`TdTagProps` | N\nvalue | String / Number | - | 标签唯一标识，一般用于标签组场景，单个可选择标签无需设置 | N\nonChange | Function |  | TS 类型：`(checked: boolean, context: CheckTagChangeContext) => void`<br/>状态切换时触发。[详细类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/tag/type.ts)。<br/>`interface CheckTagChangeContext { e: MouseEvent \\| KeyboardEvent; value: string \\| number }`<br/> | N\nonClick | Function |  | TS 类型：`(context: { e: MouseEvent }) => void`<br/>点击标签时触发 | N\n\n### CheckTag Events\n\n名称 | 参数 | 描述\n-- | -- | --\nchange | `(checked: boolean, context: CheckTagChangeContext)` | 状态切换时触发。[详细类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/tag/type.ts)。<br/>`interface CheckTagChangeContext { e: MouseEvent \\| KeyboardEvent; value: string \\| number }`<br/>\nclick | `(context: { e: MouseEvent })` | 点击标签时触发\n\n\n### CheckTagGroup Props\n\n名称 | 类型 | 默认值 | 描述 | 必传\n-- | -- | -- | -- | --\ncheckedProps | Object | - | 透传标签选中态属性。TS 类型：`TdTagProps` | N\nmultiple | Boolean | false | 是否支持选中多个标签 | N\noptions | Array | - | 标签选项列表。TS 类型：`CheckTagGroupOption[]` `interface CheckTagGroupOption extends TdCheckTagProps { label: string \\| TNode; value: string \\| number }`。[通用类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/common.ts)。[详细类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/tag/type.ts) | N\nuncheckedProps | Object | - | 透传标签未选态属性。TS 类型：`TdTagProps` | N\nvalue | Array | [] | 选中标签值。支持语法糖 `v-model` 或 `v-model:value`。TS 类型：`CheckTagGroupValue` `type CheckTagGroupValue = Array<string \\| number>`。[详细类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/tag/type.ts) | N\ndefaultValue | Array | [] | 选中标签值。非受控属性。TS 类型：`CheckTagGroupValue` `type CheckTagGroupValue = Array<string \\| number>`。[详细类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/tag/type.ts) | N\nonChange | Function |  | TS 类型：`(value: CheckTagGroupValue, context: CheckTagGroupChangeContext) => void`<br/>[详细类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/tag/type.ts)。<br/>`interface CheckTagGroupChangeContext { type: 'check' \\| 'uncheck'; e: MouseEvent \\| KeyboardEvent; value: string \\| number }`<br/> | N\n\n### CheckTagGroup Events\n\n名称 | 参数 | 描述\n-- | -- | --\nchange | `(value: CheckTagGroupValue, context: CheckTagGroupChangeContext)` | [详细类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/tag/type.ts)。<br/>`interface CheckTagGroupChangeContext { type: 'check' \\| 'uncheck'; e: MouseEvent \\| KeyboardEvent; value: string \\| number }`<br/>\n"
  },
  {
    "name": "tag-input",
    "propsData": ":: BASE_DOC ::\n\n## API\n\n### TagInput Props\n\n名称 | 类型 | 默认值 | 描述 | 必传\n-- | -- | -- | -- | --\nautoWidth | Boolean | false | 宽度随内容自适应 | N\nborderless | Boolean | false | 无边框模式 | N\nclearable | Boolean | false | 是否可清空 | N\ncollapsedItems | Slot / Function | - | 标签过多的情况下，折叠项内容，默认为 `+N`。如果需要悬浮就显示其他内容，可以使用 collapsedItems 自定义。`value` 表示当前存在的所有标签，`collapsedSelectedItems` 表示折叠的标签，`count` 表示折叠的数量，`onClose` 表示移除标签的事件回调。TS 类型：`TNode<{ value: TagInputValue; collapsedSelectedItems: TagInputValue; count: number; onClose: (context: { index: number,  e?: MouseEvent }) => void }>`。[通用类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/common.ts) | N\ndisabled | Boolean | undefined | 是否禁用标签输入框 | N\ndragSort | Boolean | false | 拖拽调整标签顺序 | N\nexcessTagsDisplayType | String | break-line | 标签超出时的呈现方式，有两种：横向滚动显示 和 换行显示。可选项：scroll/break-line | N\ninputProps | Object | - | 透传 Input 输入框组件全部属性。TS 类型：`InputProps`，[Input API Documents](./input?tab=api)。[详细类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/tag-input/type.ts) | N\ninputValue | String / Number | '' | 输入框的值。支持语法糖 `v-model:inputValue`。TS 类型：`string` | N\ndefaultInputValue | String / Number | '' | 输入框的值。非受控属性。TS 类型：`string` | N\nlabel | String / Slot / Function | - | 左侧文本。TS 类型：`string \\| TNode`。[通用类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/common.ts) | N\nmax | Number | - | 最大允许输入的标签数量 | N\nminCollapsedNum | Number | 0 | 最小折叠数量，用于标签数量过多的情况下折叠选中项，超出该数值的选中项折叠。值为 0 则表示不折叠 | N\nplaceholder | String | undefined | 占位符 | N\nprefixIcon | Slot / Function | - | 组件前置图标。TS 类型：`TNode`。[通用类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/common.ts) | N\nreadonly | Boolean | undefined | 只读状态，值为真会隐藏标签移除按钮和输入框 | N\nsize | String | medium | 组件尺寸。可选项：small/medium/large。TS 类型：`SizeEnum`。[通用类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/common.ts) | N\nstatus | String | - | 输入框状态。可选项：default/success/warning/error | N\nsuffix | String / Slot / Function | - | 后置图标前的后置内容。TS 类型：`string \\| TNode`。[通用类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/common.ts) | N\nsuffixIcon | Slot / Function | - | 组件后置图标。TS 类型：`TNode`。[通用类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/common.ts) | N\ntag | String / Slot / Function | - | 自定义标签的内部内容，每一个标签的当前值。注意和 `valueDisplay` 区分，`valueDisplay`  是用来定义全部标签内容，而非某一个标签。TS 类型：`string \\| TNode<{ value: string \\| number }>`。[通用类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/common.ts) | N\ntagProps | Object | - | 透传 Tag 组件全部属性。TS 类型：`TagProps`，[Tag API Documents](./tag?tab=api)。[详细类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/tag-input/type.ts) | N\ntips | String / Slot / Function | - | 输入框下方提示文本，会根据不同的 `status` 呈现不同的样式。TS 类型：`string \\| TNode`。[通用类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/common.ts) | N\nvalue | Array | [] | 值。支持语法糖 `v-model` 或 `v-model:value`。TS 类型：`TagInputValue` `type TagInputValue = Array<string \\| number>`。[详细类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/tag-input/type.ts) | N\ndefaultValue | Array | [] | 值。非受控属性。TS 类型：`TagInputValue` `type TagInputValue = Array<string \\| number>`。[详细类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/tag-input/type.ts) | N\nvalueDisplay | String / Slot / Function | - | 自定义值呈现的全部内容，参数为所有标签的值。TS 类型：`string \\| TNode<{ value: TagInputValue; onClose: (index: number, item?: any) => void }>`。[通用类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/common.ts) | N\nonBlur | Function |  | TS 类型：`(value: TagInputValue, context: { inputValue: string; e: FocusEvent }) => void`<br/>失去焦点时触发 | N\nonChange | Function |  | TS 类型：`(value: TagInputValue, context: TagInputChangeContext) => void`<br/>值变化时触发，参数 `context.trigger` 表示数据变化的触发来源；`context.index` 指当前变化项的下标；`context.item` 指当前变化项；`context.e` 表示事件参数。[详细类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/tag-input/type.ts)。<br/>`interface TagInputChangeContext { trigger: TagInputTriggerSource; index?: number; item?: string \\| number; e?: MouseEvent \\| KeyboardEvent }`<br/><br/>`type TagInputTriggerSource = 'enter' \\| 'tag-remove' \\| 'backspace' \\| 'clear'`<br/> | N\nonClear | Function |  | TS 类型：`(context: { e: MouseEvent }) => void`<br/>清空按钮点击时触发 | N\nonClick | Function |  | TS 类型：`(context: { e: MouseEvent }) => void`<br/>点击组件时触发 | N\nonDragSort | Function |  | TS 类型：`(context: TagInputDragSortContext) => void`<br/>【开发中】拖拽排序时触发。[详细类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/tag-input/type.ts)。<br/>`interface TagInputDragSortContext { newTags: TagInputValue; currentIndex: number; current: string \\| number; targetIndex: number; target: string \\| number }`<br/> | N\nonEnter | Function |  | TS 类型：`(value: TagInputValue, context: { e: KeyboardEvent; inputValue: string }) => void`<br/>按键按下 Enter 时触发 | N\nonFocus | Function |  | TS 类型：`(value: TagInputValue, context: { inputValue: string; e: FocusEvent }) => void`<br/>聚焦时触发 | N\nonInputChange | Function |  | TS 类型：`(value: string, context?: InputValueChangeContext) => void`<br/>输入框值发生变化时触发，`context.trigger` 表示触发输入框值变化的来源：文本输入触发、清除按钮触发、回车键触发等。[详细类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/tag-input/type.ts)。<br/>`interface InputValueChangeContext { e?: InputEvent \\| MouseEvent \\| CompositionEvent \\| KeyboardEvent; trigger: 'input' \\| 'clear' \\| 'enter' \\| 'blur'   }`<br/> | N\nonMouseenter | Function |  | TS 类型：`(context: { e: MouseEvent }) => void`<br/>进入输入框时触发 | N\nonMouseleave | Function |  | TS 类型：`(context: { e: MouseEvent }) => void`<br/>离开输入框时触发 | N\nonPaste | Function |  | TS 类型：`(context: { e: ClipboardEvent; pasteValue: string }) => void`<br/>粘贴事件，`pasteValue` 表示粘贴板的内容 | N\nonRemove | Function |  | TS 类型：`(context: TagInputRemoveContext) => void`<br/>移除单个标签时触发。[详细类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/tag-input/type.ts)。<br/>`interface TagInputRemoveContext { value: TagInputValue; index: number; item: string \\| number; e?: MouseEvent \\| KeyboardEvent; trigger: TagInputRemoveTrigger }`<br/><br/>`type TagInputRemoveTrigger = 'tag-remove' \\| 'backspace'`<br/> | N\n\n### TagInput Events\n\n名称 | 参数 | 描述\n-- | -- | --\nblur | `(value: TagInputValue, context: { inputValue: string; e: FocusEvent })` | 失去焦点时触发\nchange | `(value: TagInputValue, context: TagInputChangeContext)` | 值变化时触发，参数 `context.trigger` 表示数据变化的触发来源；`context.index` 指当前变化项的下标；`context.item` 指当前变化项；`context.e` 表示事件参数。[详细类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/tag-input/type.ts)。<br/>`interface TagInputChangeContext { trigger: TagInputTriggerSource; index?: number; item?: string \\| number; e?: MouseEvent \\| KeyboardEvent }`<br/><br/>`type TagInputTriggerSource = 'enter' \\| 'tag-remove' \\| 'backspace' \\| 'clear'`<br/>\nclear | `(context: { e: MouseEvent })` | 清空按钮点击时触发\nclick | `(context: { e: MouseEvent })` | 点击组件时触发\ndrag-sort | `(context: TagInputDragSortContext)` | 【开发中】拖拽排序时触发。[详细类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/tag-input/type.ts)。<br/>`interface TagInputDragSortContext { newTags: TagInputValue; currentIndex: number; current: string \\| number; targetIndex: number; target: string \\| number }`<br/>\nenter | `(value: TagInputValue, context: { e: KeyboardEvent; inputValue: string })` | 按键按下 Enter 时触发\nfocus | `(value: TagInputValue, context: { inputValue: string; e: FocusEvent })` | 聚焦时触发\ninput-change | `(value: string, context?: InputValueChangeContext)` | 输入框值发生变化时触发，`context.trigger` 表示触发输入框值变化的来源：文本输入触发、清除按钮触发、回车键触发等。[详细类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/tag-input/type.ts)。<br/>`interface InputValueChangeContext { e?: InputEvent \\| MouseEvent \\| CompositionEvent \\| KeyboardEvent; trigger: 'input' \\| 'clear' \\| 'enter' \\| 'blur'   }`<br/>\nmouseenter | `(context: { e: MouseEvent })` | 进入输入框时触发\nmouseleave | `(context: { e: MouseEvent })` | 离开输入框时触发\npaste | `(context: { e: ClipboardEvent; pasteValue: string })` | 粘贴事件，`pasteValue` 表示粘贴板的内容\nremove | `(context: TagInputRemoveContext)` | 移除单个标签时触发。[详细类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/tag-input/type.ts)。<br/>`interface TagInputRemoveContext { value: TagInputValue; index: number; item: string \\| number; e?: MouseEvent \\| KeyboardEvent; trigger: TagInputRemoveTrigger }`<br/><br/>`type TagInputRemoveTrigger = 'tag-remove' \\| 'backspace'`<br/>\n"
  },
  {
    "name": "textarea",
    "propsData": ":: BASE_DOC ::\n\n## API\n\n### Textarea Props\n\n名称 | 类型 | 默认值 | 描述 | 必传\n-- | -- | -- | -- | --\nallowInputOverMax | Boolean | false | 超出maxlength或maxcharacter之后是否还允许输入 | N\nautofocus | Boolean | false | 自动聚焦，拉起键盘 | N\nautosize | Boolean / Object | false | 高度自动撑开。 autosize = true 表示组件高度自动撑开，同时，依旧允许手动拖高度。如果设置了 autosize.maxRows 或者 autosize.minRows 则不允许手动调整高度。TS 类型：`boolean \\| { minRows?: number; maxRows?: number }` | N\ndisabled | Boolean | undefined | 是否禁用文本框 | N\nmaxcharacter | Number | - | 用户最多可以输入的字符个数，一个中文汉字表示两个字符长度 | N\nmaxlength | String / Number | - | 用户最多可以输入的字符个数。TS 类型：`string \\| number` | N\nname | String | - | 名称，HTML 元素原生属性 | N\nplaceholder | String | undefined | 占位符 | N\nreadonly | Boolean | undefined | 只读状态 | N\nstatus | String | default | 文本框状态。可选项：default/success/warning/error | N\ntips | String / Slot / Function | - | 输入框下方提示文本，会根据不同的 `status` 呈现不同的样式。TS 类型：`string \\| TNode`。[通用类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/common.ts) | N\nvalue | String / Number | - | 文本框值。支持语法糖 `v-model` 或 `v-model:value`。TS 类型：`TextareaValue` `type TextareaValue = string \\| number`。[详细类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/textarea/type.ts) | N\ndefaultValue | String / Number | - | 文本框值。非受控属性。TS 类型：`TextareaValue` `type TextareaValue = string \\| number`。[详细类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/textarea/type.ts) | N\nonBlur | Function |  | TS 类型：`(value: TextareaValue, context: { e: FocusEvent }) => void`<br/>失去焦点时触发 | N\nonChange | Function |  | TS 类型：`(value: TextareaValue, context?: { e?: InputEvent }) => void`<br/>输入内容变化时触发 | N\nonFocus | Function |  | TS 类型：`(value: TextareaValue, context : { e: FocusEvent }) => void`<br/>获得焦点时触发 | N\nonKeydown | Function |  | TS 类型：`(value: TextareaValue, context: { e: KeyboardEvent }) => void`<br/>键盘按下时触发 | N\nonKeypress | Function |  | TS 类型：`(value: TextareaValue, context: { e: KeyboardEvent }) => void`<br/>按下字符键时触发（keydown -> keypress -> keyup） | N\nonKeyup | Function |  | TS 类型：`(value: TextareaValue, context: { e: KeyboardEvent }) => void`<br/>释放键盘时触发 | N\nonValidate | Function |  | TS 类型：`(context: { error?: 'exceed-maximum' \\| 'below-minimum' }) => void`<br/>字数超出限制时触发 | N\n\n### Textarea Events\n\n名称 | 参数 | 描述\n-- | -- | --\nblur | `(value: TextareaValue, context: { e: FocusEvent })` | 失去焦点时触发\nchange | `(value: TextareaValue, context?: { e?: InputEvent })` | 输入内容变化时触发\nfocus | `(value: TextareaValue, context : { e: FocusEvent })` | 获得焦点时触发\nkeydown | `(value: TextareaValue, context: { e: KeyboardEvent })` | 键盘按下时触发\nkeypress | `(value: TextareaValue, context: { e: KeyboardEvent })` | 按下字符键时触发（keydown -> keypress -> keyup）\nkeyup | `(value: TextareaValue, context: { e: KeyboardEvent })` | 释放键盘时触发\nvalidate | `(context: { error?: 'exceed-maximum' \\| 'below-minimum' })` | 字数超出限制时触发\n"
  },
  {
    "name": "time-picker",
    "propsData": ":: BASE_DOC ::\n\n## API\n\n### TimePicker Props\n\n名称 | 类型 | 默认值 | 描述 | 必传\n-- | -- | -- | -- | --\nallowInput | Boolean | false | 是否允许直接输入时间 | N\nborderless | Boolean | false | 无边框模式 | N\nclearable | Boolean | false | 是否允许清除选中值 | N\ndisableTime | Function | - | 禁用时间项的配置函数。TS 类型：`(h: number, m: number, s: number, ms: number) => Partial<{ hour: Array<number>, minute: Array<number>, second: Array<number>, millisecond: Array<number>  }>` | N\ndisabled | Boolean | undefined | 是否禁用组件 | N\nformat | String | HH:mm:ss | 用于格式化时间，[详细文档](https://day.js.org/docs/en/display/format) | N\nhideDisabledTime | Boolean | true | 是否隐藏禁用状态的时间项 | N\ninputProps | Object | - | 透传给输入框（Input）组件的参数。TS 类型：`InputProps`，[Input API Documents](./input?tab=api)。[详细类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/time-picker/type.ts) | N\nlabel | String / Slot / Function | - | 左侧文本。TS 类型：`string \\| TNode`。[通用类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/common.ts) | N\nplaceholder | String | undefined | 占位符 | N\npopupProps | Object | - | 透传 Popup 组件全部属性。TS 类型：`PopupProps`，[Popup API Documents](./popup?tab=api)。[详细类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/time-picker/type.ts) | N\npresets | Object | - | 预设快捷时间选择，示例：`{ '前一小时': '11:00:00' }`。TS 类型：`PresetTime` `interface PresetTime { [presetName: string]: TimePickerValue \\| (() => TimePickerValue) }`。[详细类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/time-picker/type.ts) | N\nreadonly | Boolean | undefined | 只读状态，优先级大于 `allowInput` | N\nselectInputProps | Object | - | 透传 SelectInput 筛选器输入框组件的全部属性。TS 类型：`SelectInputProps`，[SelectInput API Documents](./select-input?tab=api)。[详细类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/time-picker/type.ts) | N\nsize | String | medium | 尺寸。可选项：small/medium/large | N\nstatus | String | default | 输入框状态。可选项：default/success/warning/error | N\nsteps | Array | [1, 1, 1] | 时间间隔步数，数组排列 [小时, 分钟, 秒]，示例：[2, 1, 1] 或者 ['2', '1', '1']。TS 类型：`Array<string \\| number>` | N\ntips | String / Slot / Function | - | 输入框下方提示文本，会根据不同的 `status` 呈现不同的样式。TS 类型：`string \\| TNode`。[通用类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/common.ts) | N\nvalue | String | - | 选中值。支持语法糖 `v-model` 或 `v-model:value`。TS 类型：`TimePickerValue` `type TimePickerValue = string`。[详细类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/time-picker/type.ts) | N\ndefaultValue | String | - | 选中值。非受控属性。TS 类型：`TimePickerValue` `type TimePickerValue = string`。[详细类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/time-picker/type.ts) | N\nvalueDisplay | String / Slot / Function | - | 自定义选中项呈现的内容。TS 类型：`string \\| TNode<{ value: TimePickerValue }>`。[通用类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/common.ts) | N\nonBlur | Function |  | TS 类型：`(context: { value: TimePickerValue } & SelectInputBlurContext) => void`<br/>当输入框失去焦点时触发，value 表示组件当前有效值。[详细类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/time-picker/type.ts)。<br/>`import { SelectInputBlurContext } from '@SelectInput'`<br/> | N\nonChange | Function |  | TS 类型：`(value: TimePickerValue) => void`<br/>选中值发生变化时触发 | N\nonClear | Function |  | TS 类型：`(context: { e: MouseEvent }) => void`<br/>点击清空按钮时触发 | N\nonClose | Function |  | TS 类型：`(context: { e: MouseEvent }) => void`<br/>面板关闭时触发 | N\nonConfirm | Function |  | TS 类型：`(context: { e: MouseEvent }) => void`<br/>点击确认按钮时触发 | N\nonFocus | Function |  | TS 类型：`(context: { value: TimePickerValue; e: FocusEvent }) => void`<br/>输入框获得焦点时触发，value 表示组件当前有效值 | N\nonInput | Function |  | TS 类型：`(context: { value: TimePickerValue; e: InputEvent }) => void`<br/>当输入框内容发生变化时触发，参数 value 表示组件当前有效值 | N\nonOpen | Function |  | TS 类型：`(context: { e: MouseEvent }) => void`<br/>面板打开时触发 | N\nonPick | Function |  | TS 类型：`(value: TimePickerValue, context: { e: MouseEvent }) => void`<br/>面板选中值后触发 | N\n\n### TimePicker Events\n\n名称 | 参数 | 描述\n-- | -- | --\nblur | `(context: { value: TimePickerValue } & SelectInputBlurContext)` | 当输入框失去焦点时触发，value 表示组件当前有效值。[详细类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/time-picker/type.ts)。<br/>`import { SelectInputBlurContext } from '@SelectInput'`<br/>\nchange | `(value: TimePickerValue)` | 选中值发生变化时触发\nclear | `(context: { e: MouseEvent })` | 点击清空按钮时触发\nclose | `(context: { e: MouseEvent })` | 面板关闭时触发\nconfirm | `(context: { e: MouseEvent })` | 点击确认按钮时触发\nfocus | `(context: { value: TimePickerValue; e: FocusEvent })` | 输入框获得焦点时触发，value 表示组件当前有效值\ninput | `(context: { value: TimePickerValue; e: InputEvent })` | 当输入框内容发生变化时触发，参数 value 表示组件当前有效值\nopen | `(context: { e: MouseEvent })` | 面板打开时触发\npick | `(value: TimePickerValue, context: { e: MouseEvent })` | 面板选中值后触发\n\n\n### TimeRangePicker Props\n\n名称 | 类型 | 默认值 | 描述 | 必传\n-- | -- | -- | -- | --\nallowInput | Boolean | false | 是否允许直接输入时间 | N\nautoSwap | Boolean | true | 是否自动调换左右区间的顺序，默认为 true；若需要支持跨天的场景，可以设置为 false | N\nborderless | Boolean | false | 无边框模式 | N\nclearable | Boolean | false | 是否允许清除选中值 | N\ndisableTime | Function | - | 禁用时间项。TS 类型：`(h: number, m: number, s: number, ms: number, context: { partial: TimeRangePickerPartial }) =>Partial<{ hour: Array<number>, minute: Array<number>, second: Array<number> }>` `type TimeRangePickerPartial = 'start' \\| 'end'`。[详细类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/time-picker/type.ts) | N\ndisabled | Boolean / Array | undefined | 是否禁用组件，值为数组表示可分别控制开始日期和结束日期是否禁用。TS 类型：`boolean \\| Array<boolean>` | N\nformat | String | HH:mm:ss | 用于格式化时间，[详细文档](https://day.js.org/docs/en/display/format) | N\nhideDisabledTime | Boolean | true | 是否隐藏禁用状态的时间项 | N\nlabel | String / Slot / Function | - | 左侧文本。TS 类型：`string \\| TNode`。[通用类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/common.ts) | N\nplaceholder | String / Array | undefined | 占位符，值为数组表示可分别为开始日期和结束日期设置占位符。TS 类型：`string \\| Array<string>` | N\npopupProps | Object | - | 透传 Popup 组件全部属性。TS 类型：`PopupProps`，[Popup API Documents](./popup?tab=api)。[详细类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/time-picker/type.ts) | N\npresets | Object | - | 预设快捷时间范围选择，示例：{ '下午': ['13:00:00', '18:00:00'] }。TS 类型：`PresetTimeRange` `interface PresetTimeRange { [presetRageName: string]: TimeRangeValue \\| (() => TimeRangeValue)}`。[详细类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/time-picker/type.ts) | N\nrangeInputProps | Object | - | 透传给范围输入框 RangeInput 组件的参数。TS 类型：`RangeInputProps`，[RangeInput API Documents](./range-input?tab=api)。[详细类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/time-picker/type.ts) | N\nsize | String | medium | 尺寸。可选项：small/medium/large | N\nstatus | String | default | 输入框状态。可选项：default/success/warning/error | N\nsteps | Array | [1, 1, 1] | 时间间隔步数，数组排列 [小时, 分钟, 秒]，示例：[2, 1, 1] 或者 ['2', '1', '1']。TS 类型：`Array<string \\| number>` | N\ntips | String / Slot / Function | - | 输入框下方提示文本，会根据不同的 `status` 呈现不同的样式。TS 类型：`string \\| TNode`。[通用类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/common.ts) | N\nvalue | Array | - | 选中值。支持语法糖 `v-model` 或 `v-model:value`。TS 类型：`TimeRangeValue` `type TimeRangeValue = Array<string>`。[详细类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/time-picker/type.ts) | N\ndefaultValue | Array | - | 选中值。非受控属性。TS 类型：`TimeRangeValue` `type TimeRangeValue = Array<string>`。[详细类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/time-picker/type.ts) | N\nonBlur | Function |  | TS 类型：`(context: { value: TimeRangeValue; e?: FocusEvent; position?: TimeRangePickerPartial })  => void`<br/>当输入框失去焦点时触发。[详细类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/time-picker/type.ts)。<br/>`type TimeRangePickerPartial = 'start' \\| 'end'`<br/> | N\nonChange | Function |  | TS 类型：`(value: TimeRangeValue) => void`<br/>选中值发生变化时触发 | N\nonFocus | Function |  | TS 类型：`(context?: { value: TimeRangeValue; e?: FocusEvent; position?: TimeRangePickerPartial })  => void`<br/>范围输入框获得焦点时触发。[详细类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/time-picker/type.ts)。<br/>`type TimeRangePickerPartial = 'start' \\| 'end'`<br/> | N\nonInput | Function |  | TS 类型：`(context: { value: TimeRangeValue; e?: InputEvent; position?: TimeRangePickerPartial  })  => void`<br/>当输入框内容发生变化时触发，参数 input 表示输入内容，value 表示组件当前有效值。[详细类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/time-picker/type.ts)。<br/>`type TimeRangePickerPartial = 'start' \\| 'end'`<br/> | N\nonPick | Function |  | TS 类型：`(value: TimeRangeValue, context: { e: MouseEvent, position?: TimeRangePickerPartial }) => void`<br/>面板选中值后触发 | N\n\n### TimeRangePicker Events\n\n名称 | 参数 | 描述\n-- | -- | --\nblur | `(context: { value: TimeRangeValue; e?: FocusEvent; position?: TimeRangePickerPartial }) ` | 当输入框失去焦点时触发。[详细类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/time-picker/type.ts)。<br/>`type TimeRangePickerPartial = 'start' \\| 'end'`<br/>\nchange | `(value: TimeRangeValue)` | 选中值发生变化时触发\nfocus | `(context?: { value: TimeRangeValue; e?: FocusEvent; position?: TimeRangePickerPartial }) ` | 范围输入框获得焦点时触发。[详细类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/time-picker/type.ts)。<br/>`type TimeRangePickerPartial = 'start' \\| 'end'`<br/>\ninput | `(context: { value: TimeRangeValue; e?: InputEvent; position?: TimeRangePickerPartial  }) ` | 当输入框内容发生变化时触发，参数 input 表示输入内容，value 表示组件当前有效值。[详细类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/time-picker/type.ts)。<br/>`type TimeRangePickerPartial = 'start' \\| 'end'`<br/>\npick | `(value: TimeRangeValue, context: { e: MouseEvent, position?: TimeRangePickerPartial })` | 面板选中值后触发\n"
  },
  {
    "name": "timeline",
    "propsData": ":: BASE_DOC ::\n\n## API\n### Timeline Props\n\n名称 | 类型 | 默认值 | 说明 | 必传\n-- | -- | -- | -- | --\nlabelAlign | String | left | 标签信息放在时间轴的位置，`mode='alternate'` 时生效。纵向时间轴信息位置：左侧、右侧或两侧，默认信息在时间轴右侧。横向时间轴信息位置：上方、下方、两侧。可选项：left/right/alternate/top/bottom | N\nlayout | String | vertical | 时间轴方向：水平方向、垂直方向。可选项：horizontal/vertical | N\nmode | String | alternate | 标签与内容文本的位置关系，`alternate` 为展示在轴两侧，`same` 为展示在同一侧。可选项：alternate/same | N\nreverse | Boolean | false | 时间轴是否表现为倒序 | N\ntheme | String | default | 时间轴风格。可选项：default/dot | N\n\n### TimelineItem Props\n\n名称 | 类型 | 默认值 | 说明 | 必传\n-- | -- | -- | -- | --\ncontent | String / Slot / Function | - | 描述内容。TS 类型：`string \\| TNode`。[通用类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/common.ts) | N\ndot | Slot / Function | - | 用于自定义时间轴节点元素。TS 类型：`TNode`。[通用类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/common.ts) | N\ndotColor | String | primary | 时间轴颜色，内置 `primary/warning/error/default` 四种色值，可传入 16 进制颜色码或 RGB 颜色值.。TS 类型：`string` | N\nlabel | String / Slot / Function | - | 标签文本内容，可完全自定义。TS 类型：`string \\| TNode`。[通用类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/common.ts) | N\nlabelAlign | String | - | 标签信息相对于时间轴的位置，在 `mode='alternate'` 时生效，优先级高于 `Timeline.labelAlign`。可选项：left/right/top/bottom | N\nloading | Boolean | - | 是否处在加载状态 | N\nonClick | Function |  | TS 类型：`(context: { e: MouseEvent; item: TdTimelineItemProps }) => void`<br/>点击时触发 | N\n\n### TimelineItem Events\n\n名称 | 参数 | 描述\n-- | -- | --\nclick | `(context: { e: MouseEvent; item: TdTimelineItemProps })` | 点击时触发\n"
  },
  {
    "name": "tooltip",
    "propsData": ":: BASE_DOC ::\n\n### 模拟超出省略原生属性\n\n{{ mouse }}\n\n### 定时消失\n\n{{ duration }}\n\n### 搭配 Popup 或 Popconfirm 使用\n\n**Tooltip、Popconfirm、Popover** 都需要劫持 children 的相关事件，使用时需要**在中间添加一层元素**防止事件劫持失效。\n\n{{ with-popup-or-popconfirm }}\n\n## API\n### Tooltip Props\n\n名称 | 类型 | 默认值 | 说明 | 必传\n-- | -- | -- | -- | --\ndelay | Number | - | 【议案讨论中】延迟出现提示，用于异步加载提示信息需要延迟显示的业务场景下 | N\ndestroyOnClose | Boolean | true | 是否在关闭浮层时销毁浮层 | N\nduration | Number | - | 用于设置提示默认显示多长时间之后消失，初始第一次有效，单位：毫秒 | N\nplacement | String | top | 浮层出现位置。TS 类型：`'mouse' \\| PopupPlacement`，[Popup API Documents](./popup?tab=api)。[详细类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/tooltip/type.ts) | N\nshowArrow | Boolean | true | 是否显示浮层箭头 | N\ntheme | String | default | 文字提示风格。可选项：default/primary/success/danger/warning/light | N\n`Omit<PopupProps, 'placement'>` | \\- | - | 继承 `Omit<PopupProps, 'placement'>` 中的全部 API | N\n\n### TooltipLite Props\n\n名称 | 类型 | 默认值 | 说明 | 必传\n-- | -- | -- | -- | --\ncontent | String / Slot / Function | - | 文字提示内容。TS 类型：`string \\| TNode`。[通用类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/common.ts) | N\nplacement | String | top | 提示浮层出现的位置。可选项：top/bottom | N\nshowArrow | Boolean | true | 是否显示箭头 | N\nshowShadow | Boolean | true | 文字提示浮层是否需要阴影 | N\ntheme | String | default | 组件风格，有亮色模式和暗色模式两种。可选项：light/default | N\ntriggerElement | String / Slot / Function | - | 触发元素。TS 类型：`string \\| TNode`。[通用类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/common.ts) | N\n"
  },
  {
    "name": "transfer",
    "propsData": ":: BASE_DOC ::\n\n## API\n### Transfer Props\n\n名称 | 类型 | 默认值 | 说明 | 必传\n-- | -- | -- | -- | --\ncheckboxProps | Object | - | 用于控制复选框属性。TS 类型：`CheckboxProps`，[Checkbox API Documents](./checkbox?tab=api)。[详细类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/transfer/type.ts) | N\nchecked | Array | [] | 数据列表选中项。支持语法糖 `v-model:checked`。TS 类型：`Array<TransferValue>` | N\ndata | Array | [] | 全量数据。TS 类型：`Array<T>` | N\ndirection | String | both | 穿梭框可操作方向。可选项：left/right/both | N\ndisabled | Boolean / Array | - | 禁用全部操作：搜索、选中、移动、分页等。[源列表, 目标列表]，示例：[true, false] 或者 true。TS 类型：`boolean \\| Array<boolean>` | N\nempty | String / Array / Slot / Function | '' | 列表为空时呈现的内容。值类型为数组，则表示分别控制源列表和目标列表数据为空的呈现内容。TS 类型：`EmptyType \\| Array<EmptyType> \\| TNode` `type EmptyType = string \\| TNode `。[通用类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/common.ts)。[详细类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/transfer/type.ts) | N\nfooter | Array / Slot / Function | - | 穿梭框底部内容。TS 类型：`Array<string \\| TNode> \\| TNode<{ type: TransferListType }>`。[通用类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/common.ts) | N\nkeys | Object | - | 用来定义 value / label / disabled 在 `data` 中对应的字段别名，示例：`{ label: 'text', value: 'id' }`，表示选项文本取 `text` 字段，选项值取 `id` 字段。TS 类型：`KeysType`。[通用类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/common.ts) | N\noperation | Array / Slot / Function | - | 方向操作按钮。默认显示组件内置操作图标。自定义操作图标示例：['向左', '向右'] 或者 `[() => <i class='left' />, () => <i class='left' />]` 或者 `(h, direction) => direction === 'left' ? '《' : '》'`。TS 类型：`Array<string \\| TNode> \\| TNode<{ direction: 'left' \\| 'right' }>`。[通用类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/common.ts) | N\npagination | Object / Array | - | 分页配置，值为空则不显示。具体 API 参考分页组件。不支持配置`theme`和`size`。值类型为数组，表示可分别控制源列表和目标列表分页组件。TS 类型：`PaginationProps \\| Array<PaginationProps>`，[Pagination API Documents](./pagination?tab=api)。[详细类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/transfer/type.ts) | N\nsearch | Boolean / Object / Array | false | 搜索框配置，值为 false 表示不显示搜索框；值为 true 表示显示默认搜索框；值类型为对象，用于透传 Props 到 Input 组件；值类型为数组，则分别表示控制两侧搜索框。TS 类型：`SearchOption \\| Array<SearchOption>` `type SearchOption = boolean \\| InputProps`，[Input API Documents](./input?tab=api)。[详细类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/transfer/type.ts) | N\nshowCheckAll | Boolean / Array | true | 是否显示全选，值类型为数组则表示分别控制源列表和目标列表。TS 类型：`boolean \\| Array<boolean>` | N\ntargetDraggable | Boolean | false | 是否允许通过拖拽对目标列表进行排序 | N\ntargetSort | String | original | 目标数据列表排列顺序。可选项：original/push/unshift | N\ntitle | Array / Slot / Function | [] | 穿梭框标题，示例：['源列表', '目标列表'] 或者 `[() => 'A', () => 'B']` 或者 `({ type }) => type === 'source' ? '源' : '目标'`。TS 类型：`Array<TitleType> \\| TNode<{ type: TransferListType }>` `type TitleType = string \\| TNode` `type TransferListType = 'source' \\| 'target'`。[通用类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/common.ts)。[详细类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/transfer/type.ts) | N\ntransferItem | Slot / Function | - | 自定义渲染节点。TS 类型：`TNode<TransferItem<T>>` `interface TransferItem<T extends DataOption = DataOption> { data: T; index: number; type: TransferListType}`。[通用类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/common.ts)。[详细类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/transfer/type.ts) | N\ntree | Slot / Function | 传入 Tree 组件定义树形结构 | TS 类型：`(tree: TreeProps) => TNode`，[Tree API Documents](./tree?tab=api)。[通用类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/common.ts)。[详细类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/transfer/type.ts) | N\nvalue | Array | [] | 目标数据列表数据。支持语法糖 `v-model` 或 `v-model:value`。TS 类型：`Array<TransferValue>` | N\ndefaultValue | Array | [] | 目标数据列表数据。非受控属性。TS 类型：`Array<TransferValue>` | N\nonChange | Function |  | TS 类型：`(targetValue: Array<TransferValue>, context: TargetParams) => void`<br/>数据列表发生变化时触发，`type` 值为 `source`，表示源列表移动到目标列表，值为 `target` 表示目标列表移动到源列表，movedValue 则表示被移动的选项。TS 类型：`TNode`。[通用类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/common.ts)。[详细类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/transfer/type.ts)。<br/>`interface TargetParams { type: TransferListType; movedValue: Array<TransferValue> }`<br/> | N\nonCheckedChange | Function |  | TS 类型：`(options: CheckedOptions) => void`<br/>源数据列表或目标数据列表的选中项发生变化时触发，`context.type` 可以区分触发来源是目标列表，还是源列表。TS 类型：`TNode`。[通用类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/common.ts)。[详细类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/transfer/type.ts)。<br/>`interface CheckedOptions { checked: Array<TransferValue>; sourceChecked: Array<TransferValue>; targetChecked: Array<TransferValue>; type: TransferListType }`<br/> | N\nonPageChange | Function |  | TS 类型：`(page: PageInfo, context: { type: TransferListType }) => void`<br/>分页发生变化时触发 | N\nonScroll | Function |  | TS 类型：`(options: { e: Event; bottomDistance: number; type: TransferListType }) => void`<br/>列表滚动时触发，bottomDistance 表示元素滚动到底部的距离。TS 类型：`TNode`。[通用类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/common.ts) | N\nonSearch | Function |  | TS 类型：`(options: SearchContext) => void`<br/>搜索时触发，options.query 表示用户输入的内容。TS 类型：`TNode`。[通用类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/common.ts)。[详细类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/transfer/type.ts)。<br/>`interface SearchContext { query: string; type: TransferListType; trigger: 'input' \\| 'enter';  e: InputEvent \\| KeyboardEvent }`<br/> | N\n\n### Transfer Events\n\n名称 | 参数 | 描述\n-- | -- | --\nchange | `(targetValue: Array<TransferValue>, context: TargetParams)` | 数据列表发生变化时触发，`type` 值为 `source`，表示源列表移动到目标列表，值为 `target` 表示目标列表移动到源列表，movedValue 则表示被移动的选项。TS 类型：`TNode`。[通用类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/common.ts)。[详细类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/transfer/type.ts)。<br/>`interface TargetParams { type: TransferListType; movedValue: Array<TransferValue> }`<br/>\nchecked-change | `(options: CheckedOptions)` | 源数据列表或目标数据列表的选中项发生变化时触发，`context.type` 可以区分触发来源是目标列表，还是源列表。TS 类型：`TNode`。[通用类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/common.ts)。[详细类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/transfer/type.ts)。<br/>`interface CheckedOptions { checked: Array<TransferValue>; sourceChecked: Array<TransferValue>; targetChecked: Array<TransferValue>; type: TransferListType }`<br/>\npage-change | `(page: PageInfo, context: { type: TransferListType })` | 分页发生变化时触发\nscroll | `(options: { e: Event; bottomDistance: number; type: TransferListType })` | 列表滚动时触发，bottomDistance 表示元素滚动到底部的距离。TS 类型：`TNode`。[通用类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/common.ts)\nsearch | `(options: SearchContext)` | 搜索时触发，options.query 表示用户输入的内容。TS 类型：`TNode`。[通用类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/common.ts)。[详细类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/transfer/type.ts)。<br/>`interface SearchContext { query: string; type: TransferListType; trigger: 'input' \\| 'enter';  e: InputEvent \\| KeyboardEvent }`<br/>\n"
  },
  {
    "name": "tree",
    "propsData": ":: BASE_DOC ::\n\n## API\n\n### Tree Props\n\n名称 | 类型 | 默认值 | 描述 | 必传\n-- | -- | -- | -- | --\nactivable | Boolean | false | 节点是否可高亮 | N\nactiveMultiple | Boolean | false | 是否允许多个节点同时高亮 | N\nactived | Array | - | 高亮的节点值。支持语法糖 `v-model:actived`。TS 类型：`Array<TreeNodeValue>` | N\nallowDrop | Function | - | 判断节点是否可以执行 drop 操作，泛型 `T` 表示树节点 TS 类型。TS 类型：`(context: { e: DragEvent; dragNode: TreeNodeModel<T>; dropNode: TreeNodeModel<T>; dropPosition: number; }) => boolean` | N\nallowFoldNodeOnFilter | Boolean | false | 是否允许在过滤时节点折叠节点 | N\ncheckProps | Object | - | 透传属性到 checkbox 组件。参考 checkbox 组件 API。TS 类型：`CheckboxProps`，[Checkbox API Documents](./checkbox?tab=api)。[详细类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/tree/type.ts) | N\ncheckStrictly | Boolean | false | 父子节点选中状态不再关联，可各自选中或取消 | N\ncheckable | Boolean | false | 隐藏节点复选框 | N\ndata | Array | [] | 树数据，泛型 `T` 表示树节点 TS 类型。TS 类型：`Array<T>` | N\ndisableCheck | Boolean / Function | false | 禁用复选框，可支持禁用不同的行。TS 类型：`boolean \\| ((node: TreeNodeModel<T>) => boolean)` | N\ndisabled | Boolean | - | 是否禁用树操作 | N\ndraggable | Boolean | - | 节点是否可拖拽 | N\nempty | String / Slot / Function | '' | 数据为空时展示的文本。TS 类型：`string \\| TNode`。[通用类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/common.ts) | N\nexpandAll | Boolean | false | 是否展开全部节点 | N\nexpandLevel | Number | 0 | 默认展开的级别，第一层为 0 | N\nexpandMutex | Boolean | false | 同级别展开互斥，手风琴效果 | N\nexpandOnClickNode | Boolean | false | 是否支持点击节点也能展开收起 | N\nexpandParent | Boolean | false | 展开子节点时是否自动展开父节点 | N\nexpanded | Array | [] | 展开的节点值。支持语法糖 `v-model:expanded`。TS 类型：`Array<TreeNodeValue>` | N\nfilter | Function | - | 节点过滤方法，只呈现返回值为 true 的节点，泛型 `T` 表示树节点 TS 类型。TS 类型：`(node: TreeNodeModel<T>) => boolean` | N\nheight | String / Number | - | 树的高度，超出后会出现滚动条。示例：100,  '30%',  '300'。值为数字类型，会自动加上单位 px。如果不是绝对固定树的高度，建议使用 `maxHeight` | N\nhover | Boolean | - | 节点是否有悬浮状态 | N\nicon | Boolean / Slot / Function | true | 节点图标，可自定义。TS 类型：`boolean \\| TNode<TreeNodeModel<T>>`。[通用类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/common.ts) | N\nkeys | Object | - | 用来定义 `value / label / disabled / children` 在 `data` 数据中对应的字段别名，示例：`{ value: 'key', label 'name', children: 'list' }`。TS 类型：`TreeKeysType`。[通用类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/common.ts) | N\nlabel | String / Boolean / Slot / Function | true | 自定义节点内容，值为 `false` 不显示，值为 `true` 显示默认 label，值为字符串直接输出该字符串。泛型 `T` 表示树节点 TS 类型。<br/>如果期望只有点击复选框才选中，而点击节点不选中，可以使用 `label` 自定义节点，然后加上点击事件 `e.preventDefault()`，通过调整自定义节点的宽度和高度决定禁止点击选中的范围。TS 类型：`string \\| boolean \\| TNode<TreeNodeModel<T>>`。[通用类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/common.ts) | N\nlazy | Boolean | true | 延迟加载 children 为 true 的节点的子节点数据，即使 expandAll 被设置为 true，也同样延迟加载 | N\nline | Boolean / Slot / Function | false | 连接线。值为 false 不显示连接线；值为 true 显示默认连接线；值类型为 Function 表示自定义连接线。TS 类型：`boolean \\| TNode`。[通用类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/common.ts) | N\nload | Function | - | 加载子数据的方法，在展开节点时调用（仅当节点 children 为 true 时生效），泛型 `T` 表示树节点 TS 类型。TS 类型：`(node: TreeNodeModel<T>) => Promise<Array<T>>` | N\nmaxHeight | String / Number | - | 树的最大高度，超出后会出现滚动条。示例：100, '30%', '300'。值为数字类型，会自动加上单位 px | N\noperations | Slot / Function | - | 自定义节点操作项，泛型 `T` 表示树节点 TS 类型。TS 类型：`TNode<TreeNodeModel<T>>`。[通用类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/common.ts) | N\nscroll | Object | - | 懒加载和虚拟滚动。为保证组件收益最大化，当数据量小于阈值 `scroll.threshold` 时，无论虚拟滚动的配置是否存在，组件内部都不会开启虚拟滚动，`scroll.threshold` 默认为 `100`。TS 类型：`TScroll`。[通用类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/common.ts) | N\ntransition | Boolean | true | 节点展开折叠时是否使用过渡动画 | N\nvalue | Array | [] | 选中值，组件为可选状态时有效。支持语法糖 `v-model` 或 `v-model:value`。TS 类型：`Array<TreeNodeValue>` `type TreeNodeValue = string \\| number`。[详细类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/tree/type.ts) | N\ndefaultValue | Array | [] | 选中值，组件为可选状态时有效。非受控属性。TS 类型：`Array<TreeNodeValue>` `type TreeNodeValue = string \\| number`。[详细类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/tree/type.ts) | N\nvalueMode | String | onlyLeaf | 选中值模式。all 表示父节点和子节点全部会出现在选中值里面；parentFirst 表示当子节点全部选中时，仅父节点在选中值里面；onlyLeaf 表示无论什么情况，选中值仅呈现叶子节点。可选项：onlyLeaf/parentFirst/all | N\nonActive | Function |  | TS 类型：`(value: Array<TreeNodeValue>, context: { node: TreeNodeModel<T>; e?: MouseEvent; trigger: 'node-click' \\| 'setItem' }) => void`<br/>节点激活时触发，泛型 `T` 表示树节点 TS 类型 | N\nonChange | Function |  | TS 类型：`(value: Array<TreeNodeValue>, context: { node: TreeNodeModel<T>; e?: any; trigger: 'node-click' \\| 'setItem' }) => void`<br/>节点选中状态变化时触发，context.node 表示当前变化的选项，泛型 `T` 表示树节点 TS 类型 | N\nonClick | Function |  | TS 类型：`(context: { node: TreeNodeModel<T>; e: MouseEvent }) => void`<br/>节点点击时触发，泛型 `T` 表示树节点 TS 类型 | N\nonDragEnd | Function |  | TS 类型：`(context: { e: DragEvent; node: TreeNodeModel<T> }) => void`<br/>节点结束拖拽时触发，泛型 `T` 表示树节点 TS 类型 | N\nonDragLeave | Function |  | TS 类型：`(context: { e: DragEvent; node: TreeNodeModel<T> }) => void`<br/>节点拖拽时离开目标元素时触发，泛型 `T` 表示树节点 TS 类型 | N\nonDragOver | Function |  | TS 类型：`(context: { e: DragEvent; node: TreeNodeModel<T> }) => void`<br/>节点拖拽到目标元素时触发，泛型 `T` 表示树节点 TS 类型 | N\nonDragStart | Function |  | TS 类型：`(context: { e: DragEvent; node: TreeNodeModel<T> }) => void`<br/>节点开始拖拽时触发，泛型 `T` 表示树节点 TS 类型 | N\nonDrop | Function |  | TS 类型：`(context: {     e: DragEvent;     dragNode: TreeNodeModel<T>;     dropNode: TreeNodeModel<T>;     dropPosition: number;   }) => void`<br/>节点在目标元素上释放时触发，泛型 `T` 表示树节点 TS 类型 | N\nonExpand | Function |  | TS 类型：`(value: Array<TreeNodeValue>, context: { node: TreeNodeModel<T>; e?: MouseEvent; trigger: 'node-click' \\| 'icon-click' \\| 'setItem' }) => void`<br/>节点展开或收起时触发，泛型 `T` 表示树节点 TS 类型 | N\nonLoad | Function |  | TS 类型：`(context: { node: TreeNodeModel<T> }) => void`<br/>异步加载后触发，泛型 `T` 表示树节点 TS 类型 | N\nonScroll | Function |  | TS 类型：`(params: { e: WheelEvent }) => void`<br/>滚动事件 | N\n\n### Tree Events\n\n名称 | 参数 | 描述\n-- | -- | --\nactive | `(value: Array<TreeNodeValue>, context: { node: TreeNodeModel<T>; e?: MouseEvent; trigger: 'node-click' \\| 'setItem' })` | 节点激活时触发，泛型 `T` 表示树节点 TS 类型\nchange | `(value: Array<TreeNodeValue>, context: { node: TreeNodeModel<T>; e?: any; trigger: 'node-click' \\| 'setItem' })` | 节点选中状态变化时触发，context.node 表示当前变化的选项，泛型 `T` 表示树节点 TS 类型\nclick | `(context: { node: TreeNodeModel<T>; e: MouseEvent })` | 节点点击时触发，泛型 `T` 表示树节点 TS 类型\ndrag-end | `(context: { e: DragEvent; node: TreeNodeModel<T> })` | 节点结束拖拽时触发，泛型 `T` 表示树节点 TS 类型\ndrag-leave | `(context: { e: DragEvent; node: TreeNodeModel<T> })` | 节点拖拽时离开目标元素时触发，泛型 `T` 表示树节点 TS 类型\ndrag-over | `(context: { e: DragEvent; node: TreeNodeModel<T> })` | 节点拖拽到目标元素时触发，泛型 `T` 表示树节点 TS 类型\ndrag-start | `(context: { e: DragEvent; node: TreeNodeModel<T> })` | 节点开始拖拽时触发，泛型 `T` 表示树节点 TS 类型\ndrop | `(context: {     e: DragEvent;     dragNode: TreeNodeModel<T>;     dropNode: TreeNodeModel<T>;     dropPosition: number;   })` | 节点在目标元素上释放时触发，泛型 `T` 表示树节点 TS 类型\nexpand | `(value: Array<TreeNodeValue>, context: { node: TreeNodeModel<T>; e?: MouseEvent; trigger: 'node-click' \\| 'icon-click' \\| 'setItem' })` | 节点展开或收起时触发，泛型 `T` 表示树节点 TS 类型\nload | `(context: { node: TreeNodeModel<T> })` | 异步加载后触发，泛型 `T` 表示树节点 TS 类型\nscroll | `(params: { e: WheelEvent })` | 滚动事件\n\n### TreeInstanceFunctions 组件实例方法\n\n名称 | 参数 | 返回值 | 描述\n-- | -- | -- | --\nappendTo | `(value: TreeNodeValue, newData: T \\| Array<T>)` | \\- | 必需。为指定节点添加子节点，默认添加到根节点，泛型 `T` 表示树节点 TS 类型\ngetIndex | `(value: TreeNodeValue)` | `number` | 必需。获取指定节点下标\ngetItem | `(value: TreeNodeValue)` | `TreeNodeModel<T>` | 必需。获取指定节点所有信息，泛型 `T` 表示树节点 TS 类型\ngetItems | `(value?: TreeNodeValue)` | `Array<TreeNodeModel<T>>` | 必需。获取某节点的全部子孙节点；参数为空，则表示获取整棵树的全部节点，泛型 `T` 表示树节点 TS 类型\ngetParent | `(value: TreeNodeValue)` | `TreeNodeModel<T>` | 必需。获取指定节点的直属父节点，泛型 `T` 表示树节点 TS 类型\ngetParents | `(value: TreeNodeValue)` | `TreeNodeModel<T>[]` | 必需。获取指定节点的全部父节点，泛型 `T` 表示树节点 TS 类型\ngetPath | `(value: TreeNodeValue)` | `TreeNodeModel<T>[]` | 必需。自下而上获取全路径数据，泛型 `T` 表示树节点 TS 类型\ngetTreeData | `(value?: TreeNodeValue)` | `Array<T>` | 必需。获取某节点的全部树形结构；参数为空，则表示获取整棵树的结构数据，泛型 `T` 表示树节点 TS 类型\ninsertAfter | `(value: TreeNodeValue, newData: T)` | \\- | 必需。插入新节点到指定节点后面，泛型 `T` 表示树节点 TS 类型\ninsertBefore | `(value: TreeNodeValue, newData: T)` | \\- | 必需。插入新节点到指定节点前面，泛型 `T` 表示树节点 TS 类型\nrefresh | \\- | \\- | 必需。刷新树节点状态，可用于搜索场景刷新\nremove | `(value: TreeNodeValue)` | \\- | 必需。移除指定节点\nscrollTo | `(scrollToParams: ComponentScrollToElementParams)` | \\- | 虚拟滚动场景下 支持指定滚动到具体的节点\nsetItem | `(value: TreeNodeValue, options: TreeNodeState)` | \\- | 必需。设置节点状态\n\n### TreeNodeState\n\n名称 | 类型 | 默认值 | 描述 | 必传\n-- | -- | -- | -- | --\nactivable | Boolean | false | 节点是否允许被激活 | N\nactived | Boolean | false | 节点是否被激活 | N\ncheckable | Boolean | false | 节点是否允许被选中 | N\nchecked | Boolean | false | 节点是否被选中 | N\ndisabled | Boolean | false | 节点是否被禁用 | N\ndraggable | Boolean | true | 该节点是否允许被拖动，当树本身开启时，默认允许 | N\nexpandMutex | Boolean | false | 子节点是否互斥展开 | N\nexpanded | Boolean | false | 节点是否已展开 | N\nindeterminate | Boolean | false | 节点是否为半选中状态 | N\nlabel | String | - | 节点标签文案 | N\nloading | Boolean | false | 子节点数据是否在加载中 | N\nvalue | String / Number | - | 节点值 | N\nvisible | Boolean | false | 节点是否可视 | N\n\n### TreeNodeModel\n\n名称 | 类型 | 默认值 | 描述 | 必传\n-- | -- | -- | -- | --\nactived | Boolean | - | 必需。当前节点是否处于高亮激活态 | Y\nchecked | Boolean | - | 必需。当前节点是否被选中 | Y\ndata | Object | - | 必需。节点数据，泛型 `T` 表示树节点 TS 类型，继承 `TreeOptionData`。TS 类型：`T` | Y\ndisabled | Boolean | - | 必需。禁用状态 | Y\nexpanded | Boolean | - | 必需。当前节点是否展开 | Y\nindeterminate | Boolean | - | 必需。当前节点是否处于半选状态 | Y\nloading | Boolean | - | 必需。当前节点是否处于加载中状态 | Y\n`TreeNodeState` | \\- | - | 继承 `TreeNodeState` 中的全部属性 | N\n### TreeNodeModel\n\n名称 | 参数 | 返回值 | 描述\n-- | -- | -- | --\nappendData | `(data: T \\| Array<T>)` | \\- | 必需。追加子节点数据，泛型 `T` 表示树节点 TS 类型，继承 `TreeOptionData`\ngetChildren | `(deep: boolean)` | `Array<TreeNodeModel<T>> \\| boolean` | 必需。默认获取当前节点的全部子节点，deep 值为 true 则表示获取全部子孙节点\ngetIndex | \\- | `number` | 必需。获取节点在父节点的子节点列表中的位置，如果没有父节点，则获取节点在根节点列表的位置\ngetLevel | \\- | `number` | 必需。获取节点所在的层级\ngetParent | \\- | `TreeNodeModel<T>` | 必需。获取单个父节点\ngetParents | \\- | `Array<TreeNodeModel<T>>` | 必需。获取所有父节点\ngetPath | \\- | `Array<TreeNodeModel<T>>` | 必需。获取节点全路径\ngetRoot | \\- | `TreeNodeModel<T>` | 必需。获取根节点\ngetSiblings | \\- | `Array<TreeNodeModel<T>>` | 必需。获取兄弟节点，包含自己在内\ninsertAfter | `(newData: T)` | \\- | 必需。在当前节点前插入新节点，泛型 `T` 表示树节点 TS 类型\ninsertBefore | `(newData: T)` | \\- | 必需。在当前节点前插入新节点，泛型 `T` 表示树节点 TS 类型\nisFirst | \\- | `boolean` | 必需。是否为兄弟节点中的第一个节点\nisLast | \\- | `boolean` | 必需。是否为兄弟节点中的最后一个节点\nisLeaf | \\- | `boolean` | 必需。是否为叶子节点\nremove | `(value?: TreeNodeValue)` | \\- | 必需。移除当前节点或当前节点的子节点，值为空则移除当前节点，值存在则移除当前节点的子节点\nsetData | `(data: T)` | \\- | 必需。设置节点数据，数据变化可自动刷新页面，泛型 `T` 表示树节点 TS 类型，继承 `TreeOptionData`\n\n### TScroll\n\n名称 | 类型 | 默认值 | 描述 | 必传\n-- | -- | -- | -- | --\nbufferSize | Number | 20 | 表示除可视区域外，额外渲染的行数，避免快速滚动过程中，新出现的内容来不及渲染从而出现空白 | N\nisFixedRowHeight | Boolean | false | 表示每行内容是否同一个固定高度，仅在 `scroll.type` 为 `virtual` 时有效，该属性设置为 `true` 时，可用于简化虚拟滚动内部计算逻辑，提升性能，此时则需要明确指定 `scroll.rowHeight` 属性的值 | N\nrowHeight | Number | - | 行高，不会给`<tr>`元素添加样式高度，仅作为滚动时的行高参考。一般情况不需要设置该属性。如果设置，可尽量将该属性设置为每行平均高度，从而使得滚动过程更加平滑 | N\nthreshold | Number | 100 | 启动虚拟滚动的阈值。为保证组件收益最大化，当数据量小于阈值 `scroll.threshold` 时，无论虚拟滚动的配置是否存在，组件内部都不会开启虚拟滚动 | N\ntype | String | - | 必需。滚动加载类型，有两种：懒加载和虚拟滚动。<br />值为 `lazy` ，表示滚动时会进行懒加载，非可视区域内的内容将不会默认渲染，直到该内容可见时，才会进行渲染，并且已渲染的内容滚动到不可见时，不会被销毁；<br />值为`virtual`时，表示会进行虚拟滚动，无论滚动条滚动到哪个位置，同一时刻，仅渲染该可视区域内的内容，当需要展示的数据量较大时，建议开启该特性。可选项：lazy/virtual | Y\n"
  },
  {
    "name": "tree-select",
    "propsData": ":: BASE_DOC ::\n\n## API\n\n### TreeSelect Props\n\n名称 | 类型 | 默认值 | 描述 | 必传\n-- | -- | -- | -- | --\nautoWidth | Boolean | false | 宽度随内容自适应 | N\nautofocus | Boolean | false | 自动聚焦 | N\nborderless | Boolean | false | 无边框模式 | N\nclearable | Boolean | false | 是否允许清空 | N\ncollapsedItems | Slot / Function | - | 多选情况下，用于设置折叠项内容，默认为 `+N`。如果需要悬浮就显示其他内容，可以使用 collapsedItems 自定义。`value` 表示当前存在的所有标签，`collapsedSelectedItems` 表示折叠的标签，`count` 表示折叠的数量，`onClose` 表示移除标签的事件回调。TS 类型：`TNode<{ value: DataOption[]; collapsedSelectedItems: DataOption[]; count: number; onClose: (context: { index: number, e?: MouseEvent }) => void }>`。[通用类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/common.ts) | N\ndata | Array | [] | 树选择的数据列表。结构：`[{ label: TNode, value: string \\| number, text: string, ... }]`，其中 `label` 表示选项呈现的内容，可自定义；`value` 表示选项的唯一值；表示当 `label` 用于选项复杂内容呈现时，`text` 用于搜索功能。<br />其中 `label` 和 `value` 可以使用 `keys` 属性定义别名。TS 类型：`Array<DataOption>` | N\ndisabled | Boolean | undefined | 是否禁用组件 | N\nempty | String / Slot / Function | - | 当下拉列表为空时显示的内容。TS 类型：`string \\| TNode`。[通用类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/common.ts) | N\nfilter | Function | - | 过滤方法，用于对现有数据进行搜索过滤，判断是否过滤某一项数据。TS 类型：`(filterWords: string, option: DataOption) => boolean` | N\nfilterable | Boolean | false | 是否可搜索 | N\ninputProps | Object | - | 透传给 输入框 Input 组件的全部属性。TS 类型：`InputProps`，[Input API Documents](./input?tab=api)。[详细类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/tree-select/type.ts) | N\ninputValue | String / Number | - | 输入框的值。支持语法糖 `v-model:inputValue`。TS 类型：`string`，[Input API Documents](./input?tab=api)。[详细类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/tree-select/type.ts) | N\ndefaultInputValue | String / Number | - | 输入框的值。非受控属性。TS 类型：`string`，[Input API Documents](./input?tab=api)。[详细类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/tree-select/type.ts) | N\nkeys | Object | - | 用来定义 `value / label / disabled / children` 在 `data` 数据中对应的字段别名，示例：`{ value: 'key', label: 'name', children: 'list' }`。TS 类型：`TreeKeysType`。[通用类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/common.ts) | N\nlabel | String / Slot / Function | - | 左侧文本。TS 类型：`string \\| TNode`。[通用类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/common.ts) | N\nloading | Boolean | false | 是否正在加载数据 | N\nloadingText | String / Slot / Function | - | 远程加载时显示的文字，支持自定义。如加上超链接。TS 类型：`string \\| TNode`。[通用类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/common.ts) | N\nmax | Number | 0 | 用于控制多选数量，值为 0 则不限制 | N\nminCollapsedNum | Number | 0 | 最小折叠数量，用于多选情况下折叠选中项，超出该数值的选中项折叠。值为 0 则表示不折叠 | N\nmultiple | Boolean | false | 是否允许多选 | N\npanelBottomContent | String / Slot / Function | - | 面板内的底部内容。TS 类型：`string \\| TNode`。[通用类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/common.ts) | N\npanelTopContent | String / Slot / Function | - | 面板内的顶部内容。TS 类型：`string \\| TNode`。[通用类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/common.ts) | N\nplaceholder | String | undefined | 占位符 | N\npopupProps | Object | - | 透传给 popup 组件的全部属性。TS 类型：`PopupProps`，[Popup API Documents](./popup?tab=api)。[详细类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/tree-select/type.ts) | N\npopupVisible | Boolean | undefined | 是否显示下拉框。支持语法糖 `v-model:popupVisible` | N\ndefaultPopupVisible | Boolean | undefined | 是否显示下拉框。非受控属性 | N\nprefixIcon | Slot / Function | - | 组件前置图标。TS 类型：`TNode`。[通用类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/common.ts) | N\nreadonly | Boolean | undefined | 只读状态，值为真会隐藏输入框，且无法打开下拉框 | N\nreserveKeyword | Boolean | false | 多选且可搜索时，是否在选中一个选项后保留当前的搜索关键词 | N\nselectInputProps | Object | - | 【开发中】透传 SelectInput 筛选器输入框组件的全部属性。TS 类型：`SelectInputProps`，[SelectInput API Documents](./select-input?tab=api)。[详细类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/tree-select/type.ts) | N\nsize | String | medium | 尺寸。可选项：small/medium/large | N\nstatus | String | default | 输入框状态。可选项：default/success/warning/error | N\nsuffix | String / Slot / Function | - | 后置图标前的后置内容。TS 类型：`string \\| TNode`。[通用类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/common.ts) | N\nsuffixIcon | Slot / Function | - | 组件后置图标。TS 类型：`TNode`。[通用类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/common.ts) | N\ntagProps | Object | - | 透传 Tag 标签组件全部属性。TS 类型：`TagProps`，[Tag API Documents](./tag?tab=api)。[详细类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/tree-select/type.ts) | N\ntips | String / Slot / Function | - | 输入框下方提示文本，会根据不同的 `status` 呈现不同的样式。TS 类型：`string \\| TNode`。[通用类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/common.ts) | N\ntreeProps | Object | - | 透传 Tree 组件的全部属性。TS 类型：`TreeProps`，[Tree API Documents](./tree?tab=api)。[通用类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/common.ts)。[详细类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/tree-select/type.ts) | N\nvalue | String / Number / Object / Array | - | 选中值，泛型 `TreeValueType` 继承自 `TreeSelectValue`。支持语法糖 `v-model` 或 `v-model:value`。TS 类型：`TreeValueType` `type TreeSelectValue = string \\| number \\| TreeOptionData \\| Array<string \\| number \\| TreeOptionData>`。[通用类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/common.ts)。[详细类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/tree-select/type.ts) | N\ndefaultValue | String / Number / Object / Array | - | 选中值，泛型 `TreeValueType` 继承自 `TreeSelectValue`。非受控属性。TS 类型：`TreeValueType` `type TreeSelectValue = string \\| number \\| TreeOptionData \\| Array<string \\| number \\| TreeOptionData>`。[通用类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/common.ts)。[详细类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/tree-select/type.ts) | N\nvalueDisplay | Slot / Function | - | 自定义选中项呈现方式。TS 类型：`string \\| TNode<{ value: TreeOptionData \\| TreeOptionData[]; onClose: (index: number) => void }>`。[通用类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/common.ts) | N\nvalueType | String | value | 用于控制选中值的类型。假设数据选项为：`[{ label: '姓名', value: 'name' }]`，value 表示值仅返回数据选项中的 value， object 表示值返回全部数据。可选项：value/object | N\nonBlur | Function |  | TS 类型：`(context: SelectInputBlurContext & { value: TreeSelectValue }) => void`<br/>输入框失去焦点时触发 | N\nonChange | Function |  | TS 类型：`(value: TreeValueType, context: TreeSelectChangeContext<DataOption>) => void`<br/>节点选中状态变化时触发，`context.node` 表示当前变化的选项，`context. trigger` 表示触发变化的来源。泛型 `TreeValueType` 继承自 `TreeSelectValue` 。[详细类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/tree-select/type.ts)。<br/>`interface TreeSelectChangeContext<DataOption> { node: TreeNodeModel<DataOption>; data: DataOption; index?: number; trigger: TreeSelectValueChangeTrigger; e?: MouseEvent \\| KeyboardEvent \\| Event }`<br/><br/>`type TreeSelectValueChangeTrigger = 'clear' \\| 'tag-remove' \\| 'backspace' \\| 'check' \\| 'uncheck'`<br/> | N\nonClear | Function |  | TS 类型：`(context: { e: MouseEvent }) => void`<br/>点击清除按钮时触发 | N\nonEnter | Function |  | TS 类型：`(context: { inputValue: string; e: KeyboardEvent; value: TreeValueType }) => void`<br/>回车键按下时触发。`inputValue` 表示输入框的值，`value` 表示选中值。泛型 `TreeValueType` 继承 `TreeSelectValue` | N\nonFocus | Function |  | TS 类型：`(context: { value: TreeSelectValue; e: FocusEvent }) => void`<br/>输入框获得焦点时触发 | N\nonInputChange | Function |  | TS 类型：`(value: string, context: SelectInputValueChangeContext) => void`<br/>输入框值发生变化时触发，`context.trigger` 表示触发输入框值变化的来源：文本输入触发、清除按钮触发、失去焦点等 | N\nonPopupVisibleChange | Function |  | TS 类型：`(visible: boolean, context: TreeSelectPopupVisibleContext<DataOption>) => void`<br/>下拉框显示或隐藏时触发。单选场景，选中某个选项时触发关闭，此时需要添加参数 `node`。[详细类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/tree-select/type.ts)。<br/>`import { PopupVisibleChangeContext, PopupTriggerEvent, PopupTriggerSource } from '@Popup'`<br/><br/>`interface TreeSelectPopupVisibleContext<T> {   e?: PopupTriggerEvent \\| Event;   node?: TreeNodeModel<T>;   trigger?: PopupTriggerSource \\| 'clear'; }`<br/> | N\nonRemove | Function |  | TS 类型：`(options: RemoveOptions<DataOption, TreeValueType>) => void`<br/>多选模式下，选中数据被移除时触发。[详细类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/tree-select/type.ts)。<br/>`export interface RemoveOptions<T extends TreeOptionData = TreeOptionData, N extends TreeSelectValue = TreeSelectValue> {   value: N;   data: T;  index: number; node: TreeNodeModel<T>;   e?: MouseEvent \\| KeyboardEvent;   trigger: 'tag-remove' \\| 'backspace'; }`<br/> | N\nonSearch | Function |  | TS 类型：`(filterWords: string, context: { e: KeyboardEvent \\| SelectInputValueChangeContext['e'] }) => void`<br/>输入值变化时，触发搜索事件。主要用于远程搜索新数据。设置 `filterable=true` 开启此功能。优先级高于本地数据搜索 `filter`，即一旦存在这个远程搜索事件 `filter` 失效 | N\n\n### TreeSelect Events\n\n名称 | 参数 | 描述\n-- | -- | --\nblur | `(context: SelectInputBlurContext & { value: TreeSelectValue })` | 输入框失去焦点时触发\nchange | `(value: TreeValueType, context: TreeSelectChangeContext<DataOption>)` | 节点选中状态变化时触发，`context.node` 表示当前变化的选项，`context. trigger` 表示触发变化的来源。泛型 `TreeValueType` 继承自 `TreeSelectValue` 。[详细类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/tree-select/type.ts)。<br/>`interface TreeSelectChangeContext<DataOption> { node: TreeNodeModel<DataOption>; data: DataOption; index?: number; trigger: TreeSelectValueChangeTrigger; e?: MouseEvent \\| KeyboardEvent \\| Event }`<br/><br/>`type TreeSelectValueChangeTrigger = 'clear' \\| 'tag-remove' \\| 'backspace' \\| 'check' \\| 'uncheck'`<br/>\nclear | `(context: { e: MouseEvent })` | 点击清除按钮时触发\nenter | `(context: { inputValue: string; e: KeyboardEvent; value: TreeValueType })` | 回车键按下时触发。`inputValue` 表示输入框的值，`value` 表示选中值。泛型 `TreeValueType` 继承 `TreeSelectValue`\nfocus | `(context: { value: TreeSelectValue; e: FocusEvent })` | 输入框获得焦点时触发\ninput-change | `(value: string, context: SelectInputValueChangeContext)` | 输入框值发生变化时触发，`context.trigger` 表示触发输入框值变化的来源：文本输入触发、清除按钮触发、失去焦点等\npopup-visible-change | `(visible: boolean, context: TreeSelectPopupVisibleContext<DataOption>)` | 下拉框显示或隐藏时触发。单选场景，选中某个选项时触发关闭，此时需要添加参数 `node`。[详细类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/tree-select/type.ts)。<br/>`import { PopupVisibleChangeContext, PopupTriggerEvent, PopupTriggerSource } from '@Popup'`<br/><br/>`interface TreeSelectPopupVisibleContext<T> {   e?: PopupTriggerEvent \\| Event;   node?: TreeNodeModel<T>;   trigger?: PopupTriggerSource \\| 'clear'; }`<br/>\nremove | `(options: RemoveOptions<DataOption, TreeValueType>)` | 多选模式下，选中数据被移除时触发。[详细类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/tree-select/type.ts)。<br/>`export interface RemoveOptions<T extends TreeOptionData = TreeOptionData, N extends TreeSelectValue = TreeSelectValue> {   value: N;   data: T;  index: number; node: TreeNodeModel<T>;   e?: MouseEvent \\| KeyboardEvent;   trigger: 'tag-remove' \\| 'backspace'; }`<br/>\nsearch | `(filterWords: string, context: { e: KeyboardEvent \\| SelectInputValueChangeContext['e'] })` | 输入值变化时，触发搜索事件。主要用于远程搜索新数据。设置 `filterable=true` 开启此功能。优先级高于本地数据搜索 `filter`，即一旦存在这个远程搜索事件 `filter` 失效\n"
  },
  {
    "name": "typography",
    "propsData": ":: BASE_DOC ::\n\n## API\n\n### Text Props\n\n名称 | 类型 | 默认值 | 描述 | 必传\n-- | -- | -- | -- | --\ncode | Boolean | false | 是否添加代码样式 | N\ncontent | String / Slot / Function | - | 文本内容。TS 类型：`string \\| TNode`。[通用类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/common.ts) | N\ncopyable | Boolean / Object | false | 是否可复制，可通过配置参数自定义复制操作的具体功能和样式。TS 类型：`boolean \\| TypographyCopyable` | N\ndefault | String / Slot / Function | - | 文本内容。TS 类型：`string \\| TNode`。[通用类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/common.ts) | N\ndelete | Boolean | false | 是否添加删除线样式 | N\ndisabled | Boolean | false | 是否添加不可用样式 | N\nellipsis | Boolean / Object | false | 是否省略展示，可通过配置参数自定义省略操作的具体功能和样式。TS 类型：`boolean \\| TypographyEllipsis` | N\nitalic | Boolean | false | 文本是否为斜体 | N\nkeyboard | Boolean | false | 是否添加键盘样式 | N\nmark | String / Boolean | false | 是否添加标记样式，默认为黄色，可通过配置颜色修改标记样式，如#0052D9 | N\nstrong | Boolean | false | 文本是否加粗 | N\ntheme | String | - | 主题。可选项：primary/secondary/success/warning/error | N\nunderline | Boolean | false | 是否添加下划线样式 | N\n\n\n### Title Props\n\n名称 | 类型 | 默认值 | 描述 | 必传\n-- | -- | -- | -- | --\ncontent | String / Slot / Function | - | 段落内容。TS 类型：`string \\| TNode`。[通用类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/common.ts) | N\ndefault | String / Slot / Function | - | 标题内容。TS 类型：`string \\| TNode`。[通用类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/common.ts) | N\nellipsis | Boolean / Object | false | 是否省略展示，可通过配置参数自定义省略操作的具体功能和样式。TS 类型：`boolean \\| TypographyEllipsis` | N\nlevel | String | h1 | 标题等级。可选项：h1/h2/h3/h4/h5/h6 | N\n\n\n### Paragraph Props\n\n名称 | 类型 | 默认值 | 描述 | 必传\n-- | -- | -- | -- | --\ncontent | String / Slot / Function | - | 段落内容。TS 类型：`string \\| TNode`。[通用类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/common.ts) | N\ndefault | String / Slot / Function | - | 段落内容。TS 类型：`string \\| TNode`。[通用类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/common.ts) | N\nellipsis | Boolean / Object | false | 是否省略展示，可通过配置参数自定义省略操作的具体功能和样式。TS 类型：`boolean \\| TypographyEllipsis` | N\n\n### TypographyEllipsis\n\n名称 | 类型 | 默认值 | 描述 | 必传\n-- | -- | -- | -- | --\ncollapsible | Boolean | true | 展开后是否可以重新收起 | N\nexpandable | Boolean | true | 是否可展开 | N\nrow | Number | 1 | 省略配置默认展示行数 | N\nsuffix | Slot / Function | - | 自定义省略触发元素，一般用于自定义折叠图标。TS 类型：`TNode<{ expanded: boolean }>`。[通用类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/common.ts) | N\ntooltipProps | Object | - | 光标在省略图标上出现的tooltip的配置。TS 类型：`tooltipProps`，[Tooltip API Documents](./tooltip?tab=api)。[详细类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/typography/type.ts) | N\nonExpand | Function |  | TS 类型：`(expanded:boolean) => void`<br/>点击省略按钮的回调 | N\n### TypographyEllipsis\n\n名称 | 参数 | 描述\n-- | -- | --\nexpand | `(expanded:boolean)` | 点击省略按钮的回调\n\n### TypographyCopyable\n\n名称 | 类型 | 默认值 | 描述 | 必传\n-- | -- | -- | -- | --\n text | String | - | 复制的文本内容，默认为全部文本 | N\nsuffix | Slot / Function | - | 自定义复制触发元素，一般用于自定义复制图标。TS 类型：`TNode<{ copied: boolean }>`。[通用类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/common.ts) | N\ntooltipProps | Object | - | 光标在复制图标上出现的tooltip的配置。TS 类型：`tooltipProps`，[Tooltip API Documents](./tooltip?tab=api)。[详细类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/typography/type.ts) | N\nonCopy | Function |  | TS 类型：`() => void`<br/>点击复制按钮的回调 | N\n### TypographyCopyable\n\n名称 | 参数 | 描述\n-- | -- | --\ncopy | \\- | 点击复制按钮的回调\n"
  },
  {
    "name": "upload",
    "propsData": ":: BASE_DOC ::\n\n## API\n### Upload Props\n\n名称 | 类型 | 默认值 | 说明 | 必传\n-- | -- | -- | -- | --\nabridgeName | Array | - | 文件名过长时，需要省略中间的文本，保留首尾文本。示例：[10, 7]，表示首尾分别保留的文本长度。TS 类型：`Array<number>` | N\naccept | String | - | 接受上传的文件类型，[查看 W3C示例](https://www.w3schools.com/tags/att_input_accept.asp)，[查看 MDN 示例](https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/Input/file) | N\naction | String | - | 上传接口。设接口响应数据为字段 `response`，那么 `response.error` 存在时会判断此次上传失败，并显示错误文本信息；`response.url` 会作为文件上传成功后的地址，并使用该地址显示图片或文件 | N\nallowUploadDuplicateFile | Boolean | false | 是否允许重复上传相同文件名的文件 | N\nautoUpload | Boolean | true | 是否在选择文件后自动发起请求上传文件 | N\nbeforeAllFilesUpload | Function | - | 如果是自动上传模式 `autoUpload=true`，表示全部文件上传之前的钩子函数，函数参数为上传的文件，函数返回值决定是否继续上传，若返回值为 `false` 则终止上传。<br/>如果是非自动上传模式 `autoUpload=false`，则函数返回值为 `false` 时表示本次选中的文件不会加入到文件列表中，即不触发 `onChange` 事件。TS 类型：`(file: UploadFile[]) => boolean \\| Promise<boolean>` | N\nbeforeUpload | Function | - | 如果是自动上传模式 `autoUpload=true`，表示单个文件上传之前的钩子函数，若函数返回值为 `false` 则表示不上传当前文件。<br/>如果是非自动上传模式 `autoUpload=false`，函数返回值为 `false` 时表示从上传文件中剔除当前文件。TS 类型：`(file: UploadFile) => boolean \\| Promise<boolean>` | N\ncancelUploadButton | Object / Slot / Function | - | 批量文件/图片上传，`autoUpload=false` 场景下，透传“取消上传”按钮属性。TS 类型：`null \\| ButtonProps \\| TNode<{ disabled: boolean; cancelUploadText: string; cancelUpload: (ctx: { e: MouseEvent }) => void }>`。[通用类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/common.ts) | N\ndata | Object / Function | - | 上传请求所需的额外字段，默认字段有 `file`，表示文件信息。可以添加额外的文件名字段，如：`{file_name: \"custom-file-name.txt\"}`。`autoUpload=true` 时有效。也可以使用 `formatRequest` 完全自定义上传请求的字段。TS 类型：`Record<string, any> \\| ((files: UploadFile[]) => Record<string, any>)` | N\ndefault | String / Slot / Function | - | 非拖拽场景，指触发上传的元素，如：“选择文件”。如果是拖拽场景，则是指拖拽区域。TS 类型：`string \\| TNode`。[通用类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/common.ts) | N\ndisabled | Boolean | - | 是否禁用 | N\ndragContent | String / Slot / Function | - | 用于自定义拖拽区域，`theme=custom` 且 `draggable=true` 时有效。TS 类型：`TNode \\| TNode<TriggerContext>`。[通用类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/common.ts) | N\ndraggable | Boolean | undefined | 是否启用拖拽上传，不同的组件风格默认值不同。`theme=file` 或 `theme=image` 时有效 | N\nfileListDisplay | Slot / Function | - | 用于完全自定义文件列表界面内容(UI)，单文件和多文件均有效。TS 类型：`TNode<{ files: UploadFile[]; dragEvents?: UploadDisplayDragEvents }>`。[通用类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/common.ts) | N\nfiles | Array | [] | 已上传文件列表，同 `value`。TS 类型：`UploadFile`。支持语法糖 `v-model:files`。TS 类型：`Array<T>` | N\ndefaultFiles | Array | [] | 已上传文件列表，同 `value`。TS 类型：`UploadFile`。非受控属性。TS 类型：`Array<T>` | N\nformat | Function | - | 转换文件 `UploadFile` 的数据结构，可新增或修改 `UploadFile` 的属性，注意不能删除 `UploadFile` 属性。`action` 存在时有效。TS 类型：`(file: File) => UploadFile` | N\nformatRequest | Function | - | 用于新增或修改文件上传请求 参数。`action` 存在时有效。一个请求上传一个文件时，默认请求字段有 `file`。<br/>一个请求上传多个文件时，默认字段有 `file[0]/file[1]/file[2]/.../length`，其中 `length` 表示本次上传的文件数量。<br/>⚠️非常注意，此处的 `file[0]/file[1]` 仅仅是一个字段名，并非表示 `file` 是一个数组，接口获取字段时注意区分。<br/>可以使用 `name` 定义 `file` 字段的别名。<br/>也可以使用 `formatRequest` 自定义任意字段，如添加一个字段 `fileList` ，存储文件数组。TS 类型：`(requestData: { [key: string]: any }) => { [key: string]: any }` | N\nformatResponse | Function | - | 用于格式化文件上传后的接口响应数据，`response` 便是接口响应的原始数据。`action` 存在时有效。<br/> 示例返回值：`{ error, url, status, files }` <br/> 此函数的返回值 `error` 会作为错误文本提醒，表示上传失败的原因，如果存在会判定为本次上传失败。<br/> 此函数的返回值 `url` 会作为单个文件上传成功后的链接。<br/> `files` 表示一个请求同时上传多个文件后的文件列表。TS 类型：`(response: any, context: FormatResponseContext) => ResponseType ` `type ResponseType = { error?: string; url?: string; status?: 'fail' \\| 'success'; files?: UploadFile[] } & Record<string, any>` `interface FormatResponseContext { file: UploadFile; currentFiles?: UploadFile[] }`。[详细类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/upload/type.ts) | N\nheaders | Object | - | 设置上传的请求头部，`action` 存在时有效。TS 类型：`{[key: string]: string}` | N\nimageViewerProps | Object | - | 透传图片预览组件全部属性。TS 类型：`ImageViewerProps`，[ImageViewer API Documents](./image-viewer?tab=api)。[详细类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/upload/type.ts) | N\ninputAttributes | Object | - | 用于添加属性到 HTML 元素 `input`。TS 类型：`CSSProperties` | N\nisBatchUpload | Boolean | false | 多个文件是否作为一个独立文件包，整体替换，整体删除。不允许追加文件，只允许替换文件。`theme=file-flow` 时有效 | N\nlocale | Object | - | 上传组件文本语言配置，支持自定义配置组件中的全部文本。优先级高于全局配置中语言。TS 类型：`UploadConfig` `import { UploadConfig } from '../config-provider/type'`。[详细类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/upload/type.ts) | N\nmax | Number | 0 | 用于控制文件上传数量，值为 0 则不限制。注意，单文件上传场景，请勿设置 `max` 属性 | N\nmethod | String | POST | HTTP 请求类型。可选项：POST/GET/PUT/OPTIONS/PATCH/post/get/put/options/patch | N\nmockProgressDuration | Number | - | 模拟进度间隔时间，单位：毫秒，默认：300。由于原始的上传请求，小文件上传进度只有 0 和 100，故而新增模拟进度，每间隔 `mockProgressDuration` 毫秒刷新一次模拟进度。小文件设置小一点，大文件设置大一点。注意：当 `useMockProgress` 为真时，当前设置有效 | N\nmultiple | Boolean | false | 支持多文件上传 | N\nname | String | file | 文件上传时的名称 | N\nplaceholder | String | - | 占位符 | N\nrequestMethod | Function | - | 自定义上传方法。返回值 `status` 表示上传成功或失败；`error` 或 `response.error` 表示上传失败的原因；<br/>`response` 表示请求上传成功后的返回数据，`response.url` 表示上传成功后的图片/文件地址，`response.files` 表示一个请求上传多个文件/图片后的返回值。<br/>示例一：`{ status: 'fail', error: '上传失败', response }`。<br/>示例二：`{ status: 'success', response: { url: 'https://tdesign.gtimg.com/site/avatar.jpg' } }`。<br/> 示例三：`{ status: 'success', files: [{ url: 'https://xxx.png', name: 'xxx.png' }]}`。TS 类型：`(files: UploadFile \\| UploadFile[]) => Promise<RequestMethodResponse>` `interface RequestMethodResponse { status: 'success' \\| 'fail'; error?: string; response: { url?: string; files?: UploadFile[]; [key: string]: any } }`。[详细类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/upload/type.ts) | N\nshowImageFileName | Boolean | true | 是否显示图片的文件名称 | N\nshowThumbnail | Boolean | false | 是否在文件列表中显示缩略图，`theme=file-flow` 时有效 | N\nshowUploadProgress | Boolean | true | 是否显示上传进度 | N\nsizeLimit | Number / Object | - | 图片文件大小限制，默认单位 KB。可选单位有：`'B' \\| 'KB' \\| 'MB' \\| 'GB'`。示例一：`1000`。示例二：`{ size: 2, unit: 'MB', message: '图片大小不超过 {sizeLimit} MB' }`。TS 类型：`number \\| SizeLimitObj` `interface SizeLimitObj { size: number; unit: SizeUnit ; message?: string }` `type SizeUnitArray = ['B', 'KB', 'MB', 'GB']` `type SizeUnit = SizeUnitArray[number]`。[详细类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/upload/type.ts) | N\nstatus | String | - | 文件上传提示文本状态。可选项：default/success/warning/error | N\ntheme | String | file | 组件风格。custom 表示完全自定义风格；file 表示默认文件上传风格；file-input 表示输入框形式的文件上传；file-flow 表示文件批量上传；image 表示默认图片上传风格；image-flow 表示图片批量上传。可选项：custom/file/file-input/file-flow/image/image-flow | N\ntips | String / Slot / Function | - | 组件下方文本提示，可以使用 `status` 定义文本。TS 类型：`string \\| TNode`。[通用类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/common.ts) | N\ntrigger | Slot / Function | - | 触发上传的元素，`files` 指本次显示的全部文件。`triggerUpload` 用于触发上传文件的选择，在图片上传风格中有效。TS 类型：`TNode<TriggerContext>` `interface TriggerContext { dragActive?: boolean;  files: UploadFile[]; triggerUpload?: (e: MouseEvent) => void }`。[通用类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/common.ts)。[详细类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/upload/type.ts) | N\ntriggerButtonProps | Object | - | 透传选择按钮全部属性。TS 类型：`ButtonProps`，[Button API Documents](./button?tab=api)。[详细类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/upload/type.ts) | N\nuploadAllFilesInOneRequest | Boolean | false | 是否在同一个请求中上传全部文件，默认一个请求上传一个文件。多文件上传时有效 | N\nuploadButton | Object / Slot / Function | - | 批量文件/图片上传，`autoUpload=false` 场景下，透传“点击上传”按钮属性。TS 类型：`null \\| ButtonProps \\| TNode<{ disabled: boolean; uploading: boolean; uploadFiles: () => void; uploadText: string }>`。[通用类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/common.ts) | N\nuploadPastedFiles | Boolean | true | 是否允许粘贴上传剪贴板中的文件 | N\nuseMockProgress | Boolean | true | 是否在请求时间超过 300ms 后显示模拟进度。上传进度有模拟进度和真实进度两种。一般大小的文件上传，真实的上传进度只有 0 和 100，不利于交互呈现，因此组件内置模拟上传进度。真实上传进度一般用于大文件上传。 | N\nvalue | Array | [] | 已上传文件列表，同 `files`。TS 类型：`UploadFile`。支持语法糖 `v-model` 或 `v-model:value`。TS 类型：`Array<T>` | N\ndefaultValue | Array | [] | 已上传文件列表，同 `files`。TS 类型：`UploadFile`。非受控属性。TS 类型：`Array<T>` | N\nwithCredentials | Boolean | false | 上传请求时是否携带 cookie | N\nonCancelUpload | Function |  | TS 类型：`() => void`<br/>点击「取消上传」时触发 | N\nonChange | Function |  | TS 类型：`(value: Array<T>, context: UploadChangeContext) => void`<br/>已上传文件列表发生变化时触发，`trigger` 表示触发本次的来源。[详细类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/upload/type.ts)。<br/>`interface UploadChangeContext { e?: MouseEvent \\| ProgressEvent; response?: any; trigger: UploadChangeTrigger; index?: number; file?: UploadFile; files?: UploadFile[] }`<br/><br/>`type UploadChangeTrigger = 'add' \\| 'remove' \\| 'abort' \\| 'progress-success' \\| 'progress' \\| 'progress-fail'`<br/> | N\nonDragenter | Function |  | TS 类型：`(context: { e: DragEvent }) => void`<br/>进入拖拽区域时触发 | N\nonDragleave | Function |  | TS 类型：`(context: { e: DragEvent }) => void`<br/>离开拖拽区域时触发 | N\nonDrop | Function |  | TS 类型：`(context: { e: DragEvent }) => void`<br/>拖拽结束时触发 | N\nonFail | Function |  | TS 类型：`(options: UploadFailContext) => void`<br/>上传失败后触发。`response` 指接口响应结果，`response.error` 会作为错误文本提醒。如果希望判定为上传失败，但接口响应数据不包含 `error` 字段，可以使用 `formatResponse` 格式化 `response` 数据结构。如果是多文件多请求上传场景，请到事件 `onOneFileFail` 中查看 `response`。[详细类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/upload/type.ts)。<br/>`interface UploadFailContext { e?: ProgressEvent; failedFiles: UploadFile[]; currentFiles: UploadFile[]; response?: any; file: UploadFile; XMLHttpRequest?: XMLHttpRequest}`<br/> | N\nonOneFileFail | Function |  | TS 类型：`(options: UploadFailContext) => void`<br/>多文件/图片场景下，单个文件上传失败后触发，如果一个请求上传一个文件，则会触发多次。单文件/图片不会触发 | N\nonOneFileSuccess | Function |  | TS 类型：`(context: Pick<SuccessContext, 'e' \\| 'file' \\| 'response' \\| 'XMLHttpRequest'>) => void`<br/>单个文件上传成功后触发，在多文件场景下会触发多次。`context.file` 表示当前上传成功的单个文件，`context.response` 表示上传请求的返回数据 | N\nonPreview | Function |  | TS 类型：`(options: { file: UploadFile; index: number; e: MouseEvent }) => void`<br/>点击图片预览时触发，文件没有预览 | N\nonProgress | Function |  | TS 类型：`(options: ProgressContext) => void`<br/>上传进度变化时触发，真实进度和模拟进度都会触发。<br/>⚠️ 原始上传请求，小文件的上传进度只有 0 和 100，故而不会触发 `progress` 事件；只有大文件才有真实的中间进度。如果你希望很小的文件也显示上传进度，保证 `useMockProgress=true` 的情况下，设置 `mockProgressDuration` 为更小的值。<br/>参数 `options.type=real` 表示真实上传进度，`options.type=mock` 表示模拟上传进度。[详细类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/upload/type.ts)。<br/>`interface ProgressContext { e?: ProgressEvent; file?: UploadFile; currentFiles: UploadFile[]; percent: number; type: UploadProgressType; XMLHttpRequest?: XMLHttpRequest }`<br/><br/>`type UploadProgressType = 'real' \\| 'mock'`<br/> | N\nonRemove | Function |  | TS 类型：`(context: UploadRemoveContext) => void`<br/>移除文件时触发。[详细类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/upload/type.ts)。<br/>`interface UploadRemoveContext { index?: number; file?: UploadFile; e: MouseEvent }`<br/> | N\nonSelectChange | Function |  | TS 类型：`(files: File[], context: UploadSelectChangeContext) => void`<br/>选择文件或图片之后，上传之前，触发该事件。[详细类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/upload/type.ts)。<br/>`interface UploadSelectChangeContext { currentSelectedFiles: UploadFile[] }`<br/> | N\nonSuccess | Function |  | TS 类型：`(context: SuccessContext) => void`<br/>上传成功后触发。<br/>`context.currentFiles` 表示当次请求上传的文件（无论成功或失败），`context.fileList` 表示上传成功后的文件，`context.response` 表示上传请求的返回数据。<br/>`context.results` 表示单次选择全部文件上传成功后的响应结果，可以在这个字段存在时提醒用户上传成功或失败。<br />。[详细类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/upload/type.ts)。<br/>`interface SuccessContext { e?: ProgressEvent; file?: UploadFile; fileList?: UploadFile[]; currentFiles?: UploadFile[]; response?: any; results?: SuccessContext[]; XMLHttpRequest?: XMLHttpRequest }`<br/> | N\nonValidate | Function |  | TS 类型：`(context: { type: UploadValidateType, files: UploadFile[] }) => void`<br/>文件上传校验结束事件，文件数量超出、文件大小超出限制、文件同名、`beforeAllFilesUpload` 返回值为假、`beforeUpload` 返回值为假等场景会触发。<br/>注意：如果设置允许上传同名文件，即 `allowUploadDuplicateFile=true`，则不会因为文件重名触发该事件。<br/>结合 `status` 和 `tips` 可以在组件中呈现不同类型的错误（或告警）提示。[详细类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/upload/type.ts)。<br/>`type UploadValidateType = 'FILE_OVER_SIZE_LIMIT' \\| 'FILES_OVER_LENGTH_LIMIT' \\| 'FILTER_FILE_SAME_NAME' \\| 'BEFORE_ALL_FILES_UPLOAD' \\| 'CUSTOM_BEFORE_UPLOAD'`<br/> | N\nonWaitingUploadFilesChange | Function |  | TS 类型：`(context: { files: Array<UploadFile>, trigger: 'validate' \\| 'remove' \\| 'uploaded' }) => void`<br/>待上传文件列表发生变化时触发。`context.files` 表示事件参数为待上传文件，`context.trigger` 引起此次变化的触发来源 | N\n\n### Upload Events\n\n名称 | 参数 | 描述\n-- | -- | --\ncancel-upload | \\- | 点击「取消上传」时触发\nchange | `(value: Array<T>, context: UploadChangeContext)` | 已上传文件列表发生变化时触发，`trigger` 表示触发本次的来源。[详细类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/upload/type.ts)。<br/>`interface UploadChangeContext { e?: MouseEvent \\| ProgressEvent; response?: any; trigger: UploadChangeTrigger; index?: number; file?: UploadFile; files?: UploadFile[] }`<br/><br/>`type UploadChangeTrigger = 'add' \\| 'remove' \\| 'abort' \\| 'progress-success' \\| 'progress' \\| 'progress-fail'`<br/>\ndragenter | `(context: { e: DragEvent })` | 进入拖拽区域时触发\ndragleave | `(context: { e: DragEvent })` | 离开拖拽区域时触发\ndrop | `(context: { e: DragEvent })` | 拖拽结束时触发\nfail | `(options: UploadFailContext)` | 上传失败后触发。`response` 指接口响应结果，`response.error` 会作为错误文本提醒。如果希望判定为上传失败，但接口响应数据不包含 `error` 字段，可以使用 `formatResponse` 格式化 `response` 数据结构。如果是多文件多请求上传场景，请到事件 `onOneFileFail` 中查看 `response`。[详细类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/upload/type.ts)。<br/>`interface UploadFailContext { e?: ProgressEvent; failedFiles: UploadFile[]; currentFiles: UploadFile[]; response?: any; file: UploadFile; XMLHttpRequest?: XMLHttpRequest}`<br/>\none-file-fail | `(options: UploadFailContext)` | 多文件/图片场景下，单个文件上传失败后触发，如果一个请求上传一个文件，则会触发多次。单文件/图片不会触发\none-file-success | `(context: Pick<SuccessContext, 'e' \\| 'file' \\| 'response' \\| 'XMLHttpRequest'>)` | 单个文件上传成功后触发，在多文件场景下会触发多次。`context.file` 表示当前上传成功的单个文件，`context.response` 表示上传请求的返回数据\npreview | `(options: { file: UploadFile; index: number; e: MouseEvent })` | 点击图片预览时触发，文件没有预览\nprogress | `(options: ProgressContext)` | 上传进度变化时触发，真实进度和模拟进度都会触发。<br/>⚠️ 原始上传请求，小文件的上传进度只有 0 和 100，故而不会触发 `progress` 事件；只有大文件才有真实的中间进度。如果你希望很小的文件也显示上传进度，保证 `useMockProgress=true` 的情况下，设置 `mockProgressDuration` 为更小的值。<br/>参数 `options.type=real` 表示真实上传进度，`options.type=mock` 表示模拟上传进度。[详细类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/upload/type.ts)。<br/>`interface ProgressContext { e?: ProgressEvent; file?: UploadFile; currentFiles: UploadFile[]; percent: number; type: UploadProgressType; XMLHttpRequest?: XMLHttpRequest }`<br/><br/>`type UploadProgressType = 'real' \\| 'mock'`<br/>\nremove | `(context: UploadRemoveContext)` | 移除文件时触发。[详细类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/upload/type.ts)。<br/>`interface UploadRemoveContext { index?: number; file?: UploadFile; e: MouseEvent }`<br/>\nselect-change | `(files: File[], context: UploadSelectChangeContext)` | 选择文件或图片之后，上传之前，触发该事件。[详细类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/upload/type.ts)。<br/>`interface UploadSelectChangeContext { currentSelectedFiles: UploadFile[] }`<br/>\nsuccess | `(context: SuccessContext)` | 上传成功后触发。<br/>`context.currentFiles` 表示当次请求上传的文件（无论成功或失败），`context.fileList` 表示上传成功后的文件，`context.response` 表示上传请求的返回数据。<br/>`context.results` 表示单次选择全部文件上传成功后的响应结果，可以在这个字段存在时提醒用户上传成功或失败。<br />。[详细类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/upload/type.ts)。<br/>`interface SuccessContext { e?: ProgressEvent; file?: UploadFile; fileList?: UploadFile[]; currentFiles?: UploadFile[]; response?: any; results?: SuccessContext[]; XMLHttpRequest?: XMLHttpRequest }`<br/>\nvalidate | `(context: { type: UploadValidateType, files: UploadFile[] })` | 文件上传校验结束事件，文件数量超出、文件大小超出限制、文件同名、`beforeAllFilesUpload` 返回值为假、`beforeUpload` 返回值为假等场景会触发。<br/>注意：如果设置允许上传同名文件，即 `allowUploadDuplicateFile=true`，则不会因为文件重名触发该事件。<br/>结合 `status` 和 `tips` 可以在组件中呈现不同类型的错误（或告警）提示。[详细类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/upload/type.ts)。<br/>`type UploadValidateType = 'FILE_OVER_SIZE_LIMIT' \\| 'FILES_OVER_LENGTH_LIMIT' \\| 'FILTER_FILE_SAME_NAME' \\| 'BEFORE_ALL_FILES_UPLOAD' \\| 'CUSTOM_BEFORE_UPLOAD'`<br/>\nwaiting-upload-files-change | `(context: { files: Array<UploadFile>, trigger: 'validate' \\| 'remove' \\| 'uploaded' })` | 待上传文件列表发生变化时触发。`context.files` 表示事件参数为待上传文件，`context.trigger` 引起此次变化的触发来源\n\n### UploadInstanceFunctions 组件实例方法\n\n名称 | 参数 | 返回值 | 描述\n-- | -- | -- | --\ntriggerUpload | \\- | \\- | 必需。组件实例方法，打开文件选择器\nuploadFilePercent | `(params: { file: UploadFile; percent: number })` | \\- | 必需。设置上传中文件的上传进度\nuploadFiles | `(files?: UploadFile[])` | \\- | 必需。组件实例方法，默认上传未成功上传过的所有文件。带参数时，表示上传指定文件\n\n### UploadFile\n\n名称 | 类型 | 默认值 | 说明 | 必传\n-- | -- | -- | -- | --\nlastModified | Number | - | 上一次变更的时间 | N\nname | String | - | 文件名称 | N\npercent | Number | - | 下载进度 | N\nraw | Object | - | 原始文件对象。TS 类型：`File` | N\nresponse | Object | - | 上传接口返回的数据。`response.error` 存在时会判断此次上传失败，并显示错误文本信息；`response.url` 会作为文件上传成功后的地址，并使用该地址显示图片。TS 类型：`{ [key: string]: any }` | N\nsize | Number | - | 文件大小 | N\nstatus | String | - | 文件上传状态：上传成功，上传失败，上传中，等待上传。TS 类型：` 'success' \\| 'fail' \\| 'progress' \\| 'waiting'` | N\ntype | String | - | 文件类型 | N\nuploadTime | String | - | 上传时间 | N\nurl | String | - | 文件上传成功后的下载/访问地址 | N\n`PlainObject` | \\- | - | `PlainObject` 不是 UploadFile 中的属性，而表示 UploadFile 本身支持添加任意属性，`type PlainObject = {[key: string]: any}`' | N\n"
  },
  {
    "name": "watermark",
    "propsData": ":: BASE_DOC ::\n\n## API\n\n### Watermark Props\n\n名称 | 类型 | 默认值 | 描述 | 必传\n-- | -- | -- | -- | --\nalpha | Number | 1 | 水印整体透明度，取值范围 [0-1] | N\ncontent | String / Slot / Function | - | 水印所覆盖的内容节点。TS 类型：`string \\| TNode`。[通用类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/common.ts) | N\ndefault | String / Slot / Function | - | 水印所覆盖的内容节点，同 `content`。TS 类型：`string \\| TNode`。[通用类型定义](https://github.com/Tencent/tdesign-vue-next/blob/develop/packages/components/common.ts) | N\nheight | Number | - | 水印高度 | N\nisRepeat | Boolean | true | 水印是否重复出现 | N\nlineSpace | Number | 16 | 行间距，只作用在多行（`content` 配置为数组）情况下 | N\nmovable | Boolean | false | 水印是否可移动 | N\nmoveInterval | Number | 3000 | 水印发生运动位移的间隙，单位：毫秒 | N\noffset | Array | - | 水印在画布上绘制的水平和垂直偏移量，正常情况下水印绘制在中间位置，即 `offset = [gapX / 2, gapY / 2]`。TS 类型：`Array<number>` | N\nremovable | Boolean | true | 水印是否可被删除 | N\nrotate | Number | -22 | 水印旋转的角度，单位 ° | N\nwatermarkContent | Object / Array | - | 水印内容，需要显示多行情况下可配置为数组。TS 类型：`WatermarkText\\|WatermarkImage\\|Array<WatermarkText\\|WatermarkImage>` | N\nwidth | Number | - | 水印宽度 | N\nx | Number | - | 水印之间的水平间距 | N\ny | Number | - | 水印之间的垂直间距 | N\nzIndex | Number | - | 水印元素的 `z-index`，默认值写在 CSS 中 | N\n\n### WatermarkText\n\n名称 | 类型 | 默认值 | 描述 | 必传\n-- | -- | -- | -- | --\nfontColor | String | rgba(0,0,0,0.1) | 水印文本文字颜色 | N\nfontFamily | String | - | 水印文本文字字体 | N\nfontSize | Number | 16 | 水印文本文字大小 | N\nfontWeight | String | normal | 水印文本文字粗细。可选项：normal/lighter/bold/bolder | N\ntext | String | - | 水印文本内容 | N\n\n### WatermarkImage\n\n名称 | 类型 | 默认值 | 描述 | 必传\n-- | -- | -- | -- | --\nisGrayscale | Boolean | false | 水印图片是否需要灰阶显示 | N\nurl | String | - | 水印图片源地址，为了显示清楚，建议导出 2 倍或 3 倍图 | N\n"
  }
]